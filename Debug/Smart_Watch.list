
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e8  0800a2e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f0  0800a2f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035c4  20000080  0800a378  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003644  0800a378  00023644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022fc3  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004614  00000000  00000000  000430b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  000476d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001709  00000000  00000000  00049470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050a9  00000000  00000000  0004ab79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000228c0  00000000  00000000  0004fc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107f32  00000000  00000000  000724e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008464  00000000  00000000  0017a414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00182878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009980 	.word	0x08009980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009980 	.word	0x08009980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f001 f80a 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f86e 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f9d0 	bl	80010f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d58:	f000 f99e 	bl	8001098 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000d5c:	f000 f8fc 	bl	8000f58 <MX_RTC_Init>
  MX_I2C1_Init();
 8000d60:	f000 f8ba 	bl	8000ed8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000d64:	f000 fdfc 	bl	8001960 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fe63 	bl	8001a34 <ssd1306_Fill>
  ssd1306_SetCursor(0,0);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 ffad 	bl	8001cd0 <ssd1306_SetCursor>
  ssd1306_WriteString("BOOTING", Font_7x10 ,White);
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <main+0xa0>)
 8000d78:	2301      	movs	r3, #1
 8000d7a:	ca06      	ldmia	r2, {r1, r2}
 8000d7c:	481b      	ldr	r0, [pc, #108]	; (8000dec <main+0xa4>)
 8000d7e:	f000 ff81 	bl	8001c84 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d82:	f000 fe7b 	bl	8001a7c <ssd1306_UpdateScreen>

  setupMax30102(&max30102);
 8000d86:	481a      	ldr	r0, [pc, #104]	; (8000df0 <main+0xa8>)
 8000d88:	f000 fa1c 	bl	80011c4 <setupMax30102>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d8c:	f005 fcee 	bl	800676c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 8000d90:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <main+0xac>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4818      	ldr	r0, [pc, #96]	; (8000df8 <main+0xb0>)
 8000d96:	f005 fd33 	bl	8006800 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <main+0xb4>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <main+0xb8>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4817      	ldr	r0, [pc, #92]	; (8000e04 <main+0xbc>)
 8000da6:	f005 fd2b 	bl	8006800 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <main+0xc0>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <main+0xc4>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <main+0xc8>)
 8000db6:	f005 fd23 	bl	8006800 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <main+0xcc>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 8000dc0:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <main+0xd0>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4815      	ldr	r0, [pc, #84]	; (8000e1c <main+0xd4>)
 8000dc6:	f005 fd1b 	bl	8006800 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <main+0xd8>)
 8000dce:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <main+0xdc>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <main+0xe0>)
 8000dd6:	f005 fd13 	bl	8006800 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <main+0xe4>)
 8000dde:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de0:	f005 fce8 	bl	80067b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <main+0x9c>
 8000de6:	bf00      	nop
 8000de8:	2000001c 	.word	0x2000001c
 8000dec:	080099e8 	.word	0x080099e8
 8000df0:	200001c8 	.word	0x200001c8
 8000df4:	08009a4c 	.word	0x08009a4c
 8000df8:	08001245 	.word	0x08001245
 8000dfc:	200001b4 	.word	0x200001b4
 8000e00:	08009a70 	.word	0x08009a70
 8000e04:	08001259 	.word	0x08001259
 8000e08:	200001b8 	.word	0x200001b8
 8000e0c:	08009a94 	.word	0x08009a94
 8000e10:	08001369 	.word	0x08001369
 8000e14:	200001bc 	.word	0x200001bc
 8000e18:	08009ab8 	.word	0x08009ab8
 8000e1c:	0800137d 	.word	0x0800137d
 8000e20:	200001c0 	.word	0x200001c0
 8000e24:	08009adc 	.word	0x08009adc
 8000e28:	08001391 	.word	0x08001391
 8000e2c:	200001c4 	.word	0x200001c4

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b096      	sub	sp, #88	; 0x58
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2244      	movs	r2, #68	; 0x44
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 f970 	bl	8009124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e56:	f002 f9cf 	bl	80031f8 <HAL_PWREx_ControlVoltageScaling>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e60:	f000 fae2 	bl	8001428 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e64:	230a      	movs	r3, #10
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e76:	2302      	movs	r3, #2
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e82:	230a      	movs	r3, #10
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e86:	2307      	movs	r3, #7
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fa04 	bl	80032a4 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ea2:	f000 fac1 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fdcc 	bl	8003a5c <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000eca:	f000 faad 	bl	8001428 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3758      	adds	r7, #88	; 0x58
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <MX_I2C1_Init+0x78>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <MX_I2C1_Init+0x7c>)
 8000ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f12:	480e      	ldr	r0, [pc, #56]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f14:	f001 fa26 	bl	8002364 <HAL_I2C_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f1e:	f000 fa83 	bl	8001428 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f26:	f002 f8c1 	bl	80030ac <HAL_I2CEx_ConfigAnalogFilter>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f30:	f000 fa7a 	bl	8001428 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_I2C1_Init+0x74>)
 8000f38:	f002 f903 	bl	8003142 <HAL_I2CEx_ConfigDigitalFilter>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 fa71 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200000b4 	.word	0x200000b4
 8000f50:	40005400 	.word	0x40005400
 8000f54:	10909cec 	.word	0x10909cec

08000f58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	222c      	movs	r2, #44	; 0x2c
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f008 f8d3 	bl	8009124 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <MX_RTC_Init+0x138>)
 8000f80:	4a44      	ldr	r2, [pc, #272]	; (8001094 <MX_RTC_Init+0x13c>)
 8000f82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f84:	4b42      	ldr	r3, [pc, #264]	; (8001090 <MX_RTC_Init+0x138>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <MX_RTC_Init+0x138>)
 8000f8c:	227f      	movs	r2, #127	; 0x7f
 8000f8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f90:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <MX_RTC_Init+0x138>)
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <MX_RTC_Init+0x138>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <MX_RTC_Init+0x138>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fa2:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <MX_RTC_Init+0x138>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <MX_RTC_Init+0x138>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fae:	4838      	ldr	r0, [pc, #224]	; (8001090 <MX_RTC_Init+0x138>)
 8000fb0:	f003 fc66 	bl	8004880 <HAL_RTC_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000fba:	f000 fa35 	bl	8001428 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8000fbe:	2318      	movs	r3, #24
 8000fc0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	482b      	ldr	r0, [pc, #172]	; (8001090 <MX_RTC_Init+0x138>)
 8000fe2:	f003 fcd5 	bl	8004990 <HAL_RTC_SetTime>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000fec:	f000 fa1c 	bl	8001428 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 8000ffc:	2311      	movs	r3, #17
 8000ffe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001002:	2300      	movs	r3, #0
 8001004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <MX_RTC_Init+0x138>)
 8001012:	f003 fdb6 	bl	8004b82 <HAL_RTC_SetDate>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800101c:	f000 fa04 	bl	8001428 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8001020:	2303      	movs	r3, #3
 8001022:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x3;
 8001024:	2303      	movs	r3, #3
 8001026:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001028:	2300      	movs	r3, #0
 800102a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800104a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_RTC_Init+0x138>)
 8001058:	f003 fe68 	bl	8004d2c <HAL_RTC_SetAlarm_IT>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001062:	f000 f9e1 	bl	8001428 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <MX_RTC_Init+0x138>)
 800106a:	f004 f8bb 	bl	80051e4 <HAL_RTCEx_SetCalibrationOutPut>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 8001074:	f000 f9d8 	bl	8001428 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_RTC_Init+0x138>)
 800107a:	f004 f8fa 	bl	8005272 <HAL_RTCEx_SetRefClock>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 8001084:	f000 f9d0 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3748      	adds	r7, #72	; 0x48
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000108 	.word	0x20000108
 8001094:	40002800 	.word	0x40002800

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <MX_USART2_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART2_UART_Init+0x58>)
 80010dc:	f004 fbca 	bl	8005874 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f000 f99f 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	2000012c 	.word	0x2000012c
 80010f4:	40004400 	.word	0x40004400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <MX_GPIO_Init+0xc4>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_GPIO_Init+0xc4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <MX_GPIO_Init+0xc4>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_GPIO_Init+0xc4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2120      	movs	r1, #32
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f001 f8dd 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin heartRateInterrupt_Pin */
  GPIO_InitStruct.Pin = B1_Pin|heartRateInterrupt_Pin;
 800117a:	f242 0301 	movw	r3, #8193	; 0x2001
 800117e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001180:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <MX_GPIO_Init+0xc8>)
 8001192:	f000 ff25 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001196:	2320      	movs	r3, #32
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 ff16 	bl	8001fe0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000800 	.word	0x48000800

080011c4 <setupMax30102>:

/* USER CODE BEGIN 4 */
void setupMax30102 (max30102_t *max30102)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	max30102_init(max30102, &hi2c1);
 80011cc:	491c      	ldr	r1, [pc, #112]	; (8001240 <setupMax30102+0x7c>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f005 f86b 	bl	80062aa <max30102_init>
	max30102_reset(max30102);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f005 f8df 	bl	8006398 <max30102_reset>
	max30102_clear_fifo(max30102);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f005 fa62 	bl	80066a4 <max30102_clear_fifo>
	// FIFO configurations
	max30102_set_fifo_config(max30102, max30102_smp_ave_2, 1, 17);
 80011e0:	2311      	movs	r3, #17
 80011e2:	2201      	movs	r2, #1
 80011e4:	2101      	movs	r1, #1
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 fa22 	bl	8006630 <max30102_set_fifo_config>
	max30102_set_mode(max30102, max30102_spo2);
 80011ec:	2103      	movs	r1, #3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f005 f93b 	bl	800646a <max30102_set_mode>
	// LED configurations
	max30102_set_led_pulse_width(max30102, max30102_pw_16_bit);
 80011f4:	2101      	movs	r1, #1
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f005 f981 	bl	80064fe <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(max30102, max30102_adc_4096);
 80011fc:	2101      	movs	r1, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f005 f9a0 	bl	8006544 <max30102_set_adc_resolution>
	max30102_set_sampling_rate(max30102, max30102_sr_800);
 8001204:	2104      	movs	r1, #4
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f005 f955 	bl	80064b6 <max30102_set_sampling_rate>
	max30102_set_led_current_1(max30102, 10);
 800120c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f005 f9bd 	bl	8006590 <max30102_set_led_current_1>
	max30102_set_led_current_2(max30102, 10);
 8001216:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f005 f9e0 	bl	80065e0 <max30102_set_led_current_2>

	// Enter SpO2 mode
	//max30102_set_mode(max30102, max30102_spo2);

	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(max30102, 1);
 8001220:	2101      	movs	r1, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f005 f8c9 	bl	80063ba <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(max30102, 1);
 8001228:	2101      	movs	r1, #1
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f005 f905 	bl	800643a <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(max30102, 1);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f005 f8e9 	bl	800640a <max30102_set_die_temp_rdy>
	//max30102_set_ppg_rdy(max30102, 1);
	//max30102_set_alc_ovf(max30102, 1);
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200000b4 	.word	0x200000b4

08001244 <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f005 fb68 	bl	8006924 <osDelay>
 8001254:	e7fa      	b.n	800124c <start_default_task+0x8>
	...

08001258 <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b098      	sub	sp, #96	; 0x60
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {

	  ssd1306_Fill(Black);
 8001260:	2000      	movs	r0, #0
 8001262:	f000 fbe7 	bl	8001a34 <ssd1306_Fill>
	  ssd1306_SetCursor(0,0);
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f000 fd31 	bl	8001cd0 <ssd1306_SetCursor>

	  char temp [4][19];
	  //"     hh-mm PM     ";
	  char *ampm = ((userData.am) ? "AM" : "PM");
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <start_wright_to_display_task+0xf0>)
 8001270:	7a1b      	ldrb	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <start_wright_to_display_task+0x22>
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <start_wright_to_display_task+0xf4>)
 8001278:	e000      	b.n	800127c <start_wright_to_display_task+0x24>
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <start_wright_to_display_task+0xf8>)
 800127c:	657b      	str	r3, [r7, #84]	; 0x54
	  snprintf(temp[0], 19, "     %02i-%02i %.2s     " ,userData.hour ,userData.min ,ampm);
 800127e:	4b32      	ldr	r3, [pc, #200]	; (8001348 <start_wright_to_display_task+0xf0>)
 8001280:	6819      	ldr	r1, [r3, #0]
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <start_wright_to_display_task+0xf0>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f107 0008 	add.w	r0, r7, #8
 800128a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	460b      	mov	r3, r1
 8001292:	4a30      	ldr	r2, [pc, #192]	; (8001354 <start_wright_to_display_task+0xfc>)
 8001294:	2113      	movs	r1, #19
 8001296:	f007 ff11 	bl	80090bc <sniprintf>
	  ssd1306_WriteString(temp[0], Font_7x10 ,White);
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <start_wright_to_display_task+0x100>)
 800129c:	f107 0008 	add.w	r0, r7, #8
 80012a0:	2301      	movs	r3, #1
 80012a2:	ca06      	ldmia	r2, {r1, r2}
 80012a4:	f000 fcee 	bl	8001c84 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,20);
 80012a8:	2114      	movs	r1, #20
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 fd10 	bl	8001cd0 <ssd1306_SetCursor>
	  snprintf(temp[1], 19, "BPM: %i", userData.bpm);
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <start_wright_to_display_task+0xf0>)
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	f103 0013 	add.w	r0, r3, #19
 80012bc:	4613      	mov	r3, r2
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <start_wright_to_display_task+0x104>)
 80012c0:	2113      	movs	r1, #19
 80012c2:	f007 fefb 	bl	80090bc <sniprintf>
	  ssd1306_WriteString(temp[1], Font_7x10, White);
 80012c6:	4a24      	ldr	r2, [pc, #144]	; (8001358 <start_wright_to_display_task+0x100>)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	f103 0013 	add.w	r0, r3, #19
 80012d0:	2301      	movs	r3, #1
 80012d2:	ca06      	ldmia	r2, {r1, r2}
 80012d4:	f000 fcd6 	bl	8001c84 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,30);
 80012d8:	211e      	movs	r1, #30
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fcf8 	bl	8001cd0 <ssd1306_SetCursor>
	  snprintf(temp[2], 19, "BO2: %i%%", userData.spO2);
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <start_wright_to_display_task+0xf0>)
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80012ec:	4613      	mov	r3, r2
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <start_wright_to_display_task+0x108>)
 80012f0:	2113      	movs	r1, #19
 80012f2:	f007 fee3 	bl	80090bc <sniprintf>
	  ssd1306_WriteString(temp[2], Font_7x10, White);
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <start_wright_to_display_task+0x100>)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8001300:	2301      	movs	r3, #1
 8001302:	ca06      	ldmia	r2, {r1, r2}
 8001304:	f000 fcbe 	bl	8001c84 <ssd1306_WriteString>


	  ssd1306_SetCursor(0,40);
 8001308:	2128      	movs	r1, #40	; 0x28
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fce0 	bl	8001cd0 <ssd1306_SetCursor>
	  snprintf(temp[3], 19, "Steps: %i", userData.steps);
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <start_wright_to_display_task+0xf0>)
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800131c:	4613      	mov	r3, r2
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <start_wright_to_display_task+0x10c>)
 8001320:	2113      	movs	r1, #19
 8001322:	f007 fecb 	bl	80090bc <sniprintf>
	  ssd1306_WriteString(temp[3], Font_7x10, White);
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <start_wright_to_display_task+0x100>)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001330:	2301      	movs	r3, #1
 8001332:	ca06      	ldmia	r2, {r1, r2}
 8001334:	f000 fca6 	bl	8001c84 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001338:	f000 fba0 	bl	8001a7c <ssd1306_UpdateScreen>

	  osDelay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f005 faf0 	bl	8006924 <osDelay>
  {
 8001344:	e78c      	b.n	8001260 <start_wright_to_display_task+0x8>
 8001346:	bf00      	nop
 8001348:	20000000 	.word	0x20000000
 800134c:	080099f0 	.word	0x080099f0
 8001350:	080099f4 	.word	0x080099f4
 8001354:	080099f8 	.word	0x080099f8
 8001358:	2000001c 	.word	0x2000001c
 800135c:	08009a14 	.word	0x08009a14
 8001360:	08009a1c 	.word	0x08009a1c
 8001364:	08009a28 	.word	0x08009a28

08001368 <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_heart_rate_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 8001370:	4801      	ldr	r0, [pc, #4]	; (8001378 <start_read_heart_rate_task+0x10>)
 8001372:	f005 fad7 	bl	8006924 <osDelay>
 8001376:	e7fb      	b.n	8001370 <start_read_heart_rate_task+0x8>
 8001378:	000186a0 	.word	0x000186a0

0800137c <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(10000);
 8001384:	f242 7010 	movw	r0, #10000	; 0x2710
 8001388:	f005 facc 	bl	8006924 <osDelay>
 800138c:	e7fa      	b.n	8001384 <start_read_acceloromater_task+0x8>
	...

08001390 <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001398:	2200      	movs	r2, #0
 800139a:	4916      	ldr	r1, [pc, #88]	; (80013f4 <start_date_and_time_task+0x64>)
 800139c:	4816      	ldr	r0, [pc, #88]	; (80013f8 <start_date_and_time_task+0x68>)
 800139e:	f003 fc77 	bl	8004c90 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013a2:	2200      	movs	r2, #0
 80013a4:	4915      	ldr	r1, [pc, #84]	; (80013fc <start_date_and_time_task+0x6c>)
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <start_date_and_time_task+0x68>)
 80013a8:	f003 fb8f 	bl	8004aca <HAL_RTC_GetTime>
	  if(sTime.Hours < 12){
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <start_date_and_time_task+0x6c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b0b      	cmp	r3, #11
 80013b2:	d810      	bhi.n	80013d6 <start_date_and_time_task+0x46>
		  userData.am = 1;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <start_date_and_time_task+0x70>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	721a      	strb	r2, [r3, #8]
		  if(sTime.Hours == 0){
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <start_date_and_time_task+0x6c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <start_date_and_time_task+0x3a>
			  userData.hour = 12;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <start_date_and_time_task+0x70>)
 80013c4:	220c      	movs	r2, #12
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e00d      	b.n	80013e6 <start_date_and_time_task+0x56>
		  } else {
			  userData.hour = sTime.Hours;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <start_date_and_time_task+0x6c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <start_date_and_time_task+0x70>)
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e007      	b.n	80013e6 <start_date_and_time_task+0x56>
		  }

	  } else {
		  userData.am = 0;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <start_date_and_time_task+0x70>)
 80013d8:	2200      	movs	r2, #0
 80013da:	721a      	strb	r2, [r3, #8]
		  userData.hour = sTime.Hours - 12;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <start_date_and_time_task+0x6c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3b0c      	subs	r3, #12
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <start_date_and_time_task+0x70>)
 80013e4:	6013      	str	r3, [r2, #0]
	  }

	  userData.min = sTime.Minutes;
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <start_date_and_time_task+0x6c>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <start_date_and_time_task+0x70>)
 80013ee:	605a      	str	r2, [r3, #4]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013f0:	e7d2      	b.n	8001398 <start_date_and_time_task+0x8>
 80013f2:	bf00      	nop
 80013f4:	200000b0 	.word	0x200000b0
 80013f8:	20000108 	.word	0x20000108
 80013fc:	2000009c 	.word	0x2000009c
 8001400:	20000000 	.word	0x20000000

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fcbd 	bl	8001d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_MspInit+0x4c>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_MspInit+0x4c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_MspInit+0x4c>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_MspInit+0x4c>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_MspInit+0x4c>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	210f      	movs	r1, #15
 800146e:	f06f 0001 	mvn.w	r0, #1
 8001472:	f000 fd8b 	bl	8001f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ac      	sub	sp, #176	; 0xb0
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2288      	movs	r2, #136	; 0x88
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 fe3d 	bl	8009124 <memset>
  if(hi2c->Instance==I2C1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_I2C_MspInit+0xb0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d13b      	bne.n	800152c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b4:	2340      	movs	r3, #64	; 0x40
 80014b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fd21 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014cc:	f7ff ffac 	bl	8001428 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <HAL_I2C_MspInit+0xb8>)
 8001510:	f000 fd66 	bl	8001fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151e:	6593      	str	r3, [r2, #88]	; 0x58
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_I2C_MspInit+0xb4>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	37b0      	adds	r7, #176	; 0xb0
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	40021000 	.word	0x40021000
 800153c:	48000400 	.word	0x48000400

08001540 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0aa      	sub	sp, #168	; 0xa8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2288      	movs	r2, #136	; 0x88
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f007 fddf 	bl	8009124 <memset>
  if(hrtc->Instance==RTC)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <HAL_RTC_MspInit+0xc0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d142      	bne.n	80015f6 <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001574:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	4618      	mov	r0, r3
 8001584:	f002 fcc0 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 800158e:	f7ff ff4b 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_RTC_MspInit+0xc4>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001598:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <HAL_RTC_MspInit+0xc4>)
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_RTC_MspInit+0xc4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_RTC_MspInit+0xc4>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_RTC_MspInit+0xc4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80015ba:	f248 0304 	movw	r3, #32772	; 0x8004
 80015be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_RTC_MspInit+0xc8>)
 80015e2:	f000 fcfd 	bl	8001fe0 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2105      	movs	r1, #5
 80015ea:	2029      	movs	r0, #41	; 0x29
 80015ec:	f000 fcce 	bl	8001f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015f0:	2029      	movs	r0, #41	; 0x29
 80015f2:	f000 fce7 	bl	8001fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	37a8      	adds	r7, #168	; 0xa8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40002800 	.word	0x40002800
 8001604:	40021000 	.word	0x40021000
 8001608:	48000400 	.word	0x48000400

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ac      	sub	sp, #176	; 0xb0
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2288      	movs	r2, #136	; 0x88
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f007 fd79 	bl	8009124 <memset>
  if(huart->Instance==USART2)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a21      	ldr	r2, [pc, #132]	; (80016bc <HAL_UART_MspInit+0xb0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d13b      	bne.n	80016b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001640:	2300      	movs	r3, #0
 8001642:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f002 fc5d 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001654:	f7ff fee8 	bl	8001428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 800165e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001662:	6593      	str	r3, [r2, #88]	; 0x58
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167c:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_UART_MspInit+0xb4>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001688:	230c      	movs	r3, #12
 800168a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a0:	2307      	movs	r3, #7
 80016a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f000 fc96 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	37b0      	adds	r7, #176	; 0xb0
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_InitTick+0xe0>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <HAL_InitTick+0xe0>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	6593      	str	r3, [r2, #88]	; 0x58
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_InitTick+0xe0>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ea:	f107 0210 	add.w	r2, r7, #16
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 fb75 	bl	8003de4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001704:	f002 fb42 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8001708:	6378      	str	r0, [r7, #52]	; 0x34
 800170a:	e004      	b.n	8001716 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170c:	f002 fb3e 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_InitTick+0xe4>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	3b01      	subs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_InitTick+0xe8>)
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_InitTick+0xec>)
 8001728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_InitTick+0xe8>)
 800172c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001730:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_InitTick+0xe8>)
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_InitTick+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_InitTick+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_InitTick+0xe8>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800174a:	4818      	ldr	r0, [pc, #96]	; (80017ac <HAL_InitTick+0xe8>)
 800174c:	f003 fddf 	bl	800530e <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11b      	bne.n	8001796 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800175e:	4813      	ldr	r0, [pc, #76]	; (80017ac <HAL_InitTick+0xe8>)
 8001760:	f003 fe36 	bl	80053d0 <HAL_TIM_Base_Start_IT>
 8001764:	4603      	mov	r3, r0
 8001766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800176a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800176e:	2b00      	cmp	r3, #0
 8001770:	d111      	bne.n	8001796 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001772:	2036      	movs	r0, #54	; 0x36
 8001774:	f000 fc26 	bl	8001fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	d808      	bhi.n	8001790 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800177e:	2200      	movs	r2, #0
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	2036      	movs	r0, #54	; 0x36
 8001784:	f000 fc02 	bl	8001f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_InitTick+0xf0>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e002      	b.n	8001796 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800179a:	4618      	mov	r0, r3
 800179c:	3738      	adds	r7, #56	; 0x38
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	200002d0 	.word	0x200002d0
 80017b0:	40001000 	.word	0x40001000
 80017b4:	20000024 	.word	0x20000024

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <RTC_Alarm_IRQHandler+0x10>)
 80017ea:	f003 fbdb 	bl	8004fa4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000108 	.word	0x20000108

080017f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM6_DAC_IRQHandler+0x10>)
 80017fe:	f003 fe57 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200002d0 	.word	0x200002d0

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f007 fce0 	bl	8009200 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20018000 	.word	0x20018000
 800186c:	00000400 	.word	0x00000400
 8001870:	2000031c 	.word	0x2000031c
 8001874:	20003648 	.word	0x20003648

08001878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a0:	f7ff ffea 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018a6:	490d      	ldr	r1, [pc, #52]	; (80018dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <LoopForever+0xe>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018bc:	4c0a      	ldr	r4, [pc, #40]	; (80018e8 <LoopForever+0x16>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ca:	f007 fc9f 	bl	800920c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ce:	f7ff fa3b 	bl	8000d48 <main>

080018d2 <LoopForever>:

LoopForever:
    b LoopForever
 80018d2:	e7fe      	b.n	80018d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018e0:	0800a2f8 	.word	0x0800a2f8
  ldr r2, =_sbss
 80018e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018e8:	20003644 	.word	0x20003644

080018ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC1_2_IRQHandler>

080018ee <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af04      	add	r7, sp, #16
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2301      	movs	r3, #1
 8001916:	2200      	movs	r2, #0
 8001918:	2178      	movs	r1, #120	; 0x78
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <ssd1306_WriteCommand+0x2c>)
 800191c:	f000 ffcc 	bl	80028b8 <HAL_I2C_Mem_Write>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000b4 	.word	0x200000b4

0800192c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af04      	add	r7, sp, #16
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	9202      	str	r2, [sp, #8]
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	2178      	movs	r1, #120	; 0x78
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <ssd1306_WriteData+0x30>)
 800194e:	f000 ffb3 	bl	80028b8 <HAL_I2C_Mem_Write>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000b4 	.word	0x200000b4

08001960 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001964:	f7ff ffc3 	bl	80018ee <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001968:	2064      	movs	r0, #100	; 0x64
 800196a:	f000 fa33 	bl	8001dd4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f9da 	bl	8001d28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001974:	2020      	movs	r0, #32
 8001976:	f7ff ffc1 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ffbe 	bl	80018fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001980:	20b0      	movs	r0, #176	; 0xb0
 8001982:	f7ff ffbb 	bl	80018fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001986:	20c8      	movs	r0, #200	; 0xc8
 8001988:	f7ff ffb8 	bl	80018fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff ffb5 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001992:	2010      	movs	r0, #16
 8001994:	f7ff ffb2 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001998:	2040      	movs	r0, #64	; 0x40
 800199a:	f7ff ffaf 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800199e:	20ff      	movs	r0, #255	; 0xff
 80019a0:	f000 f9ae 	bl	8001d00 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019a4:	20a1      	movs	r0, #161	; 0xa1
 80019a6:	f7ff ffa9 	bl	80018fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019aa:	20a6      	movs	r0, #166	; 0xa6
 80019ac:	f7ff ffa6 	bl	80018fc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019b0:	20a8      	movs	r0, #168	; 0xa8
 80019b2:	f7ff ffa3 	bl	80018fc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019b6:	203f      	movs	r0, #63	; 0x3f
 80019b8:	f7ff ffa0 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019bc:	20a4      	movs	r0, #164	; 0xa4
 80019be:	f7ff ff9d 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019c2:	20d3      	movs	r0, #211	; 0xd3
 80019c4:	f7ff ff9a 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ff97 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ce:	20d5      	movs	r0, #213	; 0xd5
 80019d0:	f7ff ff94 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019d4:	20f0      	movs	r0, #240	; 0xf0
 80019d6:	f7ff ff91 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019da:	20d9      	movs	r0, #217	; 0xd9
 80019dc:	f7ff ff8e 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019e0:	2022      	movs	r0, #34	; 0x22
 80019e2:	f7ff ff8b 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019e6:	20da      	movs	r0, #218	; 0xda
 80019e8:	f7ff ff88 	bl	80018fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80019ec:	2012      	movs	r0, #18
 80019ee:	f7ff ff85 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019f2:	20db      	movs	r0, #219	; 0xdb
 80019f4:	f7ff ff82 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019f8:	2020      	movs	r0, #32
 80019fa:	f7ff ff7f 	bl	80018fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019fe:	208d      	movs	r0, #141	; 0x8d
 8001a00:	f7ff ff7c 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a04:	2014      	movs	r0, #20
 8001a06:	f7ff ff79 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f000 f98c 	bl	8001d28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 f80f 	bl	8001a34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a16:	f000 f831 	bl	8001a7c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <ssd1306_Init+0xd0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <ssd1306_Init+0xd0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a26:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <ssd1306_Init+0xd0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	711a      	strb	r2, [r3, #4]
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000720 	.word	0x20000720

08001a34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e00d      	b.n	8001a60 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <ssd1306_Fill+0x1a>
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e000      	b.n	8001a50 <ssd1306_Fill+0x1c>
 8001a4e:	21ff      	movs	r1, #255	; 0xff
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <ssd1306_Fill+0x44>)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4413      	add	r3, r2
 8001a56:	460a      	mov	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a66:	d3ed      	bcc.n	8001a44 <ssd1306_Fill+0x10>
    }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000320 	.word	0x20000320

08001a7c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e016      	b.n	8001ab6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	3b50      	subs	r3, #80	; 0x50
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff34 	bl	80018fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff ff31 	bl	80018fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a9a:	2010      	movs	r0, #16
 8001a9c:	f7ff ff2e 	bl	80018fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	01db      	lsls	r3, r3, #7
 8001aa4:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <ssd1306_UpdateScreen+0x4c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff3e 	bl	800192c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b07      	cmp	r3, #7
 8001aba:	d9e5      	bls.n	8001a88 <ssd1306_UpdateScreen+0xc>
    }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000320 	.word	0x20000320

08001acc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	71bb      	strb	r3, [r7, #6]
 8001ada:	4613      	mov	r3, r2
 8001adc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db3d      	blt.n	8001b62 <ssd1306_DrawPixel+0x96>
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aea:	d83a      	bhi.n	8001b62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001aec:	797b      	ldrb	r3, [r7, #5]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d11a      	bne.n	8001b28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	b2d8      	uxtb	r0, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	01db      	lsls	r3, r3, #7
 8001afe:	4413      	add	r3, r2
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b259      	sxtb	r1, r3
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	01db      	lsls	r3, r3, #7
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2c9      	uxtb	r1, r1
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b24:	54d1      	strb	r1, [r2, r3]
 8001b26:	e01d      	b.n	8001b64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	01db      	lsls	r3, r3, #7
 8001b34:	4413      	add	r3, r2
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	b25a      	sxtb	r2, r3
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b259      	sxtb	r1, r3
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	4603      	mov	r3, r0
 8001b56:	01db      	lsls	r3, r3, #7
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2c9      	uxtb	r1, r1
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b5e:	54d1      	strb	r1, [r2, r3]
 8001b60:	e000      	b.n	8001b64 <ssd1306_DrawPixel+0x98>
        return;
 8001b62:	bf00      	nop
    }
}
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000320 	.word	0x20000320

08001b74 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	1d38      	adds	r0, r7, #4
 8001b7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b82:	461a      	mov	r2, r3
 8001b84:	4623      	mov	r3, r4
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b1f      	cmp	r3, #31
 8001b90:	d902      	bls.n	8001b98 <ssd1306_WriteChar+0x24>
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b7e      	cmp	r3, #126	; 0x7e
 8001b96:	d901      	bls.n	8001b9c <ssd1306_WriteChar+0x28>
        return 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e06d      	b.n	8001c78 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b9c:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	793b      	ldrb	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2b80      	cmp	r3, #128	; 0x80
 8001ba8:	dc06      	bgt.n	8001bb8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001baa:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001bac:	885b      	ldrh	r3, [r3, #2]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	dd01      	ble.n	8001bbc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e05d      	b.n	8001c78 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	e04c      	b.n	8001c5c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	3b20      	subs	r3, #32
 8001bc8:	7979      	ldrb	r1, [r7, #5]
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4619      	mov	r1, r3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	440b      	add	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	e034      	b.n	8001c4c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001c02:	885b      	ldrh	r3, [r3, #2]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	7bba      	ldrb	r2, [r7, #14]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7ff ff5b 	bl	8001acc <ssd1306_DrawPixel>
 8001c16:	e016      	b.n	8001c46 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2d8      	uxtb	r0, r3
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001c28:	885b      	ldrh	r3, [r3, #2]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	b2d9      	uxtb	r1, r3
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	f7ff ff43 	bl	8001acc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	793b      	ldrb	r3, [r7, #4]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d3c5      	bcc.n	8001be2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	797b      	ldrb	r3, [r7, #5]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d3ad      	bcc.n	8001bc2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	793b      	ldrb	r3, [r7, #4]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <ssd1306_WriteChar+0x10c>)
 8001c74:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3724      	adds	r7, #36	; 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	20000720 	.word	0x20000720

08001c84 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	1d38      	adds	r0, r7, #4
 8001c8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c92:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001c94:	e012      	b.n	8001cbc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	7818      	ldrb	r0, [r3, #0]
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	1d3a      	adds	r2, r7, #4
 8001c9e:	ca06      	ldmia	r2, {r1, r2}
 8001ca0:	f7ff ff68 	bl	8001b74 <ssd1306_WriteChar>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d002      	beq.n	8001cb6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	e008      	b.n	8001cc8 <ssd1306_WriteString+0x44>
        }
        str++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e8      	bne.n	8001c96 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <ssd1306_SetCursor+0x2c>)
 8001ce6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <ssd1306_SetCursor+0x2c>)
 8001cee:	805a      	strh	r2, [r3, #2]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000720 	.word	0x20000720

08001d00 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d0a:	2381      	movs	r3, #129	; 0x81
 8001d0c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fdf3 	bl	80018fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdef 	bl	80018fc <ssd1306_WriteCommand>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d38:	23af      	movs	r3, #175	; 0xaf
 8001d3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <ssd1306_SetDisplayOn+0x38>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	715a      	strb	r2, [r3, #5]
 8001d42:	e004      	b.n	8001d4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d44:	23ae      	movs	r3, #174	; 0xae
 8001d46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <ssd1306_SetDisplayOn+0x38>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fdd3 	bl	80018fc <ssd1306_WriteCommand>
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000720 	.word	0x20000720

08001d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f901 	bl	8001f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d74:	200f      	movs	r0, #15
 8001d76:	f7ff fca5 	bl	80016c4 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	71fb      	strb	r3, [r7, #7]
 8001d84:	e001      	b.n	8001d8a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d86:	f7ff fb55 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_IncTick+0x20>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_IncTick+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_IncTick+0x24>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000028 	.word	0x20000028
 8001db8:	20000728 	.word	0x20000728

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_GetTick+0x14>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000728 	.word	0x20000728

08001dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff ffee 	bl	8001dbc <HAL_GetTick>
 8001de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d005      	beq.n	8001dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_Delay+0x44>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfa:	bf00      	nop
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d8f7      	bhi.n	8001dfc <HAL_Delay+0x28>
  {
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000028 	.word	0x20000028

08001e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <__NVIC_SetPriorityGrouping+0x44>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <__NVIC_GetPriorityGrouping+0x18>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0307 	and.w	r3, r3, #7
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff4c 	bl	8001e1c <__NVIC_SetPriorityGrouping>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9e:	f7ff ff61 	bl	8001e64 <__NVIC_GetPriorityGrouping>
 8001fa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	6978      	ldr	r0, [r7, #20]
 8001faa:	f7ff ffb1 	bl	8001f10 <NVIC_EncodePriority>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff80 	bl	8001ebc <__NVIC_SetPriority>
}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff54 	bl	8001e80 <__NVIC_EnableIRQ>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e17f      	b.n	80022f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8171 	beq.w	80022ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d005      	beq.n	8002020 <HAL_GPIO_Init+0x40>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d130      	bne.n	8002082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002056:	2201      	movs	r2, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 0201 	and.w	r2, r3, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b03      	cmp	r3, #3
 800208c:	d118      	bne.n	80020c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	08db      	lsrs	r3, r3, #3
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ac 	beq.w	80022ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_GPIO_Init+0x330>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002196:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_GPIO_Init+0x330>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6613      	str	r3, [r2, #96]	; 0x60
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_GPIO_Init+0x330>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021aa:	4a5a      	ldr	r2, [pc, #360]	; (8002314 <HAL_GPIO_Init+0x334>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x242>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	; (8002318 <HAL_GPIO_Init+0x338>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x23e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <HAL_GPIO_Init+0x33c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x23a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	; (8002320 <HAL_GPIO_Init+0x340>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x236>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <HAL_GPIO_Init+0x344>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x232>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	; (8002328 <HAL_GPIO_Init+0x348>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x22e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <HAL_GPIO_Init+0x34c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x22a>
 8002206:	2306      	movs	r3, #6
 8002208:	e00c      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800220a:	2307      	movs	r3, #7
 800220c:	e00a      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800220e:	2305      	movs	r3, #5
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002212:	2304      	movs	r3, #4
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x244>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x244>
 8002222:	2300      	movs	r3, #0
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002234:	4937      	ldr	r1, [pc, #220]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_GPIO_Init+0x350>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002266:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_GPIO_Init+0x350>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_GPIO_Init+0x350>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_GPIO_Init+0x350>)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_GPIO_Init+0x350>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_GPIO_Init+0x350>)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_GPIO_Init+0x350>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_GPIO_Init+0x350>)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f47f ae78 	bne.w	8001ff0 <HAL_GPIO_Init+0x10>
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	48000400 	.word	0x48000400
 800231c:	48000800 	.word	0x48000800
 8002320:	48000c00 	.word	0x48000c00
 8002324:	48001000 	.word	0x48001000
 8002328:	48001400 	.word	0x48001400
 800232c:	48001800 	.word	0x48001800
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002350:	e002      	b.n	8002358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e08d      	b.n	8002492 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff f87a 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e006      	b.n	80023ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d108      	bne.n	8002406 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	e007      	b.n	8002416 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69d9      	ldr	r1, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	461a      	mov	r2, r3
 80024a8:	460b      	mov	r3, r1
 80024aa:	817b      	strh	r3, [r7, #10]
 80024ac:	4613      	mov	r3, r2
 80024ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	f040 80fd 	bne.w	80026b8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_I2C_Master_Transmit+0x30>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0f6      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d4:	f7ff fc72 	bl	8001dbc <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2319      	movs	r3, #25
 80024e0:	2201      	movs	r2, #1
 80024e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fb72 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0e1      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2221      	movs	r2, #33	; 0x21
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2210      	movs	r2, #16
 8002502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2bff      	cmp	r3, #255	; 0xff
 8002526:	d906      	bls.n	8002536 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800252e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e007      	b.n	8002546 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002544:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d024      	beq.n	8002598 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	8979      	ldrh	r1, [r7, #10]
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_I2C_Master_Transmit+0x228>)
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fd59 	bl	8003048 <I2C_TransferConfig>
 8002596:	e066      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	8979      	ldrh	r1, [r7, #10]
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <HAL_I2C_Master_Transmit+0x228>)
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fd4e 	bl	8003048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025ac:	e05b      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	6a39      	ldr	r1, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fb5b 	bl	8002c6e <I2C_WaitOnTXISFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07b      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d034      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x1ca>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d130      	bne.n	8002666 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2200      	movs	r2, #0
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fade 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e04d      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2bff      	cmp	r3, #255	; 0xff
 8002626:	d90e      	bls.n	8002646 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	22ff      	movs	r2, #255	; 0xff
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fd02 	bl	8003048 <I2C_TransferConfig>
 8002644:	e00f      	b.n	8002666 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	2300      	movs	r3, #0
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fcf1 	bl	8003048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d19e      	bne.n	80025ae <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb41 	bl	8002cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e01a      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2220      	movs	r2, #32
 800268a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_I2C_Master_Transmit+0x22c>)
 8002698:	400b      	ands	r3, r1
 800269a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	80002000 	.word	0x80002000
 80026c8:	fe00e800 	.word	0xfe00e800

080026cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
 80026dc:	4613      	mov	r3, r2
 80026de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	f040 80db 	bne.w	80028a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2C_Master_Receive+0x30>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0d4      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002704:	f7ff fb5a 	bl	8001dbc <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2319      	movs	r3, #25
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa5a 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0bf      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2222      	movs	r2, #34	; 0x22
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2210      	movs	r2, #16
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	893a      	ldrh	r2, [r7, #8]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2bff      	cmp	r3, #255	; 0xff
 8002756:	d90e      	bls.n	8002776 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	22ff      	movs	r2, #255	; 0xff
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	b2da      	uxtb	r2, r3
 8002764:	8979      	ldrh	r1, [r7, #10]
 8002766:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_I2C_Master_Receive+0x1e4>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fc6a 	bl	8003048 <I2C_TransferConfig>
 8002774:	e06d      	b.n	8002852 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	b2da      	uxtb	r2, r3
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_I2C_Master_Receive+0x1e4>)
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc59 	bl	8003048 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002796:	e05c      	b.n	8002852 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	6a39      	ldr	r1, [r7, #32]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 faf1 	bl	8002d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e07c      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d034      	beq.n	8002852 <HAL_I2C_Master_Receive+0x186>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d130      	bne.n	8002852 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9e8 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e04d      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2bff      	cmp	r3, #255	; 0xff
 8002812:	d90e      	bls.n	8002832 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	b2da      	uxtb	r2, r3
 8002820:	8979      	ldrh	r1, [r7, #10]
 8002822:	2300      	movs	r3, #0
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fc0c 	bl	8003048 <I2C_TransferConfig>
 8002830:	e00f      	b.n	8002852 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	b2da      	uxtb	r2, r3
 8002842:	8979      	ldrh	r1, [r7, #10]
 8002844:	2300      	movs	r3, #0
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fbfb 	bl	8003048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d19d      	bne.n	8002798 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6a39      	ldr	r1, [r7, #32]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 fa4b 	bl	8002cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01a      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2220      	movs	r2, #32
 8002876:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <HAL_I2C_Master_Receive+0x1e8>)
 8002884:	400b      	ands	r3, r1
 8002886:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	80002400 	.word	0x80002400
 80028b4:	fe00e800 	.word	0xfe00e800

080028b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	4608      	mov	r0, r1
 80028c2:	4611      	mov	r1, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	817b      	strh	r3, [r7, #10]
 80028ca:	460b      	mov	r3, r1
 80028cc:	813b      	strh	r3, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	f040 80f9 	bne.w	8002ad2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_I2C_Mem_Write+0x34>
 80028e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0ed      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2C_Mem_Write+0x4e>
 8002902:	2302      	movs	r3, #2
 8002904:	e0e6      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800290e:	f7ff fa55 	bl	8001dbc <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2319      	movs	r3, #25
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f955 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0d1      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	; 0x21
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	; 0x40
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002958:	88f8      	ldrh	r0, [r7, #6]
 800295a:	893a      	ldrh	r2, [r7, #8]
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4603      	mov	r3, r0
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f8b9 	bl	8002ae0 <I2C_RequestMemoryWrite>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0a9      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2bff      	cmp	r3, #255	; 0xff
 8002988:	d90e      	bls.n	80029a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	2300      	movs	r3, #0
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fb51 	bl	8003048 <I2C_TransferConfig>
 80029a6:	e00f      	b.n	80029c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fb40 	bl	8003048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f94e 	bl	8002c6e <I2C_WaitOnTXISFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e07b      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d034      	beq.n	8002a80 <HAL_I2C_Mem_Write+0x1c8>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d130      	bne.n	8002a80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	2200      	movs	r2, #0
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f8d1 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e04d      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2bff      	cmp	r3, #255	; 0xff
 8002a40:	d90e      	bls.n	8002a60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	8979      	ldrh	r1, [r7, #10]
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 faf5 	bl	8003048 <I2C_TransferConfig>
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	8979      	ldrh	r1, [r7, #10]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fae4 	bl	8003048 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d19e      	bne.n	80029c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f934 	bl	8002cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e01a      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_I2C_Mem_Write+0x224>)
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	fe00e800 	.word	0xfe00e800

08002ae0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	460b      	mov	r3, r1
 8002af4:	813b      	strh	r3, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	8979      	ldrh	r1, [r7, #10]
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <I2C_RequestMemoryWrite+0xa4>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa9d 	bl	8003048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f8ab 	bl	8002c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e02c      	b.n	8002b7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b28:	893b      	ldrh	r3, [r7, #8]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
 8002b32:	e015      	b.n	8002b60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f891 	bl	8002c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e012      	b.n	8002b7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b56:	893b      	ldrh	r3, [r7, #8]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f830 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	80002000 	.word	0x80002000

08002b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d103      	bne.n	8002ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d007      	beq.n	8002bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	619a      	str	r2, [r3, #24]
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be0:	e031      	b.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d02d      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bea:	f7ff f8e7 	bl	8001dbc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d122      	bne.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d113      	bne.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d0be      	beq.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c7a:	e033      	b.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f901 	bl	8002e88 <I2C_IsErrorOccurred>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e031      	b.n	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c96:	d025      	beq.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7ff f890 	bl	8001dbc <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d302      	bcc.n	8002cae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d11a      	bne.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d013      	beq.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e007      	b.n	8002cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d1c4      	bne.n	8002c7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d08:	e02f      	b.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68b9      	ldr	r1, [r7, #8]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f8ba 	bl	8002e88 <I2C_IsErrorOccurred>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e02d      	b.n	8002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7ff f84d 	bl	8001dbc <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11a      	bne.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d013      	beq.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d1c8      	bne.n	8002d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d90:	e06b      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f876 	bl	8002e88 <I2C_IsErrorOccurred>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e069      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d138      	bne.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d105      	bne.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e055      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d107      	bne.n	8002dec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2204      	movs	r2, #4
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
 8002dea:	e002      	b.n	8002df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2220      	movs	r2, #32
 8002df8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002e06:	400b      	ands	r3, r1
 8002e08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e029      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe ffc9 	bl	8001dbc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00f      	beq.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e007      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d18c      	bne.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d068      	beq.n	8002f86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2210      	movs	r2, #16
 8002eba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ebc:	e049      	b.n	8002f52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d045      	beq.n	8002f52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe ff79 	bl	8001dbc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_IsErrorOccurred+0x54>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d13a      	bne.n	8002f52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d121      	bne.n	8002f44 <I2C_IsErrorOccurred+0xbc>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f06:	d01d      	beq.n	8002f44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f08:	7cfb      	ldrb	r3, [r7, #19]
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d01a      	beq.n	8002f44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f1e:	f7fe ff4d 	bl	8001dbc <HAL_GetTick>
 8002f22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f24:	e00e      	b.n	8002f44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f26:	f7fe ff49 	bl	8001dbc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b19      	cmp	r3, #25
 8002f32:	d907      	bls.n	8002f44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f42:	e006      	b.n	8002f52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b20      	cmp	r3, #32
 8002f50:	d1e9      	bne.n	8002f26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d003      	beq.n	8002f68 <I2C_IsErrorOccurred+0xe0>
 8002f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0aa      	beq.n	8002ebe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2220      	movs	r2, #32
 8002f76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00b      	beq.n	8002fd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01c      	beq.n	8003036 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f7ff fdc3 	bl	8002b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <I2C_IsErrorOccurred+0x1bc>)
 800300e:	400b      	ands	r3, r1
 8003010:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800303a:	4618      	mov	r0, r3
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	fe00e800 	.word	0xfe00e800

08003048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	4613      	mov	r3, r2
 8003058:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003060:	7a7b      	ldrb	r3, [r7, #9]
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003068:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	4313      	orrs	r3, r2
 8003072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003076:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	0d5b      	lsrs	r3, r3, #21
 8003082:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <I2C_TransferConfig+0x60>)
 8003088:	430b      	orrs	r3, r1
 800308a:	43db      	mvns	r3, r3
 800308c:	ea02 0103 	and.w	r1, r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	03ff63ff 	.word	0x03ff63ff

080030ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d138      	bne.n	8003134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e032      	b.n	8003136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b20      	cmp	r3, #32
 8003156:	d139      	bne.n	80031cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003162:	2302      	movs	r3, #2
 8003164:	e033      	b.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2224      	movs	r2, #36	; 0x24
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007000 	.word	0x40007000

080031f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d130      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003208:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d038      	beq.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2232      	movs	r2, #50	; 0x32
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323c:	e002      	b.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d102      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f2      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d110      	bne.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e00f      	b.n	800328a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d007      	beq.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003280:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000
 800329c:	20000018 	.word	0x20000018
 80032a0:	431bde83 	.word	0x431bde83

080032a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e3ca      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b6:	4b97      	ldr	r3, [pc, #604]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c0:	4b94      	ldr	r3, [pc, #592]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e4 	beq.w	80034a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_RCC_OscConfig+0x4a>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	f040 808b 	bne.w	80033fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 8087 	bne.w	80033fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ee:	4b89      	ldr	r3, [pc, #548]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x62>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e3a2      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	4b82      	ldr	r3, [pc, #520]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_RCC_OscConfig+0x7c>
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	e005      	b.n	800332c <HAL_RCC_OscConfig+0x88>
 8003320:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	4293      	cmp	r3, r2
 800332e:	d223      	bcs.n	8003378 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fd87 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e383      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003344:	4b73      	ldr	r3, [pc, #460]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a72      	ldr	r2, [pc, #456]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800334a:	f043 0308 	orr.w	r3, r3, #8
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	496d      	ldr	r1, [pc, #436]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003362:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	4968      	ldr	r1, [pc, #416]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
 8003376:	e025      	b.n	80033c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a65      	ldr	r2, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800337e:	f043 0308 	orr.w	r3, r3, #8
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4960      	ldr	r1, [pc, #384]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	495b      	ldr	r1, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd47 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e343      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c4:	f000 fc4a 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	4950      	ldr	r1, [pc, #320]	; (8003518 <HAL_RCC_OscConfig+0x274>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a4e      	ldr	r2, [pc, #312]	; (800351c <HAL_RCC_OscConfig+0x278>)
 80033e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033e4:	4b4e      	ldr	r3, [pc, #312]	; (8003520 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe f96b 	bl	80016c4 <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d052      	beq.n	800349e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	e327      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d032      	beq.n	800346a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a42      	ldr	r2, [pc, #264]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003410:	f7fe fcd4 	bl	8001dbc <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003418:	f7fe fcd0 	bl	8001dbc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e310      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800342a:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a36      	ldr	r2, [pc, #216]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4931      	ldr	r1, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	492c      	ldr	r1, [pc, #176]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e01a      	b.n	80034a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800346a:	4b2a      	ldr	r3, [pc, #168]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a29      	ldr	r2, [pc, #164]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003476:	f7fe fca1 	bl	8001dbc <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800347e:	f7fe fc9d 	bl	8001dbc <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e2dd      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x1da>
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800349e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d074      	beq.n	8003596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x21a>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d10e      	bne.n	80034d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d10b      	bne.n	80034d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d064      	beq.n	8003594 <HAL_RCC_OscConfig+0x2f0>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d160      	bne.n	8003594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e2ba      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x24a>
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0b      	ldr	r2, [pc, #44]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e026      	b.n	800353c <HAL_RCC_OscConfig+0x298>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f6:	d115      	bne.n	8003524 <HAL_RCC_OscConfig+0x280>
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a05      	ldr	r2, [pc, #20]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 80034fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a02      	ldr	r2, [pc, #8]	; (8003514 <HAL_RCC_OscConfig+0x270>)
 800350a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e014      	b.n	800353c <HAL_RCC_OscConfig+0x298>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	08009b00 	.word	0x08009b00
 800351c:	20000018 	.word	0x20000018
 8003520:	20000024 	.word	0x20000024
 8003524:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a9f      	ldr	r2, [pc, #636]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b9d      	ldr	r3, [pc, #628]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a9c      	ldr	r2, [pc, #624]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fc3a 	bl	8001dbc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fe fc36 	bl	8001dbc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e276      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	4b92      	ldr	r3, [pc, #584]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x2a8>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fc26 	bl	8001dbc <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fc22 	bl	8001dbc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e262      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x2d0>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d060      	beq.n	8003664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_OscConfig+0x310>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d119      	bne.n	80035e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d116      	bne.n	80035e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_OscConfig+0x328>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e23f      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	061b      	lsls	r3, r3, #24
 80035da:	4973      	ldr	r1, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e0:	e040      	b.n	8003664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d023      	beq.n	8003632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ea:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe fbe1 	bl	8001dbc <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe fbdd 	bl	8001dbc <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e21d      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003610:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	495f      	ldr	r1, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	e018      	b.n	8003664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5c      	ldr	r2, [pc, #368]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe fbbd 	bl	8001dbc <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe fbb9 	bl	8001dbc <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1f9      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d03c      	beq.n	80036ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367e:	4a4a      	ldr	r2, [pc, #296]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe fb98 	bl	8001dbc <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7fe fb94 	bl	8001dbc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e1d4      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <HAL_RCC_OscConfig+0x3ec>
 80036b0:	e01b      	b.n	80036ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b8:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe fb7b 	bl	8001dbc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ca:	f7fe fb77 	bl	8001dbc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1b7      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ef      	bne.n	80036ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a6 	beq.w	8003844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCC_OscConfig+0x508>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_RCC_OscConfig+0x508>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_RCC_OscConfig+0x508>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373c:	f7fe fb3e 	bl	8001dbc <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fe fb3a 	bl	8001dbc <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e17a      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_RCC_OscConfig+0x508>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d108      	bne.n	800377c <HAL_RCC_OscConfig+0x4d8>
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800376c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377a:	e029      	b.n	80037d0 <HAL_RCC_OscConfig+0x52c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b05      	cmp	r3, #5
 8003782:	d115      	bne.n	80037b0 <HAL_RCC_OscConfig+0x50c>
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <HAL_RCC_OscConfig+0x504>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x52c>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	4b9c      	ldr	r3, [pc, #624]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	4a9b      	ldr	r2, [pc, #620]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c0:	4b98      	ldr	r3, [pc, #608]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	4a97      	ldr	r2, [pc, #604]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe faf0 	bl	8001dbc <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe faec 	bl	8001dbc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e12a      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ed      	beq.n	80037e0 <HAL_RCC_OscConfig+0x53c>
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fad9 	bl	8001dbc <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fad5 	bl	8001dbc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e113      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003824:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ed      	bne.n	800380e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003832:	7ffb      	ldrb	r3, [r7, #31]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003838:	4b7a      	ldr	r3, [pc, #488]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	4a79      	ldr	r2, [pc, #484]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800383e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80fe 	beq.w	8003a4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	2b02      	cmp	r3, #2
 8003854:	f040 80d0 	bne.w	80039f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003858:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	d130      	bne.n	80038ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	3b01      	subs	r3, #1
 8003878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d127      	bne.n	80038ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003888:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11f      	bne.n	80038ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003898:	2a07      	cmp	r2, #7
 800389a:	bf14      	ite	ne
 800389c:	2201      	movne	r2, #1
 800389e:	2200      	moveq	r2, #0
 80038a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d113      	bne.n	80038ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	3b01      	subs	r3, #1
 80038b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d109      	bne.n	80038ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	3b01      	subs	r3, #1
 80038c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d06e      	beq.n	80039ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d069      	beq.n	80039a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0ad      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038f0:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038fc:	f7fe fa5e 	bl	8001dbc <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fa5a 	bl	8001dbc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e09a      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003922:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <HAL_RCC_OscConfig+0x784>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003932:	3a01      	subs	r2, #1
 8003934:	0112      	lsls	r2, r2, #4
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393c:	0212      	lsls	r2, r2, #8
 800393e:	4311      	orrs	r1, r2
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003944:	0852      	lsrs	r2, r2, #1
 8003946:	3a01      	subs	r2, #1
 8003948:	0552      	lsls	r2, r2, #21
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003950:	0852      	lsrs	r2, r2, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	0652      	lsls	r2, r2, #25
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800395c:	0912      	lsrs	r2, r2, #4
 800395e:	0452      	lsls	r2, r2, #17
 8003960:	430a      	orrs	r2, r1
 8003962:	4930      	ldr	r1, [pc, #192]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003964:	4313      	orrs	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003972:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800397a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003980:	f7fe fa1c 	bl	8001dbc <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe fa18 	bl	8001dbc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e058      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039a6:	e050      	b.n	8003a4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e04f      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d148      	bne.n	8003a4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039b8:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039d0:	f7fe f9f4 	bl	8001dbc <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe f9f0 	bl	8001dbc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e030      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x734>
 80039f6:	e028      	b.n	8003a4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d023      	beq.n	8003a46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a08      	ldr	r2, [pc, #32]	; (8003a24 <HAL_RCC_OscConfig+0x780>)
 8003a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fe f9d7 	bl	8001dbc <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	e00c      	b.n	8003a2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fe f9d3 	bl	8001dbc <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d905      	bls.n	8003a2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e013      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_OscConfig+0x7b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ec      	bne.n	8003a12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_OscConfig+0x7b0>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4905      	ldr	r1, [pc, #20]	; (8003a54 <HAL_RCC_OscConfig+0x7b0>)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x7b4>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	60cb      	str	r3, [r1, #12]
 8003a44:	e001      	b.n	8003a4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	feeefffc 	.word	0xfeeefffc

08003a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0e7      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b75      	ldr	r3, [pc, #468]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d910      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7e:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	4970      	ldr	r1, [pc, #448]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b6e      	ldr	r3, [pc, #440]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0cf      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d908      	bls.n	8003ace <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4960      	ldr	r1, [pc, #384]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04c      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d121      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0a6      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003afa:	4b54      	ldr	r3, [pc, #336]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e09a      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e08e      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e086      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b46      	ldr	r3, [pc, #280]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4943      	ldr	r1, [pc, #268]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b44:	f7fe f93a 	bl	8001dbc <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe f936 	bl	8001dbc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e06e      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b3a      	ldr	r3, [pc, #232]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d208      	bcs.n	8003ba2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b2e      	ldr	r3, [pc, #184]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	492b      	ldr	r1, [pc, #172]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d210      	bcs.n	8003bd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 0207 	bic.w	r2, r3, #7
 8003bb8:	4923      	ldr	r1, [pc, #140]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_RCC_ClockConfig+0x1ec>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e036      	b.n	8003c40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4910      	ldr	r1, [pc, #64]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c10:	f000 f824 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	490b      	ldr	r1, [pc, #44]	; (8003c50 <HAL_RCC_ClockConfig+0x1f4>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1f8>)
 8003c2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1fc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fd fd45 	bl	80016c4 <HAL_InitTick>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08009b00 	.word	0x08009b00
 8003c54:	20000018 	.word	0x20000018
 8003c58:	20000024 	.word	0x20000024

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c74:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x34>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b0c      	cmp	r3, #12
 8003c88:	d121      	bne.n	8003cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d11e      	bne.n	8003cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e005      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cac:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cb8:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d102      	bne.n	8003cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce0:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d134      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cea:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d003      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0xac>
 8003d00:	e005      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d04:	617b      	str	r3, [r7, #20]
      break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d0a:	617b      	str	r3, [r7, #20]
      break;
 8003d0c:	e002      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	617b      	str	r3, [r7, #20]
      break;
 8003d12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	3301      	adds	r3, #1
 8003d20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	fb03 f202 	mul.w	r2, r3, r2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0e5b      	lsrs	r3, r3, #25
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	3301      	adds	r3, #1
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d54:	69bb      	ldr	r3, [r7, #24]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	08009b18 	.word	0x08009b18
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	007a1200 	.word	0x007a1200

08003d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000018 	.word	0x20000018

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000
 8003db4:	08009b10 	.word	0x08009b10

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dbc:	f7ff ffda 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0adb      	lsrs	r3, r3, #11
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	08009b10 	.word	0x08009b10

08003de4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	220f      	movs	r2, #15
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_RCC_GetClockConfig+0x60>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40022000 	.word	0x40022000

08003e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e60:	f7ff f9bc 	bl	80031dc <HAL_PWREx_GetVoltageRange>
 8003e64:	6178      	str	r0, [r7, #20]
 8003e66:	e014      	b.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e80:	f7ff f9ac 	bl	80031dc <HAL_PWREx_GetVoltageRange>
 8003e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d10b      	bne.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d919      	bls.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ea4:	d902      	bls.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e013      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e010      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d902      	bls.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eb8:	2303      	movs	r3, #3
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e00a      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d102      	bne.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e004      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b70      	cmp	r3, #112	; 0x70
 8003ece:	d101      	bne.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 0207 	bic.w	r2, r3, #7
 8003edc:	4909      	ldr	r1, [pc, #36]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f14:	2300      	movs	r3, #0
 8003f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d041      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f2c:	d02a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f32:	d824      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f3e:	d81e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d010      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f4a:	e018      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4c:	4b86      	ldr	r3, [pc, #536]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a85      	ldr	r2, [pc, #532]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f58:	e015      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fabb 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3320      	adds	r3, #32
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fba6 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
      break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f8c:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9a:	4973      	ldr	r1, [pc, #460]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d041      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fbc:	d02a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc2:	d824      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc8:	d008      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fce:	d81e      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd8:	d010      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fda:	e018      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a61      	ldr	r2, [pc, #388]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe8:	e015      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fa73 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffa:	e00c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3320      	adds	r3, #32
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fb5e 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	74fb      	strb	r3, [r7, #19]
      break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401c:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402a:	494f      	ldr	r1, [pc, #316]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a0 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4a40      	ldr	r2, [pc, #256]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004088:	f7fd fe98 	bl	8001dbc <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fe94 	bl	8001dbc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
        break;
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d15c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01f      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d019      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd fe53 	bl	8001dbc <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	e00b      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fd fe4f 	bl	8001dbc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d902      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	74fb      	strb	r3, [r7, #19]
            break;
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ec      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004174:	7c7b      	ldrb	r3, [r7, #17]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b9e      	ldr	r3, [pc, #632]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a9d      	ldr	r2, [pc, #628]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004192:	4b98      	ldr	r3, [pc, #608]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f023 0203 	bic.w	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	4994      	ldr	r1, [pc, #592]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b4:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 020c 	bic.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	498c      	ldr	r1, [pc, #560]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d6:	4b87      	ldr	r3, [pc, #540]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	4983      	ldr	r1, [pc, #524]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	497b      	ldr	r1, [pc, #492]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	4972      	ldr	r1, [pc, #456]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423c:	4b6d      	ldr	r3, [pc, #436]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	496a      	ldr	r1, [pc, #424]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	4961      	ldr	r1, [pc, #388]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004280:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	4959      	ldr	r1, [pc, #356]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	4950      	ldr	r1, [pc, #320]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	4948      	ldr	r1, [pc, #288]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	493f      	ldr	r1, [pc, #252]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004308:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004316:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d106      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
 8004334:	e011      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f8c8 	bl	80044dc <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d028      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	491f      	ldr	r1, [pc, #124]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d106      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004390:	60d3      	str	r3, [r2, #12]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f899 	bl	80044dc <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02b      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4908      	ldr	r1, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a02      	ldr	r2, [pc, #8]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e014      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f867 	bl	80044dc <RCCEx_PLLSAI1_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	4928      	ldr	r1, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2102      	movs	r1, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f844 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	74bb      	strb	r3, [r7, #18]
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3320      	adds	r3, #32
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f925 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a2:	490d      	ldr	r1, [pc, #52]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c6:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
       ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
       ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d047      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	e044      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d018      	beq.n	8004562 <RCCEx_PLLSAI1_Config+0x86>
 8004530:	2b03      	cmp	r3, #3
 8004532:	d825      	bhi.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
 8004534:	2b01      	cmp	r3, #1
 8004536:	d002      	beq.n	800453e <RCCEx_PLLSAI1_Config+0x62>
 8004538:	2b02      	cmp	r3, #2
 800453a:	d009      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x74>
 800453c:	e020      	b.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453e:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11d      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454e:	e01a      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004550:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e013      	b.n	800458a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004562:	4b57      	ldr	r3, [pc, #348]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800456e:	4b54      	ldr	r3, [pc, #336]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800457e:	e006      	b.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e004      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	430b      	orrs	r3, r1
 80045ac:	4944      	ldr	r1, [pc, #272]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d17d      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a40      	ldr	r2, [pc, #256]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd fbfa 	bl	8001dbc <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ca:	e009      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045cc:	f7fd fbf6 	bl	8001dbc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	73fb      	strb	r3, [r7, #15]
        break;
 80045de:	e005      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ef      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d160      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d111      	bne.n	800461c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	0211      	lsls	r1, r2, #8
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	0912      	lsrs	r2, r2, #4
 8004610:	0452      	lsls	r2, r2, #17
 8004612:	430a      	orrs	r2, r1
 8004614:	492a      	ldr	r1, [pc, #168]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]
 800461a:	e027      	b.n	800466c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d112      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800462a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	0211      	lsls	r1, r2, #8
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6912      	ldr	r2, [r2, #16]
 8004638:	0852      	lsrs	r2, r2, #1
 800463a:	3a01      	subs	r2, #1
 800463c:	0552      	lsls	r2, r2, #21
 800463e:	430a      	orrs	r2, r1
 8004640:	491f      	ldr	r1, [pc, #124]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
 8004646:	e011      	b.n	800466c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004650:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6892      	ldr	r2, [r2, #8]
 8004658:	0211      	lsls	r1, r2, #8
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6952      	ldr	r2, [r2, #20]
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	3a01      	subs	r2, #1
 8004662:	0652      	lsls	r2, r2, #25
 8004664:	430a      	orrs	r2, r1
 8004666:	4916      	ldr	r1, [pc, #88]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004676:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fba0 	bl	8001dbc <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467e:	e009      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004680:	f7fd fb9c 	bl	8001dbc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d902      	bls.n	8004694 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
          break;
 8004692:	e005      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ef      	beq.n	8004680 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	4904      	ldr	r1, [pc, #16]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0203 	and.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
       ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
       ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d047      	beq.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e044      	b.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d018      	beq.n	800474a <RCCEx_PLLSAI2_Config+0x86>
 8004718:	2b03      	cmp	r3, #3
 800471a:	d825      	bhi.n	8004768 <RCCEx_PLLSAI2_Config+0xa4>
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <RCCEx_PLLSAI2_Config+0x62>
 8004720:	2b02      	cmp	r3, #2
 8004722:	d009      	beq.n	8004738 <RCCEx_PLLSAI2_Config+0x74>
 8004724:	e020      	b.n	8004768 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004726:	4b55      	ldr	r3, [pc, #340]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11d      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004736:	e01a      	b.n	800476e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e013      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004766:	e006      	b.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e004      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004776:	bf00      	nop
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	430b      	orrs	r3, r1
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d167      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fd fb06 	bl	8001dbc <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b2:	e009      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b4:	f7fd fb02 	bl	8001dbc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d902      	bls.n	80047c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	73fb      	strb	r3, [r7, #15]
        break;
 80047c6:	e005      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c8:	4b2c      	ldr	r3, [pc, #176]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ef      	bne.n	80047b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d14a      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e0:	4b26      	ldr	r3, [pc, #152]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	0211      	lsls	r1, r2, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	0912      	lsrs	r2, r2, #4
 80047f8:	0452      	lsls	r2, r2, #17
 80047fa:	430a      	orrs	r2, r1
 80047fc:	491f      	ldr	r1, [pc, #124]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	614b      	str	r3, [r1, #20]
 8004802:	e011      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800480c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	0211      	lsls	r1, r2, #8
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6912      	ldr	r2, [r2, #16]
 800481a:	0852      	lsrs	r2, r2, #1
 800481c:	3a01      	subs	r2, #1
 800481e:	0652      	lsls	r2, r2, #25
 8004820:	430a      	orrs	r2, r1
 8004822:	4916      	ldr	r1, [pc, #88]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a13      	ldr	r2, [pc, #76]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fd fac2 	bl	8001dbc <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483a:	e009      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483c:	f7fd fabe 	bl	8001dbc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d902      	bls.n	8004850 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	73fb      	strb	r3, [r7, #15]
          break;
 800484e:	e005      	b.n	800485c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ef      	beq.n	800483c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000

08004880 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d079      	beq.n	8004986 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc fe4a 	bl	8001540 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d058      	beq.n	8004974 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	22ca      	movs	r2, #202	; 0xca
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2253      	movs	r2, #83	; 0x53
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fbda 	bl	800508c <RTC_EnterInitMode>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d127      	bne.n	8004932 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6899      	ldr	r1, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68d2      	ldr	r2, [r2, #12]
 800491c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6919      	ldr	r1, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	041a      	lsls	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fbde 	bl	80050f4 <RTC_ExitInitMode>
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d113      	bne.n	800496a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0203 	bic.w	r2, r2, #3
 8004950:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
 8004972:	e001      	b.n	8004978 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_RTC_SetTime+0x1a>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e08b      	b.n	8004ac2 <HAL_RTC_SetTime+0x132>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	22ca      	movs	r2, #202	; 0xca
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2253      	movs	r2, #83	; 0x53
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fb5e 	bl	800508c <RTC_EnterInitMode>
 80049d0:	4603      	mov	r3, r0
 80049d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d163      	bne.n	8004aa2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d126      	bne.n	8004a2e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2200      	movs	r2, #0
 80049f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fbb9 	bl	8005170 <RTC_ByteToBcd2>
 80049fe:	4603      	mov	r3, r0
 8004a00:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fbb2 	bl	8005170 <RTC_ByteToBcd2>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a10:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	789b      	ldrb	r3, [r3, #2]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fbaa 	bl	8005170 <RTC_ByteToBcd2>
 8004a1c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a1e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	78db      	ldrb	r3, [r3, #3]
 8004a26:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e018      	b.n	8004a60 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a4e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a54:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	78db      	ldrb	r3, [r3, #3]
 8004a5a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a6a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fb2b 	bl	80050f4 <RTC_ExitInitMode>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	22ff      	movs	r2, #255	; 0xff
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d103      	bne.n	8004ab8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd90      	pop	{r4, r7, pc}

08004aca <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004af8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004afc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	0d9b      	lsrs	r3, r3, #22
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11a      	bne.n	8004b78 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fb32 	bl	80051b0 <RTC_Bcd2ToByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fb29 	bl	80051b0 <RTC_Bcd2ToByte>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	789b      	ldrb	r3, [r3, #2]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fb20 	bl	80051b0 <RTC_Bcd2ToByte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b82:	b590      	push	{r4, r7, lr}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_RTC_SetDate+0x1a>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e075      	b.n	8004c88 <HAL_RTC_SetDate+0x106>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_RTC_SetDate+0x4e>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	330a      	adds	r3, #10
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11c      	bne.n	8004c10 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	78db      	ldrb	r3, [r3, #3]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fac8 	bl	8005170 <RTC_ByteToBcd2>
 8004be0:	4603      	mov	r3, r0
 8004be2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fac1 	bl	8005170 <RTC_ByteToBcd2>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004bf2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	789b      	ldrb	r3, [r3, #2]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fab9 	bl	8005170 <RTC_ByteToBcd2>
 8004bfe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e00e      	b.n	8004c2e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c1c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004c22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	22ca      	movs	r2, #202	; 0xca
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2253      	movs	r2, #83	; 0x53
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fa24 	bl	800508c <RTC_EnterInitMode>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004c58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa48 	bl	80050f4 <RTC_ExitInitMode>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004caa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	0c1b      	lsrs	r3, r3, #16
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11a      	bne.n	8004d20 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	78db      	ldrb	r3, [r3, #3]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa5e 	bl	80051b0 <RTC_Bcd2ToByte>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fa55 	bl	80051b0 <RTC_Bcd2ToByte>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	789b      	ldrb	r3, [r3, #2]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fa4c 	bl	80051b0 <RTC_Bcd2ToByte>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_RTC_SetAlarm_IT+0x1a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e127      	b.n	8004f96 <HAL_RTC_SetAlarm_IT+0x26a>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d137      	bne.n	8004dcc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9fb 	bl	8005170 <RTC_ByteToBcd2>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f9f4 	bl	8005170 <RTC_ByteToBcd2>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004d8c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f9ec 	bl	8005170 <RTC_ByteToBcd2>
 8004d98:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004d9a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004da4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f9de 	bl	8005170 <RTC_ByteToBcd2>
 8004db4:	4603      	mov	r3, r0
 8004db6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004db8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004dc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	e023      	b.n	8004e14 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004dec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004df2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004dfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004e04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004e0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	22ca      	movs	r2, #202	; 0xca
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2253      	movs	r2, #83	; 0x53
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	d14a      	bne.n	8004ed0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e48:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004e5a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004e5c:	f7fc ffae 	bl	8001dbc <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e62:	e015      	b.n	8004e90 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e64:	f7fc ffaa 	bl	8001dbc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e72:	d90d      	bls.n	8004e90 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	22ff      	movs	r2, #255	; 0xff
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2203      	movs	r2, #3
 8004e80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e082      	b.n	8004f96 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0e2      	beq.n	8004e64 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ebc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ecc:	609a      	str	r2, [r3, #8]
 8004ece:	e049      	b.n	8004f64 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ede:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004ef0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004ef2:	f7fc ff63 	bl	8001dbc <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ef8:	e015      	b.n	8004f26 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004efa:	f7fc ff5f 	bl	8001dbc <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f08:	d90d      	bls.n	8004f26 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	22ff      	movs	r2, #255	; 0xff
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e037      	b.n	8004f96 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0e2      	beq.n	8004efa <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f6e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	; 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd90      	pop	{r4, r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40010400 	.word	0x40010400

08004fa4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004fac:	4b1f      	ldr	r3, [pc, #124]	; (800502c <HAL_RTC_AlarmIRQHandler+0x88>)
 8004fae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004fb2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d012      	beq.n	8004fe8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004fe0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f824 	bl	8005030 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d012      	beq.n	800501c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005014:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f96f 	bl	80052fa <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40010400 	.word	0x40010400

08005030 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <HAL_RTC_WaitForSynchro+0x44>)
 8005052:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005054:	f7fc feb2 	bl	8001dbc <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800505a:	e009      	b.n	8005070 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800505c:	f7fc feae 	bl	8001dbc <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800506a:	d901      	bls.n	8005070 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e007      	b.n	8005080 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ee      	beq.n	800505c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	0003ff5f 	.word	0x0003ff5f

0800508c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d120      	bne.n	80050e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80050b0:	f7fc fe84 	bl	8001dbc <HAL_GetTick>
 80050b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050b6:	e00d      	b.n	80050d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80050b8:	f7fc fe80 	bl	8001dbc <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c6:	d905      	bls.n	80050d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2203      	movs	r2, #3
 80050d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <RTC_EnterInitMode+0x5c>
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d1e7      	bne.n	80050b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005100:	4b1a      	ldr	r3, [pc, #104]	; (800516c <RTC_ExitInitMode+0x78>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a19      	ldr	r2, [pc, #100]	; (800516c <RTC_ExitInitMode+0x78>)
 8005106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <RTC_ExitInitMode+0x78>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10c      	bne.n	8005132 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff93 	bl	8005044 <HAL_RTC_WaitForSynchro>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01e      	beq.n	8005162 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2203      	movs	r2, #3
 8005128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e017      	b.n	8005162 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <RTC_ExitInitMode+0x78>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <RTC_ExitInitMode+0x78>)
 8005138:	f023 0320 	bic.w	r3, r3, #32
 800513c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ff80 	bl	8005044 <HAL_RTC_WaitForSynchro>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <RTC_ExitInitMode+0x78>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	4a04      	ldr	r2, [pc, #16]	; (800516c <RTC_ExitInitMode+0x78>)
 800515c:	f043 0320 	orr.w	r3, r3, #32
 8005160:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40002800 	.word	0x40002800

08005170 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005182:	e005      	b.n	8005190 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	3b0a      	subs	r3, #10
 800518e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	2b09      	cmp	r3, #9
 8005194:	d8f6      	bhi.n	8005184 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	b2da      	uxtb	r2, r3
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b2db      	uxtb	r3, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	4413      	add	r3, r2
 80051d6:	b2db      	uxtb	r3, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e034      	b.n	8005266 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	22ca      	movs	r2, #202	; 0xca
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2253      	movs	r2, #83	; 0x53
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800522a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6899      	ldr	r1, [r3, #8]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800524a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_RTCEx_SetRefClock+0x16>
 8005284:	2302      	movs	r3, #2
 8005286:	e034      	b.n	80052f2 <HAL_RTCEx_SetRefClock+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	22ca      	movs	r2, #202	; 0xca
 800529e:	625a      	str	r2, [r3, #36]	; 0x24
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2253      	movs	r2, #83	; 0x53
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff feef 	bl	800508c <RTC_EnterInitMode>
 80052ae:	4603      	mov	r3, r0
 80052b0:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10c      	bne.n	80052d2 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0210 	orr.w	r2, r2, #16
 80052c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff13 	bl	80050f4 <RTC_ExitInitMode>
 80052ce:	4603      	mov	r3, r0
 80052d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	22ff      	movs	r2, #255	; 0xff
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e049      	b.n	80053b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f841 	bl	80053bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 f9d9 	bl	8005704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d001      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e04f      	b.n	8005488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a23      	ldr	r2, [pc, #140]	; (8005494 <HAL_TIM_Base_Start_IT+0xc4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01d      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005412:	d018      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <HAL_TIM_Base_Start_IT+0xc8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1e      	ldr	r2, [pc, #120]	; (800549c <HAL_TIM_Base_Start_IT+0xcc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x76>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d115      	bne.n	8005472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	4b17      	ldr	r3, [pc, #92]	; (80054ac <HAL_TIM_Base_Start_IT+0xdc>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b06      	cmp	r3, #6
 8005456:	d015      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800545e:	d011      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005470:	e008      	b.n	8005484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e000      	b.n	8005486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0202 	mvn.w	r2, #2
 80054e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8e4 	bl	80056c8 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8d6 	bl	80056b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8e7 	bl	80056dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8be 	bl	80056c8 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8b0 	bl	80056b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8c1 	bl	80056dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f898 	bl	80056c8 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f88a 	bl	80056b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f89b 	bl	80056dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f872 	bl	80056c8 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f864 	bl	80056b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f875 	bl	80056dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb fef4 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f906 	bl	800584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8fe 	bl	8005860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00c      	beq.n	8005688 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f834 	bl	80056f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0220 	mvn.w	r2, #32
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f8c6 	bl	8005838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a40      	ldr	r2, [pc, #256]	; (8005818 <TIM_Base_SetConfig+0x114>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d00f      	beq.n	8005744 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3d      	ldr	r2, [pc, #244]	; (800581c <TIM_Base_SetConfig+0x118>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3c      	ldr	r2, [pc, #240]	; (8005820 <TIM_Base_SetConfig+0x11c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a3b      	ldr	r2, [pc, #236]	; (8005824 <TIM_Base_SetConfig+0x120>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3a      	ldr	r2, [pc, #232]	; (8005828 <TIM_Base_SetConfig+0x124>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <TIM_Base_SetConfig+0x114>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01f      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005764:	d01b      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <TIM_Base_SetConfig+0x118>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d017      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <TIM_Base_SetConfig+0x11c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2a      	ldr	r2, [pc, #168]	; (8005824 <TIM_Base_SetConfig+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00f      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a29      	ldr	r2, [pc, #164]	; (8005828 <TIM_Base_SetConfig+0x124>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00b      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a28      	ldr	r2, [pc, #160]	; (800582c <TIM_Base_SetConfig+0x128>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d007      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <TIM_Base_SetConfig+0x12c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_Base_SetConfig+0x9a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a26      	ldr	r2, [pc, #152]	; (8005834 <TIM_Base_SetConfig+0x130>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d108      	bne.n	80057b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00f      	beq.n	80057fc <TIM_Base_SetConfig+0xf8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <TIM_Base_SetConfig+0x124>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00b      	beq.n	80057fc <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a11      	ldr	r2, [pc, #68]	; (800582c <TIM_Base_SetConfig+0x128>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_Base_SetConfig+0xf8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <TIM_Base_SetConfig+0x12c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_Base_SetConfig+0xf8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <TIM_Base_SetConfig+0x130>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d103      	bne.n	8005804 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	615a      	str	r2, [r3, #20]
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40013400 	.word	0x40013400
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800

08005838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e040      	b.n	8005908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fb feb8 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	; 0x24
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fae0 	bl	8005e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f825 	bl	8005910 <UART_SetConfig>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e01b      	b.n	8005908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb5f 	bl	8005fc4 <UART_CheckIdleState>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005914:	b08a      	sub	sp, #40	; 0x28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	431a      	orrs	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4313      	orrs	r3, r2
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4ba4      	ldr	r3, [pc, #656]	; (8005bd0 <UART_SetConfig+0x2c0>)
 8005940:	4013      	ands	r3, r2
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005948:	430b      	orrs	r3, r1
 800594a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a99      	ldr	r2, [pc, #612]	; (8005bd4 <UART_SetConfig+0x2c4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a90      	ldr	r2, [pc, #576]	; (8005bd8 <UART_SetConfig+0x2c8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d126      	bne.n	80059e8 <UART_SetConfig+0xd8>
 800599a:	4b90      	ldr	r3, [pc, #576]	; (8005bdc <UART_SetConfig+0x2cc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d81b      	bhi.n	80059e0 <UART_SetConfig+0xd0>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0xa0>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059d1 	.word	0x080059d1
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e116      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 80059c8:	2302      	movs	r3, #2
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e112      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 80059d0:	2304      	movs	r3, #4
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d6:	e10e      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 80059d8:	2308      	movs	r3, #8
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059de:	e10a      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e6:	e106      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a7c      	ldr	r2, [pc, #496]	; (8005be0 <UART_SetConfig+0x2d0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d138      	bne.n	8005a64 <UART_SetConfig+0x154>
 80059f2:	4b7a      	ldr	r3, [pc, #488]	; (8005bdc <UART_SetConfig+0x2cc>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	d82d      	bhi.n	8005a5c <UART_SetConfig+0x14c>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <UART_SetConfig+0xf8>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a5d 	.word	0x08005a5d
 8005a14:	08005a5d 	.word	0x08005a5d
 8005a18:	08005a4d 	.word	0x08005a4d
 8005a1c:	08005a5d 	.word	0x08005a5d
 8005a20:	08005a5d 	.word	0x08005a5d
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e0d8      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e0d4      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e0d0      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e0cc      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e0c8      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5e      	ldr	r2, [pc, #376]	; (8005be4 <UART_SetConfig+0x2d4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d125      	bne.n	8005aba <UART_SetConfig+0x1aa>
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <UART_SetConfig+0x2cc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d016      	beq.n	8005aaa <UART_SetConfig+0x19a>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d818      	bhi.n	8005ab2 <UART_SetConfig+0x1a2>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d00a      	beq.n	8005a9a <UART_SetConfig+0x18a>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d814      	bhi.n	8005ab2 <UART_SetConfig+0x1a2>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <UART_SetConfig+0x182>
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d008      	beq.n	8005aa2 <UART_SetConfig+0x192>
 8005a90:	e00f      	b.n	8005ab2 <UART_SetConfig+0x1a2>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a98:	e0ad      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa0:	e0a9      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa8:	e0a5      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab0:	e0a1      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab8:	e09d      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a4a      	ldr	r2, [pc, #296]	; (8005be8 <UART_SetConfig+0x2d8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d125      	bne.n	8005b10 <UART_SetConfig+0x200>
 8005ac4:	4b45      	ldr	r3, [pc, #276]	; (8005bdc <UART_SetConfig+0x2cc>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ace:	2bc0      	cmp	r3, #192	; 0xc0
 8005ad0:	d016      	beq.n	8005b00 <UART_SetConfig+0x1f0>
 8005ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ad4:	d818      	bhi.n	8005b08 <UART_SetConfig+0x1f8>
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d00a      	beq.n	8005af0 <UART_SetConfig+0x1e0>
 8005ada:	2b80      	cmp	r3, #128	; 0x80
 8005adc:	d814      	bhi.n	8005b08 <UART_SetConfig+0x1f8>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <UART_SetConfig+0x1d8>
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d008      	beq.n	8005af8 <UART_SetConfig+0x1e8>
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x1f8>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e082      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e07e      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e07a      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e076      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e072      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a35      	ldr	r2, [pc, #212]	; (8005bec <UART_SetConfig+0x2dc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d12a      	bne.n	8005b70 <UART_SetConfig+0x260>
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <UART_SetConfig+0x2cc>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b28:	d01a      	beq.n	8005b60 <UART_SetConfig+0x250>
 8005b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b2e:	d81b      	bhi.n	8005b68 <UART_SetConfig+0x258>
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d00c      	beq.n	8005b50 <UART_SetConfig+0x240>
 8005b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3a:	d815      	bhi.n	8005b68 <UART_SetConfig+0x258>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <UART_SetConfig+0x238>
 8005b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b44:	d008      	beq.n	8005b58 <UART_SetConfig+0x248>
 8005b46:	e00f      	b.n	8005b68 <UART_SetConfig+0x258>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4e:	e052      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b56:	e04e      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5e:	e04a      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b66:	e046      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e042      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a17      	ldr	r2, [pc, #92]	; (8005bd4 <UART_SetConfig+0x2c4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d13a      	bne.n	8005bf0 <UART_SetConfig+0x2e0>
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <UART_SetConfig+0x2cc>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b88:	d01a      	beq.n	8005bc0 <UART_SetConfig+0x2b0>
 8005b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b8e:	d81b      	bhi.n	8005bc8 <UART_SetConfig+0x2b8>
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d00c      	beq.n	8005bb0 <UART_SetConfig+0x2a0>
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9a:	d815      	bhi.n	8005bc8 <UART_SetConfig+0x2b8>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <UART_SetConfig+0x298>
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d008      	beq.n	8005bb8 <UART_SetConfig+0x2a8>
 8005ba6:	e00f      	b.n	8005bc8 <UART_SetConfig+0x2b8>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bae:	e022      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb6:	e01e      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbe:	e01a      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc6:	e016      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bce:	e012      	b.n	8005bf6 <UART_SetConfig+0x2e6>
 8005bd0:	efff69f3 	.word	0xefff69f3
 8005bd4:	40008000 	.word	0x40008000
 8005bd8:	40013800 	.word	0x40013800
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a9f      	ldr	r2, [pc, #636]	; (8005e78 <UART_SetConfig+0x568>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d17a      	bne.n	8005cf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d824      	bhi.n	8005c52 <UART_SetConfig+0x342>
 8005c08:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x300>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c53 	.word	0x08005c53
 8005c18:	08005c3d 	.word	0x08005c3d
 8005c1c:	08005c53 	.word	0x08005c53
 8005c20:	08005c43 	.word	0x08005c43
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	08005c53 	.word	0x08005c53
 8005c2c:	08005c53 	.word	0x08005c53
 8005c30:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c34:	f7fe f8aa 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005c38:	61f8      	str	r0, [r7, #28]
        break;
 8005c3a:	e010      	b.n	8005c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b8f      	ldr	r3, [pc, #572]	; (8005e7c <UART_SetConfig+0x56c>)
 8005c3e:	61fb      	str	r3, [r7, #28]
        break;
 8005c40:	e00d      	b.n	8005c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fe f80b 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8005c46:	61f8      	str	r0, [r7, #28]
        break;
 8005c48:	e009      	b.n	8005c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4e:	61fb      	str	r3, [r7, #28]
        break;
 8005c50:	e005      	b.n	8005c5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80fb 	beq.w	8005e5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d305      	bcc.n	8005c82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d903      	bls.n	8005c8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c88:	e0e8      	b.n	8005e5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	461c      	mov	r4, r3
 8005c90:	4615      	mov	r5, r2
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	022b      	lsls	r3, r5, #8
 8005c9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ca0:	0222      	lsls	r2, r4, #8
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	0849      	lsrs	r1, r1, #1
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4688      	mov	r8, r1
 8005cac:	4681      	mov	r9, r0
 8005cae:	eb12 0a08 	adds.w	sl, r2, r8
 8005cb2:	eb43 0b09 	adc.w	fp, r3, r9
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc4:	4650      	mov	r0, sl
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	f7fa fec0 	bl	8000a4c <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cda:	d308      	bcc.n	8005cee <UART_SetConfig+0x3de>
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce2:	d204      	bcs.n	8005cee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	e0b6      	b.n	8005e5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cf4:	e0b2      	b.n	8005e5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfe:	d15e      	bne.n	8005dbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d828      	bhi.n	8005d5a <UART_SetConfig+0x44a>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x400>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	08005d5b 	.word	0x08005d5b
 8005d20:	08005d4b 	.word	0x08005d4b
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d5b 	.word	0x08005d5b
 8005d2c:	08005d5b 	.word	0x08005d5b
 8005d30:	08005d53 	.word	0x08005d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d34:	f7fe f82a 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005d38:	61f8      	str	r0, [r7, #28]
        break;
 8005d3a:	e014      	b.n	8005d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3c:	f7fe f83c 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8005d40:	61f8      	str	r0, [r7, #28]
        break;
 8005d42:	e010      	b.n	8005d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d44:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <UART_SetConfig+0x56c>)
 8005d46:	61fb      	str	r3, [r7, #28]
        break;
 8005d48:	e00d      	b.n	8005d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4a:	f7fd ff87 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8005d4e:	61f8      	str	r0, [r7, #28]
        break;
 8005d50:	e009      	b.n	8005d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d56:	61fb      	str	r3, [r7, #28]
        break;
 8005d58:	e005      	b.n	8005d66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d077      	beq.n	8005e5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	005a      	lsls	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	441a      	add	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d916      	bls.n	8005db6 <UART_SetConfig+0x4a6>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8e:	d212      	bcs.n	8005db6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f023 030f 	bic.w	r3, r3, #15
 8005d98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	8afb      	ldrh	r3, [r7, #22]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	8afa      	ldrh	r2, [r7, #22]
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	e052      	b.n	8005e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dbc:	e04e      	b.n	8005e5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d827      	bhi.n	8005e16 <UART_SetConfig+0x506>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x4bc>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	08005e17 	.word	0x08005e17
 8005ddc:	08005e07 	.word	0x08005e07
 8005de0:	08005e17 	.word	0x08005e17
 8005de4:	08005e17 	.word	0x08005e17
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e0f 	.word	0x08005e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fd ffcc 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005df4:	61f8      	str	r0, [r7, #28]
        break;
 8005df6:	e014      	b.n	8005e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7fd ffde 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	61f8      	str	r0, [r7, #28]
        break;
 8005dfe:	e010      	b.n	8005e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <UART_SetConfig+0x56c>)
 8005e02:	61fb      	str	r3, [r7, #28]
        break;
 8005e04:	e00d      	b.n	8005e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fd ff29 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8005e0a:	61f8      	str	r0, [r7, #28]
        break;
 8005e0c:	e009      	b.n	8005e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e12:	61fb      	str	r3, [r7, #28]
        break;
 8005e14:	e005      	b.n	8005e22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e20:	bf00      	nop
    }

    if (pclk != 0U)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d019      	beq.n	8005e5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	085a      	lsrs	r2, r3, #1
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	441a      	add	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d909      	bls.n	8005e56 <UART_SetConfig+0x546>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e48:	d205      	bcs.n	8005e56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60da      	str	r2, [r3, #12]
 8005e54:	e002      	b.n	8005e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e76:	bf00      	nop
 8005e78:	40008000 	.word	0x40008000
 8005e7c:	00f42400 	.word	0x00f42400

08005e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7e:	d10a      	bne.n	8005f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b098      	sub	sp, #96	; 0x60
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd4:	f7fb fef2 	bl	8001dbc <HAL_GetTick>
 8005fd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d12e      	bne.n	8006046 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f88c 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d021      	beq.n	8006046 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006016:	653b      	str	r3, [r7, #80]	; 0x50
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006020:	647b      	str	r3, [r7, #68]	; 0x44
 8006022:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e062      	b.n	800610c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d149      	bne.n	80060e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800605c:	2200      	movs	r2, #0
 800605e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f856 	bl	8006114 <UART_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d03c      	beq.n	80060e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	623b      	str	r3, [r7, #32]
   return(result);
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608c:	633b      	str	r3, [r7, #48]	; 0x30
 800608e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3308      	adds	r3, #8
 80060a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060c0:	61fa      	str	r2, [r7, #28]
 80060c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	69b9      	ldr	r1, [r7, #24]
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	617b      	str	r3, [r7, #20]
   return(result);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e5      	bne.n	80060a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e011      	b.n	800610c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2220      	movs	r2, #32
 80060ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3758      	adds	r7, #88	; 0x58
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006124:	e049      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d045      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fb fe45 	bl	8001dbc <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <UART_WaitOnFlagUntilTimeout+0x30>
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e048      	b.n	80061da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b00      	cmp	r3, #0
 8006154:	d031      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d110      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2208      	movs	r2, #8
 800616a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f838 	bl	80061e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2208      	movs	r2, #8
 8006176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e029      	b.n	80061da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006194:	d111      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800619e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f81e 	bl	80061e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e00f      	b.n	80061da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	bf0c      	ite	eq
 80061ca:	2301      	moveq	r3, #1
 80061cc:	2300      	movne	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d0a6      	beq.n	8006126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b095      	sub	sp, #84	; 0x54
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
 800620a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800620e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e6      	bne.n	80061ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	61fb      	str	r3, [r7, #28]
   return(result);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	64bb      	str	r3, [r7, #72]	; 0x48
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3308      	adds	r3, #8
 800623a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800623c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006254:	2b01      	cmp	r3, #1
 8006256:	d118      	bne.n	800628a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	60bb      	str	r3, [r7, #8]
   return(result);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f023 0310 	bic.w	r3, r3, #16
 800626c:	647b      	str	r3, [r7, #68]	; 0x44
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6979      	ldr	r1, [r7, #20]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	613b      	str	r3, [r7, #16]
   return(result);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e6      	bne.n	8006258 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800629e:	bf00      	nop
 80062a0:	3754      	adds	r7, #84	; 0x54
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b082      	sub	sp, #8
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	3304      	adds	r3, #4
 80062c6:	2280      	movs	r2, #128	; 0x80
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 ff2a 	bl	8009124 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3384      	adds	r3, #132	; 0x84
 80062d4:	2280      	movs	r2, #128	; 0x80
 80062d6:	2100      	movs	r1, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f002 ff23 	bl	8009124 <memset>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b088      	sub	sp, #32
 80062ea:	af02      	add	r7, sp, #8
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	461a      	mov	r2, r3
 80062f2:	460b      	mov	r3, r1
 80062f4:	72fb      	strb	r3, [r7, #11]
 80062f6:	4613      	mov	r3, r2
 80062f8:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 80062fa:	893b      	ldrh	r3, [r7, #8]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 fe20 	bl	8008f44 <malloc>
 8006304:	4603      	mov	r3, r0
 8006306:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	7afa      	ldrb	r2, [r7, #11]
 800630c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <max30102_write+0x42>
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3301      	adds	r3, #1
 800631e:	893a      	ldrh	r2, [r7, #8]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4618      	mov	r0, r3
 8006324:	f002 ff98 	bl	8009258 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	893b      	ldrh	r3, [r7, #8]
 800632e:	3301      	adds	r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006336:	9200      	str	r2, [sp, #0]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	21ae      	movs	r1, #174	; 0xae
 800633c:	f7fc f8ae 	bl	800249c <HAL_I2C_Master_Transmit>
    free(payload);
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f002 fe07 	bl	8008f54 <free>
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af02      	add	r7, sp, #8
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	461a      	mov	r2, r3
 800635a:	460b      	mov	r3, r1
 800635c:	72fb      	strb	r3, [r7, #11]
 800635e:	4613      	mov	r3, r2
 8006360:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8006362:	7afb      	ldrb	r3, [r7, #11]
 8006364:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f107 0217 	add.w	r2, r7, #23
 800636e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2301      	movs	r3, #1
 8006376:	21ae      	movs	r1, #174	; 0xae
 8006378:	f7fc f890 	bl	800249c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	893b      	ldrh	r3, [r7, #8]
 8006382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006386:	9200      	str	r2, [sp, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	21ae      	movs	r1, #174	; 0xae
 800638c:	f7fc f99e 	bl	80026cc <HAL_I2C_Master_Receive>
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80063a4:	f107 020f 	add.w	r2, r7, #15
 80063a8:	2301      	movs	r3, #1
 80063aa:	2109      	movs	r1, #9
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ff9a 	bl	80062e6 <max30102_write>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80063ca:	f107 020f 	add.w	r2, r7, #15
 80063ce:	2301      	movs	r3, #1
 80063d0:	2102      	movs	r1, #2
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff ffbb 	bl	800634e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	b25a      	sxtb	r2, r3
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 80063f4:	f107 020f 	add.w	r2, r7, #15
 80063f8:	2301      	movs	r3, #1
 80063fa:	2102      	movs	r1, #2
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ff72 	bl	80062e6 <max30102_write>
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	b2db      	uxtb	r3, r3
 8006422:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8006424:	f107 020f 	add.w	r2, r7, #15
 8006428:	2301      	movs	r3, #1
 800642a:	2103      	movs	r1, #3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff ff5a 	bl	80062e6 <max30102_write>
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	b2db      	uxtb	r3, r3
 8006452:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8006454:	f107 020f 	add.w	r2, r7, #15
 8006458:	2301      	movs	r3, #1
 800645a:	2121      	movs	r1, #33	; 0x21
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff ff42 	bl	80062e6 <max30102_write>
}
 8006462:	bf00      	nop
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006476:	f107 020f 	add.w	r2, r7, #15
 800647a:	2301      	movs	r3, #1
 800647c:	2109      	movs	r1, #9
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ff65 	bl	800634e <max30102_read>
    config = (config & 0xf8) | mode;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	b25b      	sxtb	r3, r3
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	b25a      	sxtb	r2, r3
 800648e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006492:	4313      	orrs	r3, r2
 8006494:	b25b      	sxtb	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800649a:	f107 020f 	add.w	r2, r7, #15
 800649e:	2301      	movs	r3, #1
 80064a0:	2109      	movs	r1, #9
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ff1f 	bl	80062e6 <max30102_write>
    max30102_clear_fifo(obj);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f8fb 	bl	80066a4 <max30102_clear_fifo>
}
 80064ae:	bf00      	nop
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80064c2:	f107 020f 	add.w	r2, r7, #15
 80064c6:	2301      	movs	r3, #1
 80064c8:	210a      	movs	r1, #10
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ff3f 	bl	800634e <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	f003 0363 	and.w	r3, r3, #99	; 0x63
 80064d8:	b25a      	sxtb	r2, r3
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80064e8:	f107 020f 	add.w	r2, r7, #15
 80064ec:	2301      	movs	r3, #1
 80064ee:	210a      	movs	r1, #10
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff fef8 	bl	80062e6 <max30102_write>
}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800650a:	f107 020f 	add.w	r2, r7, #15
 800650e:	2301      	movs	r3, #1
 8006510:	210a      	movs	r1, #10
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff1b 	bl	800634e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	b25b      	sxtb	r3, r3
 800651c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006520:	b25a      	sxtb	r2, r3
 8006522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006526:	4313      	orrs	r3, r2
 8006528:	b25b      	sxtb	r3, r3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800652e:	f107 020f 	add.w	r2, r7, #15
 8006532:	2301      	movs	r3, #1
 8006534:	210a      	movs	r1, #10
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fed5 	bl	80062e6 <max30102_write>
}
 800653c:	bf00      	nop
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006550:	f107 020f 	add.w	r2, r7, #15
 8006554:	2301      	movs	r3, #1
 8006556:	210a      	movs	r1, #10
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fef8 	bl	800634e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	b25b      	sxtb	r3, r3
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	b25a      	sxtb	r2, r3
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	b25b      	sxtb	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b25b      	sxtb	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006576:	f107 020f 	add.w	r2, r7, #15
 800657a:	2301      	movs	r3, #1
 800657c:	210a      	movs	r1, #10
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff feb1 	bl	80062e6 <max30102_write>
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	0000      	movs	r0, r0
	...

08006590 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 800659c:	6838      	ldr	r0, [r7, #0]
 800659e:	f7f9 ffcb 	bl	8000538 <__aeabi_f2d>
 80065a2:	a30d      	add	r3, pc, #52	; (adr r3, 80065d8 <max30102_set_led_current_1+0x48>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7fa f948 	bl	800083c <__aeabi_ddiv>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4610      	mov	r0, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	f7fa fa2a 	bl	8000a0c <__aeabi_d2uiz>
 80065b8:	4603      	mov	r3, r0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80065be:	f107 020f 	add.w	r2, r7, #15
 80065c2:	2301      	movs	r3, #1
 80065c4:	210c      	movs	r1, #12
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fe8d 	bl	80062e6 <max30102_write>
}
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	f3af 8000 	nop.w
 80065d8:	9999999a 	.word	0x9999999a
 80065dc:	3fc99999 	.word	0x3fc99999

080065e0 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80065ec:	6838      	ldr	r0, [r7, #0]
 80065ee:	f7f9 ffa3 	bl	8000538 <__aeabi_f2d>
 80065f2:	a30d      	add	r3, pc, #52	; (adr r3, 8006628 <max30102_set_led_current_2+0x48>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7fa f920 	bl	800083c <__aeabi_ddiv>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f7fa fa02 	bl	8000a0c <__aeabi_d2uiz>
 8006608:	4603      	mov	r3, r0
 800660a:	b2db      	uxtb	r3, r3
 800660c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 800660e:	f107 020f 	add.w	r2, r7, #15
 8006612:	2301      	movs	r3, #1
 8006614:	210d      	movs	r1, #13
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fe65 	bl	80062e6 <max30102_write>
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	f3af 8000 	nop.w
 8006628:	9999999a 	.word	0x9999999a
 800662c:	3fc99999 	.word	0x3fc99999

08006630 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	70fb      	strb	r3, [r7, #3]
 8006642:	460b      	mov	r3, r1
 8006644:	70bb      	strb	r3, [r7, #2]
 8006646:	4613      	mov	r3, r2
 8006648:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	015b      	lsls	r3, r3, #5
 8006652:	b25a      	sxtb	r2, r3
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	b25b      	sxtb	r3, r3
 8006658:	4313      	orrs	r3, r2
 800665a:	b25b      	sxtb	r3, r3
 800665c:	b2db      	uxtb	r3, r3
 800665e:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8006660:	78bb      	ldrb	r3, [r7, #2]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	b25b      	sxtb	r3, r3
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	b25a      	sxtb	r2, r3
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	b25b      	sxtb	r3, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	b25b      	sxtb	r3, r3
 8006674:	b2db      	uxtb	r3, r3
 8006676:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8006678:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	b25a      	sxtb	r2, r3
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	b25b      	sxtb	r3, r3
 8006686:	4313      	orrs	r3, r2
 8006688:	b25b      	sxtb	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 800668e:	f107 020f 	add.w	r2, r7, #15
 8006692:	2301      	movs	r3, #1
 8006694:	2108      	movs	r1, #8
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fe25 	bl	80062e6 <max30102_write>
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80066b0:	f107 020f 	add.w	r2, r7, #15
 80066b4:	2303      	movs	r3, #3
 80066b6:	2104      	movs	r1, #4
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fe14 	bl	80062e6 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80066be:	f107 020f 	add.w	r2, r7, #15
 80066c2:	2303      	movs	r3, #3
 80066c4:	2106      	movs	r1, #6
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff fe0d 	bl	80062e6 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 80066cc:	f107 020f 	add.w	r2, r7, #15
 80066d0:	2303      	movs	r3, #3
 80066d2:	2105      	movs	r1, #5
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fe06 	bl	80062e6 <max30102_write>
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <__NVIC_SetPriority>:
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db0a      	blt.n	800670e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	490c      	ldr	r1, [pc, #48]	; (8006730 <__NVIC_SetPriority+0x4c>)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	440b      	add	r3, r1
 8006708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800670c:	e00a      	b.n	8006724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4908      	ldr	r1, [pc, #32]	; (8006734 <__NVIC_SetPriority+0x50>)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3b04      	subs	r3, #4
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	440b      	add	r3, r1
 8006722:	761a      	strb	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000e100 	.word	0xe000e100
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <SysTick_Handler+0x1c>)
 800673e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006740:	f001 fd28 	bl	8008194 <xTaskGetSchedulerState>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d001      	beq.n	800674e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800674a:	f002 fb0d 	bl	8008d68 <xPortSysTickHandler>
  }
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	e000e010 	.word	0xe000e010

08006758 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800675c:	2100      	movs	r1, #0
 800675e:	f06f 0004 	mvn.w	r0, #4
 8006762:	f7ff ffbf 	bl	80066e4 <__NVIC_SetPriority>
#endif
}
 8006766:	bf00      	nop
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006772:	f3ef 8305 	mrs	r3, IPSR
 8006776:	603b      	str	r3, [r7, #0]
  return(result);
 8006778:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800677e:	f06f 0305 	mvn.w	r3, #5
 8006782:	607b      	str	r3, [r7, #4]
 8006784:	e00c      	b.n	80067a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <osKernelInitialize+0x44>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800678e:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <osKernelInitialize+0x44>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006794:	2300      	movs	r3, #0
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	e002      	b.n	80067a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067a0:	687b      	ldr	r3, [r7, #4]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	2000072c 	.word	0x2000072c

080067b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ba:	f3ef 8305 	mrs	r3, IPSR
 80067be:	603b      	str	r3, [r7, #0]
  return(result);
 80067c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80067c6:	f06f 0305 	mvn.w	r3, #5
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	e010      	b.n	80067f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <osKernelStart+0x48>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d109      	bne.n	80067ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067d6:	f7ff ffbf 	bl	8006758 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <osKernelStart+0x48>)
 80067dc:	2202      	movs	r2, #2
 80067de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067e0:	f001 f87c 	bl	80078dc <vTaskStartScheduler>
      stat = osOK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	e002      	b.n	80067f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295
 80067ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067f0:	687b      	ldr	r3, [r7, #4]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	2000072c 	.word	0x2000072c

08006800 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	; 0x38
 8006804:	af04      	add	r7, sp, #16
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006810:	f3ef 8305 	mrs	r3, IPSR
 8006814:	617b      	str	r3, [r7, #20]
  return(result);
 8006816:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006818:	2b00      	cmp	r3, #0
 800681a:	d17e      	bne.n	800691a <osThreadNew+0x11a>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d07b      	beq.n	800691a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006826:	2318      	movs	r3, #24
 8006828:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800682a:	2300      	movs	r3, #0
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800682e:	f04f 33ff 	mov.w	r3, #4294967295
 8006832:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d045      	beq.n	80068c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <osThreadNew+0x48>
        name = attr->name;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <osThreadNew+0x6e>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b38      	cmp	r3, #56	; 0x38
 8006860:	d805      	bhi.n	800686e <osThreadNew+0x6e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <osThreadNew+0x72>
        return (NULL);
 800686e:	2300      	movs	r3, #0
 8006870:	e054      	b.n	800691c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <osThreadNew+0xa8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2ba7      	cmp	r3, #167	; 0xa7
 8006890:	d90a      	bls.n	80068a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <osThreadNew+0xa8>
        mem = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e010      	b.n	80068ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <osThreadNew+0xca>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <osThreadNew+0xca>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <osThreadNew+0xca>
          mem = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e001      	b.n	80068ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d110      	bne.n	80068f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068d8:	9202      	str	r2, [sp, #8]
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fe0c 	bl	8007504 <xTaskCreateStatic>
 80068ec:	4603      	mov	r3, r0
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	e013      	b.n	800691a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d110      	bne.n	800691a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	f107 0310 	add.w	r3, r7, #16
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fe57 	bl	80075be <xTaskCreate>
 8006910:	4603      	mov	r3, r0
 8006912:	2b01      	cmp	r3, #1
 8006914:	d001      	beq.n	800691a <osThreadNew+0x11a>
            hTask = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800691a:	693b      	ldr	r3, [r7, #16]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	; 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800692c:	f3ef 8305 	mrs	r3, IPSR
 8006930:	60bb      	str	r3, [r7, #8]
  return(result);
 8006932:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <osDelay+0x1c>
    stat = osErrorISR;
 8006938:	f06f 0305 	mvn.w	r3, #5
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	e007      	b.n	8006950 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <osDelay+0x2c>
      vTaskDelay(ticks);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 ff92 	bl	8007874 <vTaskDelay>
    }
  }

  return (stat);
 8006950:	68fb      	ldr	r3, [r7, #12]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a07      	ldr	r2, [pc, #28]	; (8006988 <vApplicationGetIdleTaskMemory+0x2c>)
 800696c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	4a06      	ldr	r2, [pc, #24]	; (800698c <vApplicationGetIdleTaskMemory+0x30>)
 8006972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	20000730 	.word	0x20000730
 800698c:	200007d8 	.word	0x200007d8

08006990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a07      	ldr	r2, [pc, #28]	; (80069bc <vApplicationGetTimerTaskMemory+0x2c>)
 80069a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	4a06      	ldr	r2, [pc, #24]	; (80069c0 <vApplicationGetTimerTaskMemory+0x30>)
 80069a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ae:	601a      	str	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	200009d8 	.word	0x200009d8
 80069c0:	20000a80 	.word	0x20000a80

080069c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f103 0208 	add.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295
 80069dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f103 0208 	add.w	r2, r3, #8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f103 0208 	add.w	r2, r3, #8
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a12:	bf00      	nop
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	1c5a      	adds	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d103      	bne.n	8006a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e00c      	b.n	8006aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e002      	b.n	8006a94 <vListInsert+0x2e>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d2f6      	bcs.n	8006a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	601a      	str	r2, [r3, #0]
}
 8006acc:	bf00      	nop
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6892      	ldr	r2, [r2, #8]
 8006aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6852      	ldr	r2, [r2, #4]
 8006af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d103      	bne.n	8006b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	1e5a      	subs	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b56:	f002 f875 	bl	8008c44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	3b01      	subs	r3, #1
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	22ff      	movs	r2, #255	; 0xff
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	22ff      	movs	r2, #255	; 0xff
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d114      	bne.n	8006bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01a      	beq.n	8006bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3310      	adds	r3, #16
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f929 	bl	8007e10 <xTaskRemoveFromEventList>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d012      	beq.n	8006bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <xQueueGenericReset+0xcc>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	e009      	b.n	8006bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fef2 	bl	80069c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3324      	adds	r3, #36	; 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff feed 	bl	80069c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bea:	f002 f85b 	bl	8008ca4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bee:	2301      	movs	r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <xQueueGenericCreateStatic+0x52>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <xQueueGenericCreateStatic+0x56>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <xQueueGenericCreateStatic+0x58>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	623b      	str	r3, [r7, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <xQueueGenericCreateStatic+0x7e>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <xQueueGenericCreateStatic+0x82>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <xQueueGenericCreateStatic+0x84>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61fb      	str	r3, [r7, #28]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c9a:	2350      	movs	r3, #80	; 0x50
 8006c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d00a      	beq.n	8006cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	f383 8811 	msr	BASEPRI, r3
 8006cac:	f3bf 8f6f 	isb	sy
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	61bb      	str	r3, [r7, #24]
}
 8006cb6:	bf00      	nop
 8006cb8:	e7fe      	b.n	8006cb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00d      	beq.n	8006ce2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f805 	bl	8006cec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3730      	adds	r7, #48	; 0x30
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e002      	b.n	8006d0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	69b8      	ldr	r0, [r7, #24]
 8006d1e:	f7ff ff05 	bl	8006b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08e      	sub	sp, #56	; 0x38
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d42:	2300      	movs	r3, #0
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xQueueGenericSend+0x32>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <xQueueGenericSend+0x40>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <xQueueGenericSend+0x44>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <xQueueGenericSend+0x46>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <xQueueGenericSend+0x60>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d103      	bne.n	8006da2 <xQueueGenericSend+0x6e>
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSend+0x72>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSend+0x74>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	623b      	str	r3, [r7, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dc2:	f001 f9e7 	bl	8008194 <xTaskGetSchedulerState>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <xQueueGenericSend+0x9e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <xQueueGenericSend+0xa2>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <xQueueGenericSend+0xa4>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	61fb      	str	r3, [r7, #28]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006df2:	f001 ff27 	bl	8008c44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <xQueueGenericSend+0xd4>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d129      	bne.n	8006e5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e0e:	f000 fa0b 	bl	8007228 <prvCopyDataToQueue>
 8006e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d010      	beq.n	8006e3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	3324      	adds	r3, #36	; 0x24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fff5 	bl	8007e10 <xTaskRemoveFromEventList>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d013      	beq.n	8006e54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e2c:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <xQueueGenericSend+0x1f8>)
 8006e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	e00a      	b.n	8006e54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d007      	beq.n	8006e54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e44:	4b39      	ldr	r3, [pc, #228]	; (8006f2c <xQueueGenericSend+0x1f8>)
 8006e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e54:	f001 ff26 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e063      	b.n	8006f24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e62:	f001 ff1f 	bl	8008ca4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e05c      	b.n	8006f24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d106      	bne.n	8006e7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f82f 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e7e:	f001 ff11 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e82:	f000 fd9b 	bl	80079bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e86:	f001 fedd 	bl	8008c44 <vPortEnterCritical>
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d103      	bne.n	8006ea0 <xQueueGenericSend+0x16c>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea6:	b25b      	sxtb	r3, r3
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d103      	bne.n	8006eb6 <xQueueGenericSend+0x182>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eb6:	f001 fef5 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006eba:	1d3a      	adds	r2, r7, #4
 8006ebc:	f107 0314 	add.w	r3, r7, #20
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 f81e 	bl	8007f04 <xTaskCheckForTimeOut>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d124      	bne.n	8006f18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed0:	f000 faa2 	bl	8007418 <prvIsQueueFull>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	3310      	adds	r3, #16
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 ff44 	bl	8007d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eea:	f000 fa2d 	bl	8007348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eee:	f000 fd73 	bl	80079d8 <xTaskResumeAll>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f47f af7c 	bne.w	8006df2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006efa:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <xQueueGenericSend+0x1f8>)
 8006efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	e772      	b.n	8006df2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f0e:	f000 fa1b 	bl	8007348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f12:	f000 fd61 	bl	80079d8 <xTaskResumeAll>
 8006f16:	e76c      	b.n	8006df2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f1a:	f000 fa15 	bl	8007348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f1e:	f000 fd5b 	bl	80079d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3738      	adds	r7, #56	; 0x38
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b090      	sub	sp, #64	; 0x40
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <xQueueGenericSendFromISR+0x3c>
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <xQueueGenericSendFromISR+0x40>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <xQueueGenericSendFromISR+0x42>
 8006f70:	2300      	movs	r3, #0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f88:	bf00      	nop
 8006f8a:	e7fe      	b.n	8006f8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d103      	bne.n	8006f9a <xQueueGenericSendFromISR+0x6a>
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <xQueueGenericSendFromISR+0x6e>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueGenericSendFromISR+0x70>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	623b      	str	r3, [r7, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fba:	f001 ff25 	bl	8008e08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	61fa      	str	r2, [r7, #28]
 8006fd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <xQueueGenericSendFromISR+0xbc>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d12f      	bne.n	800704c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	68b9      	ldr	r1, [r7, #8]
 8007000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007002:	f000 f911 	bl	8007228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007006:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d112      	bne.n	8007036 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d016      	beq.n	8007046 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	3324      	adds	r3, #36	; 0x24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fef7 	bl	8007e10 <xTaskRemoveFromEventList>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00e      	beq.n	8007046 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e007      	b.n	8007046 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800703a:	3301      	adds	r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	b25a      	sxtb	r2, r3
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007046:	2301      	movs	r3, #1
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800704a:	e001      	b.n	8007050 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800704c:	2300      	movs	r3, #0
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007052:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800705a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800705c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800705e:	4618      	mov	r0, r3
 8007060:	3740      	adds	r7, #64	; 0x40
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	; 0x30
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007074:	2300      	movs	r3, #0
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <xQueueReceive+0x30>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	623b      	str	r3, [r7, #32]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d103      	bne.n	80070a6 <xQueueReceive+0x3e>
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xQueueReceive+0x42>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <xQueueReceive+0x44>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueReceive+0x5e>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61fb      	str	r3, [r7, #28]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c6:	f001 f865 	bl	8008194 <xTaskGetSchedulerState>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <xQueueReceive+0x6e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <xQueueReceive+0x72>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <xQueueReceive+0x74>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueReceive+0x8e>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	61bb      	str	r3, [r7, #24]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f6:	f001 fda5 	bl	8008c44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01f      	beq.n	8007146 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710a:	f000 f8f7 	bl	80072fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007114:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00f      	beq.n	800713e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	3310      	adds	r3, #16
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fe74 	bl	8007e10 <xTaskRemoveFromEventList>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800712e:	4b3d      	ldr	r3, [pc, #244]	; (8007224 <xQueueReceive+0x1bc>)
 8007130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800713e:	f001 fdb1 	bl	8008ca4 <vPortExitCritical>
				return pdPASS;
 8007142:	2301      	movs	r3, #1
 8007144:	e069      	b.n	800721a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800714c:	f001 fdaa 	bl	8008ca4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007150:	2300      	movs	r3, #0
 8007152:	e062      	b.n	800721a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800715a:	f107 0310 	add.w	r3, r7, #16
 800715e:	4618      	mov	r0, r3
 8007160:	f000 feba 	bl	8007ed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007168:	f001 fd9c 	bl	8008ca4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800716c:	f000 fc26 	bl	80079bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007170:	f001 fd68 	bl	8008c44 <vPortEnterCritical>
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800717a:	b25b      	sxtb	r3, r3
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d103      	bne.n	800718a <xQueueReceive+0x122>
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007190:	b25b      	sxtb	r3, r3
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d103      	bne.n	80071a0 <xQueueReceive+0x138>
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a0:	f001 fd80 	bl	8008ca4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071a4:	1d3a      	adds	r2, r7, #4
 80071a6:	f107 0310 	add.w	r3, r7, #16
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fea9 	bl	8007f04 <xTaskCheckForTimeOut>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d123      	bne.n	8007200 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ba:	f000 f917 	bl	80073ec <prvIsQueueEmpty>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d017      	beq.n	80071f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	3324      	adds	r3, #36	; 0x24
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4611      	mov	r1, r2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fdcf 	bl	8007d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d4:	f000 f8b8 	bl	8007348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071d8:	f000 fbfe 	bl	80079d8 <xTaskResumeAll>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d189      	bne.n	80070f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <xQueueReceive+0x1bc>)
 80071e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	e780      	b.n	80070f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f6:	f000 f8a7 	bl	8007348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071fa:	f000 fbed 	bl	80079d8 <xTaskResumeAll>
 80071fe:	e77a      	b.n	80070f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007202:	f000 f8a1 	bl	8007348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007206:	f000 fbe7 	bl	80079d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800720a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720c:	f000 f8ee 	bl	80073ec <prvIsQueueEmpty>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f43f af6f 	beq.w	80070f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800721a:	4618      	mov	r0, r3
 800721c:	3730      	adds	r7, #48	; 0x30
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007234:	2300      	movs	r3, #0
 8007236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10d      	bne.n	8007262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d14d      	bne.n	80072ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 ffbc 	bl	80081d0 <xTaskPriorityDisinherit>
 8007258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
 8007260:	e043      	b.n	80072ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d119      	bne.n	800729c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6858      	ldr	r0, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	461a      	mov	r2, r3
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	f001 fff0 	bl	8009258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	441a      	add	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	d32b      	bcc.n	80072ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	e026      	b.n	80072ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68d8      	ldr	r0, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	461a      	mov	r2, r3
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	f001 ffd6 	bl	8009258 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	425b      	negs	r3, r3
 80072b6:	441a      	add	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d207      	bcs.n	80072d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	425b      	negs	r3, r3
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d105      	bne.n	80072ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072f2:	697b      	ldr	r3, [r7, #20]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	d018      	beq.n	8007340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	441a      	add	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	429a      	cmp	r2, r3
 8007326:	d303      	bcc.n	8007330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68d9      	ldr	r1, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	461a      	mov	r2, r3
 800733a:	6838      	ldr	r0, [r7, #0]
 800733c:	f001 ff8c 	bl	8009258 <memcpy>
	}
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007350:	f001 fc78 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800735c:	e011      	b.n	8007382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d012      	beq.n	800738c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3324      	adds	r3, #36	; 0x24
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fd50 	bl	8007e10 <xTaskRemoveFromEventList>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007376:	f000 fe27 	bl	8007fc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	3b01      	subs	r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	dce9      	bgt.n	800735e <prvUnlockQueue+0x16>
 800738a:	e000      	b.n	800738e <prvUnlockQueue+0x46>
					break;
 800738c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007396:	f001 fc85 	bl	8008ca4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800739a:	f001 fc53 	bl	8008c44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073a6:	e011      	b.n	80073cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3310      	adds	r3, #16
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fd2b 	bl	8007e10 <xTaskRemoveFromEventList>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073c0:	f000 fe02 	bl	8007fc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	dce9      	bgt.n	80073a8 <prvUnlockQueue+0x60>
 80073d4:	e000      	b.n	80073d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	22ff      	movs	r2, #255	; 0xff
 80073dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073e0:	f001 fc60 	bl	8008ca4 <vPortExitCritical>
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073f4:	f001 fc26 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e001      	b.n	800740a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f001 fc4b 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007420:	f001 fc10 	bl	8008c44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	429a      	cmp	r2, r3
 800742e:	d102      	bne.n	8007436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e001      	b.n	800743a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800743a:	f001 fc33 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e014      	b.n	8007482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007458:	4a0f      	ldr	r2, [pc, #60]	; (8007498 <vQueueAddToRegistry+0x50>)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007464:	490c      	ldr	r1, [pc, #48]	; (8007498 <vQueueAddToRegistry+0x50>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800746e:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <vQueueAddToRegistry+0x50>)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4413      	add	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800747a:	e006      	b.n	800748a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b07      	cmp	r3, #7
 8007486:	d9e7      	bls.n	8007458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000e80 	.word	0x20000e80

0800749c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074ac:	f001 fbca 	bl	8008c44 <vPortEnterCritical>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d103      	bne.n	80074c6 <vQueueWaitForMessageRestricted+0x2a>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074cc:	b25b      	sxtb	r3, r3
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d103      	bne.n	80074dc <vQueueWaitForMessageRestricted+0x40>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074dc:	f001 fbe2 	bl	8008ca4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fc61 	bl	8007db8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074f6:	6978      	ldr	r0, [r7, #20]
 80074f8:	f7ff ff26 	bl	8007348 <prvUnlockQueue>
	}
 80074fc:	bf00      	nop
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08e      	sub	sp, #56	; 0x38
 8007508:	af04      	add	r7, sp, #16
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	623b      	str	r3, [r7, #32]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xTaskCreateStatic+0x46>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	61fb      	str	r3, [r7, #28]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800754a:	23a8      	movs	r3, #168	; 0xa8
 800754c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2ba8      	cmp	r3, #168	; 0xa8
 8007552:	d00a      	beq.n	800756a <xTaskCreateStatic+0x66>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61bb      	str	r3, [r7, #24]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800756a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01e      	beq.n	80075b0 <xTaskCreateStatic+0xac>
 8007572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01b      	beq.n	80075b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007580:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	2202      	movs	r2, #2
 8007586:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800758a:	2300      	movs	r3, #0
 800758c:	9303      	str	r3, [sp, #12]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	9302      	str	r3, [sp, #8]
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f850 	bl	8007648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075aa:	f000 f8f3 	bl	8007794 <prvAddNewTaskToReadyList>
 80075ae:	e001      	b.n	80075b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075b4:	697b      	ldr	r3, [r7, #20]
	}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3728      	adds	r7, #40	; 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b08c      	sub	sp, #48	; 0x30
 80075c2:	af04      	add	r7, sp, #16
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	603b      	str	r3, [r7, #0]
 80075ca:	4613      	mov	r3, r2
 80075cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075ce:	88fb      	ldrh	r3, [r7, #6]
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 fc58 	bl	8008e88 <pvPortMalloc>
 80075d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00e      	beq.n	80075fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075e0:	20a8      	movs	r0, #168	; 0xa8
 80075e2:	f001 fc51 	bl	8008e88 <pvPortMalloc>
 80075e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
 80075f4:	e005      	b.n	8007602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075f6:	6978      	ldr	r0, [r7, #20]
 80075f8:	f001 fc8c 	bl	8008f14 <vPortFree>
 80075fc:	e001      	b.n	8007602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d017      	beq.n	8007638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	2300      	movs	r3, #0
 8007614:	9303      	str	r3, [sp, #12]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	9302      	str	r3, [sp, #8]
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f80e 	bl	8007648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800762c:	69f8      	ldr	r0, [r7, #28]
 800762e:	f000 f8b1 	bl	8007794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
 8007636:	e002      	b.n	800763e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007638:	f04f 33ff 	mov.w	r3, #4294967295
 800763c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800763e:	69bb      	ldr	r3, [r7, #24]
	}
 8007640:	4618      	mov	r0, r3
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	461a      	mov	r2, r3
 8007660:	21a5      	movs	r1, #165	; 0xa5
 8007662:	f001 fd5f 	bl	8009124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007670:	3b01      	subs	r3, #1
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	617b      	str	r3, [r7, #20]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01f      	beq.n	80076e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	e012      	b.n	80076d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	4413      	add	r3, r2
 80076b2:	7819      	ldrb	r1, [r3, #0]
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	3334      	adds	r3, #52	; 0x34
 80076bc:	460a      	mov	r2, r1
 80076be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b0f      	cmp	r3, #15
 80076d6:	d9e9      	bls.n	80076ac <prvInitialiseNewTask+0x64>
 80076d8:	e000      	b.n	80076dc <prvInitialiseNewTask+0x94>
			{
				break;
 80076da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076e4:	e003      	b.n	80076ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	2b37      	cmp	r3, #55	; 0x37
 80076f2:	d901      	bls.n	80076f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076f4:	2337      	movs	r3, #55	; 0x37
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007702:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2200      	movs	r2, #0
 8007708:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff f978 	bl	8006a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	3318      	adds	r3, #24
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff f973 	bl	8006a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007732:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	2200      	movs	r2, #0
 8007740:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	3354      	adds	r3, #84	; 0x54
 8007748:	224c      	movs	r2, #76	; 0x4c
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fce9 	bl	8009124 <memset>
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	4a0c      	ldr	r2, [pc, #48]	; (8007788 <prvInitialiseNewTask+0x140>)
 8007756:	659a      	str	r2, [r3, #88]	; 0x58
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	4a0c      	ldr	r2, [pc, #48]	; (800778c <prvInitialiseNewTask+0x144>)
 800775c:	65da      	str	r2, [r3, #92]	; 0x5c
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	4a0b      	ldr	r2, [pc, #44]	; (8007790 <prvInitialiseNewTask+0x148>)
 8007762:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	69b8      	ldr	r0, [r7, #24]
 800776a:	f001 f941 	bl	80089f0 <pxPortInitialiseStack>
 800776e:	4602      	mov	r2, r0
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007780:	bf00      	nop
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20003504 	.word	0x20003504
 800778c:	2000356c 	.word	0x2000356c
 8007790:	200035d4 	.word	0x200035d4

08007794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800779c:	f001 fa52 	bl	8008c44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077a0:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	4a2c      	ldr	r2, [pc, #176]	; (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077aa:	4b2c      	ldr	r3, [pc, #176]	; (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077b2:	4a2a      	ldr	r2, [pc, #168]	; (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <prvAddNewTaskToReadyList+0xc4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d110      	bne.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077c0:	f000 fc26 	bl	8008010 <prvInitialiseTaskLists>
 80077c4:	e00d      	b.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077c6:	4b26      	ldr	r3, [pc, #152]	; (8007860 <prvAddNewTaskToReadyList+0xcc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ce:	4b23      	ldr	r3, [pc, #140]	; (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	429a      	cmp	r2, r3
 80077da:	d802      	bhi.n	80077e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077dc:	4a1f      	ldr	r2, [pc, #124]	; (800785c <prvAddNewTaskToReadyList+0xc8>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077e2:	4b20      	ldr	r3, [pc, #128]	; (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3301      	adds	r3, #1
 80077e8:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077ec:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <prvAddNewTaskToReadyList+0xd0>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <prvAddNewTaskToReadyList+0xd4>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <prvAddNewTaskToReadyList+0x74>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a18      	ldr	r2, [pc, #96]	; (8007868 <prvAddNewTaskToReadyList+0xd4>)
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4613      	mov	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4a15      	ldr	r2, [pc, #84]	; (800786c <prvAddNewTaskToReadyList+0xd8>)
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3304      	adds	r3, #4
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	f7ff f8fd 	bl	8006a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007824:	f001 fa3e 	bl	8008ca4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007828:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <prvAddNewTaskToReadyList+0xcc>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00e      	beq.n	800784e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007830:	4b0a      	ldr	r3, [pc, #40]	; (800785c <prvAddNewTaskToReadyList+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	429a      	cmp	r2, r3
 800783c:	d207      	bcs.n	800784e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <prvAddNewTaskToReadyList+0xdc>)
 8007840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20001394 	.word	0x20001394
 800785c:	20000ec0 	.word	0x20000ec0
 8007860:	200013a0 	.word	0x200013a0
 8007864:	200013b0 	.word	0x200013b0
 8007868:	2000139c 	.word	0x2000139c
 800786c:	20000ec4 	.word	0x20000ec4
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <vTaskDelay+0x60>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <vTaskDelay+0x30>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60bb      	str	r3, [r7, #8]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078a4:	f000 f88a 	bl	80079bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078a8:	2100      	movs	r1, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcfe 	bl	80082ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078b0:	f000 f892 	bl	80079d8 <xTaskResumeAll>
 80078b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078bc:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <vTaskDelay+0x64>)
 80078be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078cc:	bf00      	nop
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200013bc 	.word	0x200013bc
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	; 0x28
 80078e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ea:	463a      	mov	r2, r7
 80078ec:	1d39      	adds	r1, r7, #4
 80078ee:	f107 0308 	add.w	r3, r7, #8
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff f832 	bl	800695c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	9202      	str	r2, [sp, #8]
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	2300      	movs	r3, #0
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	2300      	movs	r3, #0
 8007908:	460a      	mov	r2, r1
 800790a:	4924      	ldr	r1, [pc, #144]	; (800799c <vTaskStartScheduler+0xc0>)
 800790c:	4824      	ldr	r0, [pc, #144]	; (80079a0 <vTaskStartScheduler+0xc4>)
 800790e:	f7ff fdf9 	bl	8007504 <xTaskCreateStatic>
 8007912:	4603      	mov	r3, r0
 8007914:	4a23      	ldr	r2, [pc, #140]	; (80079a4 <vTaskStartScheduler+0xc8>)
 8007916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007918:	4b22      	ldr	r3, [pc, #136]	; (80079a4 <vTaskStartScheduler+0xc8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e001      	b.n	800792a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d102      	bne.n	8007936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007930:	f000 fd10 	bl	8008354 <xTimerCreateTimerTask>
 8007934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d11b      	bne.n	8007974 <vTaskStartScheduler+0x98>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	613b      	str	r3, [r7, #16]
}
 800794e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007950:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <vTaskStartScheduler+0xcc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3354      	adds	r3, #84	; 0x54
 8007956:	4a15      	ldr	r2, [pc, #84]	; (80079ac <vTaskStartScheduler+0xd0>)
 8007958:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800795a:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <vTaskStartScheduler+0xd4>)
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <vTaskStartScheduler+0xd8>)
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007968:	4b13      	ldr	r3, [pc, #76]	; (80079b8 <vTaskStartScheduler+0xdc>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800796e:	f001 f8c7 	bl	8008b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007972:	e00e      	b.n	8007992 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d10a      	bne.n	8007992 <vTaskStartScheduler+0xb6>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	60fb      	str	r3, [r7, #12]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <vTaskStartScheduler+0xb4>
}
 8007992:	bf00      	nop
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	08009a34 	.word	0x08009a34
 80079a0:	08007fe1 	.word	0x08007fe1
 80079a4:	200013b8 	.word	0x200013b8
 80079a8:	20000ec0 	.word	0x20000ec0
 80079ac:	2000007c 	.word	0x2000007c
 80079b0:	200013b4 	.word	0x200013b4
 80079b4:	200013a0 	.word	0x200013a0
 80079b8:	20001398 	.word	0x20001398

080079bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <vTaskSuspendAll+0x18>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a03      	ldr	r2, [pc, #12]	; (80079d4 <vTaskSuspendAll+0x18>)
 80079c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079ca:	bf00      	nop
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	200013bc 	.word	0x200013bc

080079d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079e6:	4b42      	ldr	r3, [pc, #264]	; (8007af0 <xTaskResumeAll+0x118>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <xTaskResumeAll+0x2c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	603b      	str	r3, [r7, #0]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a04:	f001 f91e 	bl	8008c44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a08:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4a38      	ldr	r2, [pc, #224]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a12:	4b37      	ldr	r3, [pc, #220]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d162      	bne.n	8007ae0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a1a:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <xTaskResumeAll+0x11c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d05e      	beq.n	8007ae0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a22:	e02f      	b.n	8007a84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a24:	4b34      	ldr	r3, [pc, #208]	; (8007af8 <xTaskResumeAll+0x120>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3318      	adds	r3, #24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7ff f851 	bl	8006ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff f84c 	bl	8006ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a44:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <xTaskResumeAll+0x124>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d903      	bls.n	8007a54 <xTaskResumeAll+0x7c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a2a      	ldr	r2, [pc, #168]	; (8007afc <xTaskResumeAll+0x124>)
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <xTaskResumeAll+0x128>)
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe ffd7 	bl	8006a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <xTaskResumeAll+0x12c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a7e:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <xTaskResumeAll+0x130>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a84:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <xTaskResumeAll+0x120>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1cb      	bne.n	8007a24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a92:	f000 fb5f 	bl	8008154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a96:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <xTaskResumeAll+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d010      	beq.n	8007ac4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f000 f847 	bl	8007b34 <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <xTaskResumeAll+0x130>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f1      	bne.n	8007aa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <xTaskResumeAll+0x134>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <xTaskResumeAll+0x130>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <xTaskResumeAll+0x138>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ae0:	f001 f8e0 	bl	8008ca4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200013bc 	.word	0x200013bc
 8007af4:	20001394 	.word	0x20001394
 8007af8:	20001354 	.word	0x20001354
 8007afc:	2000139c 	.word	0x2000139c
 8007b00:	20000ec4 	.word	0x20000ec4
 8007b04:	20000ec0 	.word	0x20000ec0
 8007b08:	200013a8 	.word	0x200013a8
 8007b0c:	200013a4 	.word	0x200013a4
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <xTaskGetTickCount+0x1c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b20:	687b      	ldr	r3, [r7, #4]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20001398 	.word	0x20001398

08007b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3e:	4b4f      	ldr	r3, [pc, #316]	; (8007c7c <xTaskIncrementTick+0x148>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 808f 	bne.w	8007c66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b48:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <xTaskIncrementTick+0x14c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b50:	4a4b      	ldr	r2, [pc, #300]	; (8007c80 <xTaskIncrementTick+0x14c>)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d120      	bne.n	8007b9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b5c:	4b49      	ldr	r3, [pc, #292]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	603b      	str	r3, [r7, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xTaskIncrementTick+0x46>
 8007b7c:	4b41      	ldr	r3, [pc, #260]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <xTaskIncrementTick+0x154>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a3f      	ldr	r2, [pc, #252]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4a3f      	ldr	r2, [pc, #252]	; (8007c88 <xTaskIncrementTick+0x154>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <xTaskIncrementTick+0x158>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a3d      	ldr	r2, [pc, #244]	; (8007c8c <xTaskIncrementTick+0x158>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	f000 fadb 	bl	8008154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b9e:	4b3c      	ldr	r3, [pc, #240]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d349      	bcc.n	8007c3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba8:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb8:	601a      	str	r2, [r3, #0]
					break;
 8007bba:	e03f      	b.n	8007c3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbc:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d203      	bcs.n	8007bdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bd4:	4a2e      	ldr	r2, [pc, #184]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bda:	e02f      	b.n	8007c3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ff79 	bl	8006ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe ff70 	bl	8006ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <xTaskIncrementTick+0x160>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d903      	bls.n	8007c0c <xTaskIncrementTick+0xd8>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <xTaskIncrementTick+0x160>)
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4a1f      	ldr	r2, [pc, #124]	; (8007c98 <xTaskIncrementTick+0x164>)
 8007c1a:	441a      	add	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe fefb 	bl	8006a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <xTaskIncrementTick+0x168>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d3b8      	bcc.n	8007ba8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c3a:	e7b5      	b.n	8007ba8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c3c:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <xTaskIncrementTick+0x168>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	4915      	ldr	r1, [pc, #84]	; (8007c98 <xTaskIncrementTick+0x164>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d901      	bls.n	8007c58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <xTaskIncrementTick+0x16c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e004      	b.n	8007c70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTaskIncrementTick+0x170>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ca4 <xTaskIncrementTick+0x170>)
 8007c6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200013bc 	.word	0x200013bc
 8007c80:	20001398 	.word	0x20001398
 8007c84:	2000134c 	.word	0x2000134c
 8007c88:	20001350 	.word	0x20001350
 8007c8c:	200013ac 	.word	0x200013ac
 8007c90:	200013b4 	.word	0x200013b4
 8007c94:	2000139c 	.word	0x2000139c
 8007c98:	20000ec4 	.word	0x20000ec4
 8007c9c:	20000ec0 	.word	0x20000ec0
 8007ca0:	200013a8 	.word	0x200013a8
 8007ca4:	200013a4 	.word	0x200013a4

08007ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cae:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <vTaskSwitchContext+0xb0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cb6:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <vTaskSwitchContext+0xb4>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cbc:	e046      	b.n	8007d4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007cbe:	4b27      	ldr	r3, [pc, #156]	; (8007d5c <vTaskSwitchContext+0xb4>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b26      	ldr	r3, [pc, #152]	; (8007d60 <vTaskSwitchContext+0xb8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e010      	b.n	8007cee <vTaskSwitchContext+0x46>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <vTaskSwitchContext+0x3e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	491d      	ldr	r1, [pc, #116]	; (8007d64 <vTaskSwitchContext+0xbc>)
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0e4      	beq.n	8007ccc <vTaskSwitchContext+0x24>
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <vTaskSwitchContext+0xbc>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3308      	adds	r3, #8
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d104      	bne.n	8007d32 <vTaskSwitchContext+0x8a>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a0b      	ldr	r2, [pc, #44]	; (8007d68 <vTaskSwitchContext+0xc0>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <vTaskSwitchContext+0xb8>)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <vTaskSwitchContext+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3354      	adds	r3, #84	; 0x54
 8007d48:	4a08      	ldr	r2, [pc, #32]	; (8007d6c <vTaskSwitchContext+0xc4>)
 8007d4a:	6013      	str	r3, [r2, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	200013bc 	.word	0x200013bc
 8007d5c:	200013a8 	.word	0x200013a8
 8007d60:	2000139c 	.word	0x2000139c
 8007d64:	20000ec4 	.word	0x20000ec4
 8007d68:	20000ec0 	.word	0x20000ec0
 8007d6c:	2000007c 	.word	0x2000007c

08007d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10a      	bne.n	8007d96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	60fb      	str	r3, [r7, #12]
}
 8007d92:	bf00      	nop
 8007d94:	e7fe      	b.n	8007d94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <vTaskPlaceOnEventList+0x44>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3318      	adds	r3, #24
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7fe fe61 	bl	8006a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007da4:	2101      	movs	r1, #1
 8007da6:	6838      	ldr	r0, [r7, #0]
 8007da8:	f000 fa80 	bl	80082ac <prvAddCurrentTaskToDelayedList>
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000ec0 	.word	0x20000ec0

08007db8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	617b      	str	r3, [r7, #20]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <vTaskPlaceOnEventListRestricted+0x54>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3318      	adds	r3, #24
 8007de6:	4619      	mov	r1, r3
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7fe fe18 	bl	8006a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	68b8      	ldr	r0, [r7, #8]
 8007dfe:	f000 fa55 	bl	80082ac <prvAddCurrentTaskToDelayedList>
	}
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000ec0 	.word	0x20000ec0

08007e10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60fb      	str	r3, [r7, #12]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	3318      	adds	r3, #24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe fe49 	bl	8006ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e46:	4b1e      	ldr	r3, [pc, #120]	; (8007ec0 <xTaskRemoveFromEventList+0xb0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d11d      	bne.n	8007e8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fe40 	bl	8006ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <xTaskRemoveFromEventList+0xb4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d903      	bls.n	8007e6c <xTaskRemoveFromEventList+0x5c>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <xTaskRemoveFromEventList+0xb4>)
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <xTaskRemoveFromEventList+0xb8>)
 8007e7a:	441a      	add	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe fdcb 	bl	8006a1e <vListInsertEnd>
 8007e88:	e005      	b.n	8007e96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	3318      	adds	r3, #24
 8007e8e:	4619      	mov	r1, r3
 8007e90:	480e      	ldr	r0, [pc, #56]	; (8007ecc <xTaskRemoveFromEventList+0xbc>)
 8007e92:	f7fe fdc4 	bl	8006a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <xTaskRemoveFromEventList+0xc0>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d905      	bls.n	8007eb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <xTaskRemoveFromEventList+0xc4>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e001      	b.n	8007eb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eb4:	697b      	ldr	r3, [r7, #20]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	200013bc 	.word	0x200013bc
 8007ec4:	2000139c 	.word	0x2000139c
 8007ec8:	20000ec4 	.word	0x20000ec4
 8007ecc:	20001354 	.word	0x20001354
 8007ed0:	20000ec0 	.word	0x20000ec0
 8007ed4:	200013a8 	.word	0x200013a8

08007ed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <vTaskInternalSetTimeOutState+0x24>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <vTaskInternalSetTimeOutState+0x28>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	605a      	str	r2, [r3, #4]
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	200013ac 	.word	0x200013ac
 8007f00:	20001398 	.word	0x20001398

08007f04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	613b      	str	r3, [r7, #16]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f46:	f000 fe7d 	bl	8008c44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <xTaskCheckForTimeOut+0xbc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f62:	d102      	bne.n	8007f6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e023      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <xTaskCheckForTimeOut+0xc0>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d007      	beq.n	8007f86 <xTaskCheckForTimeOut+0x82>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	61fb      	str	r3, [r7, #28]
 8007f84:	e015      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d20b      	bcs.n	8007fa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ff9b 	bl	8007ed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e004      	b.n	8007fb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fb2:	f000 fe77 	bl	8008ca4 <vPortExitCritical>

	return xReturn;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20001398 	.word	0x20001398
 8007fc4:	200013ac 	.word	0x200013ac

08007fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <vTaskMissedYield+0x14>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	200013a8 	.word	0x200013a8

08007fe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fe8:	f000 f852 	bl	8008090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <prvIdleTask+0x28>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d9f9      	bls.n	8007fe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <prvIdleTask+0x2c>)
 8007ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008004:	e7f0      	b.n	8007fe8 <prvIdleTask+0x8>
 8008006:	bf00      	nop
 8008008:	20000ec4 	.word	0x20000ec4
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008016:	2300      	movs	r3, #0
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	e00c      	b.n	8008036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4a12      	ldr	r2, [pc, #72]	; (8008070 <prvInitialiseTaskLists+0x60>)
 8008028:	4413      	add	r3, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fcca 	bl	80069c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3301      	adds	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b37      	cmp	r3, #55	; 0x37
 800803a:	d9ef      	bls.n	800801c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800803c:	480d      	ldr	r0, [pc, #52]	; (8008074 <prvInitialiseTaskLists+0x64>)
 800803e:	f7fe fcc1 	bl	80069c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008042:	480d      	ldr	r0, [pc, #52]	; (8008078 <prvInitialiseTaskLists+0x68>)
 8008044:	f7fe fcbe 	bl	80069c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008048:	480c      	ldr	r0, [pc, #48]	; (800807c <prvInitialiseTaskLists+0x6c>)
 800804a:	f7fe fcbb 	bl	80069c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800804e:	480c      	ldr	r0, [pc, #48]	; (8008080 <prvInitialiseTaskLists+0x70>)
 8008050:	f7fe fcb8 	bl	80069c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008054:	480b      	ldr	r0, [pc, #44]	; (8008084 <prvInitialiseTaskLists+0x74>)
 8008056:	f7fe fcb5 	bl	80069c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800805a:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <prvInitialiseTaskLists+0x78>)
 800805c:	4a05      	ldr	r2, [pc, #20]	; (8008074 <prvInitialiseTaskLists+0x64>)
 800805e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvInitialiseTaskLists+0x7c>)
 8008062:	4a05      	ldr	r2, [pc, #20]	; (8008078 <prvInitialiseTaskLists+0x68>)
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000ec4 	.word	0x20000ec4
 8008074:	20001324 	.word	0x20001324
 8008078:	20001338 	.word	0x20001338
 800807c:	20001354 	.word	0x20001354
 8008080:	20001368 	.word	0x20001368
 8008084:	20001380 	.word	0x20001380
 8008088:	2000134c 	.word	0x2000134c
 800808c:	20001350 	.word	0x20001350

08008090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008096:	e019      	b.n	80080cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008098:	f000 fdd4 	bl	8008c44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809c:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <prvCheckTasksWaitingTermination+0x50>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd15 	bl	8006ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ae:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <prvCheckTasksWaitingTermination+0x54>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	4a0b      	ldr	r2, [pc, #44]	; (80080e4 <prvCheckTasksWaitingTermination+0x54>)
 80080b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080b8:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <prvCheckTasksWaitingTermination+0x58>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4a0a      	ldr	r2, [pc, #40]	; (80080e8 <prvCheckTasksWaitingTermination+0x58>)
 80080c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080c2:	f000 fdef 	bl	8008ca4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f810 	bl	80080ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <prvCheckTasksWaitingTermination+0x58>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e1      	bne.n	8008098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20001368 	.word	0x20001368
 80080e4:	20001394 	.word	0x20001394
 80080e8:	2000137c 	.word	0x2000137c

080080ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3354      	adds	r3, #84	; 0x54
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 f81b 	bl	8009134 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008104:	2b00      	cmp	r3, #0
 8008106:	d108      	bne.n	800811a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810c:	4618      	mov	r0, r3
 800810e:	f000 ff01 	bl	8008f14 <vPortFree>
				vPortFree( pxTCB );
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fefe 	bl	8008f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008118:	e018      	b.n	800814c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008120:	2b01      	cmp	r3, #1
 8008122:	d103      	bne.n	800812c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fef5 	bl	8008f14 <vPortFree>
	}
 800812a:	e00f      	b.n	800814c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008132:	2b02      	cmp	r3, #2
 8008134:	d00a      	beq.n	800814c <prvDeleteTCB+0x60>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60fb      	str	r3, [r7, #12]
}
 8008148:	bf00      	nop
 800814a:	e7fe      	b.n	800814a <prvDeleteTCB+0x5e>
	}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800815a:	4b0c      	ldr	r3, [pc, #48]	; (800818c <prvResetNextTaskUnblockTime+0x38>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d104      	bne.n	800816e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvResetNextTaskUnblockTime+0x3c>)
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800816c:	e008      	b.n	8008180 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <prvResetNextTaskUnblockTime+0x38>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	4a04      	ldr	r2, [pc, #16]	; (8008190 <prvResetNextTaskUnblockTime+0x3c>)
 800817e:	6013      	str	r3, [r2, #0]
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	2000134c 	.word	0x2000134c
 8008190:	200013b4 	.word	0x200013b4

08008194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <xTaskGetSchedulerState+0x34>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a2:	2301      	movs	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	e008      	b.n	80081ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <xTaskGetSchedulerState+0x38>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b0:	2302      	movs	r3, #2
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e001      	b.n	80081ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ba:	687b      	ldr	r3, [r7, #4]
	}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	200013a0 	.word	0x200013a0
 80081cc:	200013bc 	.word	0x200013bc

080081d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081dc:	2300      	movs	r3, #0
 80081de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d056      	beq.n	8008294 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081e6:	4b2e      	ldr	r3, [pc, #184]	; (80082a0 <xTaskPriorityDisinherit+0xd0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d00a      	beq.n	8008206 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	60fb      	str	r3, [r7, #12]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60bb      	str	r3, [r7, #8]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	1e5a      	subs	r2, r3, #1
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	429a      	cmp	r2, r3
 8008238:	d02c      	beq.n	8008294 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823e:	2b00      	cmp	r3, #0
 8008240:	d128      	bne.n	8008294 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3304      	adds	r3, #4
 8008246:	4618      	mov	r0, r3
 8008248:	f7fe fc46 	bl	8006ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <xTaskPriorityDisinherit+0xd4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d903      	bls.n	8008274 <xTaskPriorityDisinherit+0xa4>
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <xTaskPriorityDisinherit+0xd4>)
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <xTaskPriorityDisinherit+0xd8>)
 8008282:	441a      	add	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	3304      	adds	r3, #4
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f7fe fbc7 	bl	8006a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008294:	697b      	ldr	r3, [r7, #20]
	}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000ec0 	.word	0x20000ec0
 80082a4:	2000139c 	.word	0x2000139c
 80082a8:	20000ec4 	.word	0x20000ec4

080082ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082b6:	4b21      	ldr	r3, [pc, #132]	; (800833c <prvAddCurrentTaskToDelayedList+0x90>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082bc:	4b20      	ldr	r3, [pc, #128]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3304      	adds	r3, #4
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fc08 	bl	8006ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ce:	d10a      	bne.n	80082e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4819      	ldr	r0, [pc, #100]	; (8008344 <prvAddCurrentTaskToDelayedList+0x98>)
 80082e0:	f7fe fb9d 	bl	8006a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082e4:	e026      	b.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4413      	add	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082ee:	4b14      	ldr	r3, [pc, #80]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d209      	bcs.n	8008312 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f7fe fbab 	bl	8006a66 <vListInsert>
}
 8008310:	e010      	b.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008312:	4b0e      	ldr	r3, [pc, #56]	; (800834c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <prvAddCurrentTaskToDelayedList+0x94>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f7fe fba1 	bl	8006a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008324:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	429a      	cmp	r2, r3
 800832c:	d202      	bcs.n	8008334 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800832e:	4a08      	ldr	r2, [pc, #32]	; (8008350 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6013      	str	r3, [r2, #0]
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20001398 	.word	0x20001398
 8008340:	20000ec0 	.word	0x20000ec0
 8008344:	20001380 	.word	0x20001380
 8008348:	20001350 	.word	0x20001350
 800834c:	2000134c 	.word	0x2000134c
 8008350:	200013b4 	.word	0x200013b4

08008354 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	; 0x28
 8008358:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800835e:	f000 fb07 	bl	8008970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <xTimerCreateTimerTask+0x80>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d021      	beq.n	80083ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008372:	1d3a      	adds	r2, r7, #4
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	f107 030c 	add.w	r3, r7, #12
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fb07 	bl	8006990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	9202      	str	r2, [sp, #8]
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	2302      	movs	r3, #2
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2300      	movs	r3, #0
 8008392:	460a      	mov	r2, r1
 8008394:	4910      	ldr	r1, [pc, #64]	; (80083d8 <xTimerCreateTimerTask+0x84>)
 8008396:	4811      	ldr	r0, [pc, #68]	; (80083dc <xTimerCreateTimerTask+0x88>)
 8008398:	f7ff f8b4 	bl	8007504 <xTaskCreateStatic>
 800839c:	4603      	mov	r3, r0
 800839e:	4a10      	ldr	r2, [pc, #64]	; (80083e0 <xTimerCreateTimerTask+0x8c>)
 80083a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083a2:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <xTimerCreateTimerTask+0x8c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083aa:	2301      	movs	r3, #1
 80083ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	613b      	str	r3, [r7, #16]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083ca:	697b      	ldr	r3, [r7, #20]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200013f0 	.word	0x200013f0
 80083d8:	08009a3c 	.word	0x08009a3c
 80083dc:	08008519 	.word	0x08008519
 80083e0:	200013f4 	.word	0x200013f4

080083e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	623b      	str	r3, [r7, #32]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008412:	4b1a      	ldr	r3, [pc, #104]	; (800847c <xTimerGenericCommand+0x98>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d02a      	beq.n	8008470 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b05      	cmp	r3, #5
 800842a:	dc18      	bgt.n	800845e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800842c:	f7ff feb2 	bl	8008194 <xTaskGetSchedulerState>
 8008430:	4603      	mov	r3, r0
 8008432:	2b02      	cmp	r3, #2
 8008434:	d109      	bne.n	800844a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008436:	4b11      	ldr	r3, [pc, #68]	; (800847c <xTimerGenericCommand+0x98>)
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	f107 0110 	add.w	r1, r7, #16
 800843e:	2300      	movs	r3, #0
 8008440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008442:	f7fe fc77 	bl	8006d34 <xQueueGenericSend>
 8008446:	6278      	str	r0, [r7, #36]	; 0x24
 8008448:	e012      	b.n	8008470 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <xTimerGenericCommand+0x98>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f107 0110 	add.w	r1, r7, #16
 8008452:	2300      	movs	r3, #0
 8008454:	2200      	movs	r2, #0
 8008456:	f7fe fc6d 	bl	8006d34 <xQueueGenericSend>
 800845a:	6278      	str	r0, [r7, #36]	; 0x24
 800845c:	e008      	b.n	8008470 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <xTimerGenericCommand+0x98>)
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	f107 0110 	add.w	r1, r7, #16
 8008466:	2300      	movs	r3, #0
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	f7fe fd61 	bl	8006f30 <xQueueGenericSendFromISR>
 800846e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008472:	4618      	mov	r0, r3
 8008474:	3728      	adds	r7, #40	; 0x28
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	200013f0 	.word	0x200013f0

08008480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b088      	sub	sp, #32
 8008484:	af02      	add	r7, sp, #8
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848a:	4b22      	ldr	r3, [pc, #136]	; (8008514 <prvProcessExpiredTimer+0x94>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	3304      	adds	r3, #4
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe fb1d 	bl	8006ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d022      	beq.n	80084f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	699a      	ldr	r2, [r3, #24]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	18d1      	adds	r1, r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	6978      	ldr	r0, [r7, #20]
 80084ba:	f000 f8d1 	bl	8008660 <prvInsertTimerInActiveList>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01f      	beq.n	8008504 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c4:	2300      	movs	r3, #0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	2300      	movs	r3, #0
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	2100      	movs	r1, #0
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7ff ff88 	bl	80083e4 <xTimerGenericCommand>
 80084d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d113      	bne.n	8008504 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60fb      	str	r3, [r7, #12]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	6978      	ldr	r0, [r7, #20]
 800850a:	4798      	blx	r3
}
 800850c:	bf00      	nop
 800850e:	3718      	adds	r7, #24
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	200013e8 	.word	0x200013e8

08008518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f857 	bl	80085d8 <prvGetNextExpireTime>
 800852a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4619      	mov	r1, r3
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f803 	bl	800853c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008536:	f000 f8d5 	bl	80086e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853a:	e7f1      	b.n	8008520 <prvTimerTask+0x8>

0800853c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008546:	f7ff fa39 	bl	80079bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f866 	bl	8008620 <prvSampleTimeNow>
 8008554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d130      	bne.n	80085be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <prvProcessTimerOrBlockTask+0x3c>
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	429a      	cmp	r2, r3
 8008568:	d806      	bhi.n	8008578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800856a:	f7ff fa35 	bl	80079d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ff85 	bl	8008480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008576:	e024      	b.n	80085c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d008      	beq.n	8008590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <prvProcessTimerOrBlockTask+0x90>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <prvProcessTimerOrBlockTask+0x50>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <prvProcessTimerOrBlockTask+0x52>
 800858c:	2300      	movs	r3, #0
 800858e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008590:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <prvProcessTimerOrBlockTask+0x94>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	f7fe ff7d 	bl	800749c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085a2:	f7ff fa19 	bl	80079d8 <xTaskResumeAll>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <prvProcessTimerOrBlockTask+0x98>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
}
 80085bc:	e001      	b.n	80085c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085be:	f7ff fa0b 	bl	80079d8 <xTaskResumeAll>
}
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200013ec 	.word	0x200013ec
 80085d0:	200013f0 	.word	0x200013f0
 80085d4:	e000ed04 	.word	0xe000ed04

080085d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085e0:	4b0e      	ldr	r3, [pc, #56]	; (800861c <prvGetNextExpireTime+0x44>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <prvGetNextExpireTime+0x16>
 80085ea:	2201      	movs	r2, #1
 80085ec:	e000      	b.n	80085f0 <prvGetNextExpireTime+0x18>
 80085ee:	2200      	movs	r2, #0
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d105      	bne.n	8008608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <prvGetNextExpireTime+0x44>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e001      	b.n	800860c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	200013e8 	.word	0x200013e8

08008620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008628:	f7ff fa74 	bl	8007b14 <xTaskGetTickCount>
 800862c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <prvSampleTimeNow+0x3c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d205      	bcs.n	8008644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008638:	f000 f936 	bl	80088a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	e002      	b.n	800864a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800864a:	4a04      	ldr	r2, [pc, #16]	; (800865c <prvSampleTimeNow+0x3c>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008650:	68fb      	ldr	r3, [r7, #12]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200013f8 	.word	0x200013f8

08008660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d812      	bhi.n	80086ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	1ad2      	subs	r2, r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	429a      	cmp	r2, r3
 8008692:	d302      	bcc.n	800869a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e01b      	b.n	80086d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <prvInsertTimerInActiveList+0x7c>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7fe f9de 	bl	8006a66 <vListInsert>
 80086aa:	e012      	b.n	80086d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d206      	bcs.n	80086c2 <prvInsertTimerInActiveList+0x62>
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d302      	bcc.n	80086c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e007      	b.n	80086d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086c2:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <prvInsertTimerInActiveList+0x80>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fe f9ca 	bl	8006a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086d2:	697b      	ldr	r3, [r7, #20]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200013ec 	.word	0x200013ec
 80086e0:	200013e8 	.word	0x200013e8

080086e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08e      	sub	sp, #56	; 0x38
 80086e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ea:	e0ca      	b.n	8008882 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da18      	bge.n	8008724 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086f2:	1d3b      	adds	r3, r7, #4
 80086f4:	3304      	adds	r3, #4
 80086f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800871a:	6850      	ldr	r0, [r2, #4]
 800871c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800871e:	6892      	ldr	r2, [r2, #8]
 8008720:	4611      	mov	r1, r2
 8008722:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f2c0 80ab 	blt.w	8008882 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873a:	3304      	adds	r3, #4
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe f9cb 	bl	8006ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008742:	463b      	mov	r3, r7
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff ff6b 	bl	8008620 <prvSampleTimeNow>
 800874a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b09      	cmp	r3, #9
 8008750:	f200 8096 	bhi.w	8008880 <prvProcessReceivedCommands+0x19c>
 8008754:	a201      	add	r2, pc, #4	; (adr r2, 800875c <prvProcessReceivedCommands+0x78>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	08008785 	.word	0x08008785
 8008760:	08008785 	.word	0x08008785
 8008764:	08008785 	.word	0x08008785
 8008768:	080087f9 	.word	0x080087f9
 800876c:	0800880d 	.word	0x0800880d
 8008770:	08008857 	.word	0x08008857
 8008774:	08008785 	.word	0x08008785
 8008778:	08008785 	.word	0x08008785
 800877c:	080087f9 	.word	0x080087f9
 8008780:	0800880d 	.word	0x0800880d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800878a:	f043 0301 	orr.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	18d1      	adds	r1, r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087a4:	f7ff ff5c 	bl	8008660 <prvInsertTimerInActiveList>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d069      	beq.n	8008882 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d05e      	beq.n	8008882 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	441a      	add	r2, r3
 80087cc:	2300      	movs	r3, #0
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	2300      	movs	r3, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d6:	f7ff fe05 	bl	80083e4 <xTimerGenericCommand>
 80087da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d14f      	bne.n	8008882 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	61bb      	str	r3, [r7, #24]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	b2da      	uxtb	r2, r3
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800880a:	e03a      	b.n	8008882 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008812:	f043 0301 	orr.w	r3, r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	617b      	str	r3, [r7, #20]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	18d1      	adds	r1, r2, r3
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008850:	f7ff ff06 	bl	8008660 <prvInsertTimerInActiveList>
					break;
 8008854:	e015      	b.n	8008882 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 fb55 	bl	8008f14 <vPortFree>
 800886a:	e00a      	b.n	8008882 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	b2da      	uxtb	r2, r3
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800887e:	e000      	b.n	8008882 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008880:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008882:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <prvProcessReceivedCommands+0x1c0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	1d39      	adds	r1, r7, #4
 8008888:	2200      	movs	r2, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fbec 	bl	8007068 <xQueueReceive>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	f47f af2a 	bne.w	80086ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3730      	adds	r7, #48	; 0x30
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200013f0 	.word	0x200013f0

080088a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ae:	e048      	b.n	8008942 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088b0:	4b2d      	ldr	r3, [pc, #180]	; (8008968 <prvSwitchTimerLists+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ba:	4b2b      	ldr	r3, [pc, #172]	; (8008968 <prvSwitchTimerLists+0xc0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe f905 	bl	8006ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d02e      	beq.n	8008942 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4413      	add	r3, r2
 80088ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d90e      	bls.n	8008914 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008902:	4b19      	ldr	r3, [pc, #100]	; (8008968 <prvSwitchTimerLists+0xc0>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7fe f8aa 	bl	8006a66 <vListInsert>
 8008912:	e016      	b.n	8008942 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008914:	2300      	movs	r3, #0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	2300      	movs	r3, #0
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	2100      	movs	r1, #0
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fd60 	bl	80083e4 <xTimerGenericCommand>
 8008924:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	603b      	str	r3, [r7, #0]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <prvSwitchTimerLists+0xc0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1b1      	bne.n	80088b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <prvSwitchTimerLists+0xc0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <prvSwitchTimerLists+0xc4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a04      	ldr	r2, [pc, #16]	; (8008968 <prvSwitchTimerLists+0xc0>)
 8008958:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800895a:	4a04      	ldr	r2, [pc, #16]	; (800896c <prvSwitchTimerLists+0xc4>)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	200013e8 	.word	0x200013e8
 800896c:	200013ec 	.word	0x200013ec

08008970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008976:	f000 f965 	bl	8008c44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800897a:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <prvCheckForValidListAndQueue+0x60>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d120      	bne.n	80089c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008982:	4814      	ldr	r0, [pc, #80]	; (80089d4 <prvCheckForValidListAndQueue+0x64>)
 8008984:	f7fe f81e 	bl	80069c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008988:	4813      	ldr	r0, [pc, #76]	; (80089d8 <prvCheckForValidListAndQueue+0x68>)
 800898a:	f7fe f81b 	bl	80069c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <prvCheckForValidListAndQueue+0x6c>)
 8008990:	4a10      	ldr	r2, [pc, #64]	; (80089d4 <prvCheckForValidListAndQueue+0x64>)
 8008992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <prvCheckForValidListAndQueue+0x70>)
 8008996:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <prvCheckForValidListAndQueue+0x68>)
 8008998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800899a:	2300      	movs	r3, #0
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	4b11      	ldr	r3, [pc, #68]	; (80089e4 <prvCheckForValidListAndQueue+0x74>)
 80089a0:	4a11      	ldr	r2, [pc, #68]	; (80089e8 <prvCheckForValidListAndQueue+0x78>)
 80089a2:	2110      	movs	r1, #16
 80089a4:	200a      	movs	r0, #10
 80089a6:	f7fe f929 	bl	8006bfc <xQueueGenericCreateStatic>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4a08      	ldr	r2, [pc, #32]	; (80089d0 <prvCheckForValidListAndQueue+0x60>)
 80089ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089b0:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <prvCheckForValidListAndQueue+0x60>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089b8:	4b05      	ldr	r3, [pc, #20]	; (80089d0 <prvCheckForValidListAndQueue+0x60>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	490b      	ldr	r1, [pc, #44]	; (80089ec <prvCheckForValidListAndQueue+0x7c>)
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fd42 	bl	8007448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089c4:	f000 f96e 	bl	8008ca4 <vPortExitCritical>
}
 80089c8:	bf00      	nop
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	200013f0 	.word	0x200013f0
 80089d4:	200013c0 	.word	0x200013c0
 80089d8:	200013d4 	.word	0x200013d4
 80089dc:	200013e8 	.word	0x200013e8
 80089e0:	200013ec 	.word	0x200013ec
 80089e4:	2000149c 	.word	0x2000149c
 80089e8:	200013fc 	.word	0x200013fc
 80089ec:	08009a44 	.word	0x08009a44

080089f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b04      	subs	r3, #4
 8008a00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f023 0201 	bic.w	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a20:	4a0c      	ldr	r2, [pc, #48]	; (8008a54 <pxPortInitialiseStack+0x64>)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b14      	subs	r3, #20
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3b04      	subs	r3, #4
 8008a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f06f 0202 	mvn.w	r2, #2
 8008a3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3b20      	subs	r3, #32
 8008a44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a46:	68fb      	ldr	r3, [r7, #12]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	08008a59 	.word	0x08008a59

08008a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a62:	4b12      	ldr	r3, [pc, #72]	; (8008aac <prvTaskExitError+0x54>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d00a      	beq.n	8008a82 <prvTaskExitError+0x2a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60fb      	str	r3, [r7, #12]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <prvTaskExitError+0x28>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60bb      	str	r3, [r7, #8]
}
 8008a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a96:	bf00      	nop
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0fc      	beq.n	8008a98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	2000002c 	.word	0x2000002c

08008ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <pxCurrentTCBConst2>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	6808      	ldr	r0, [r1, #0]
 8008ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	f380 8809 	msr	PSP, r0
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8811 	msr	BASEPRI, r0
 8008aca:	4770      	bx	lr
 8008acc:	f3af 8000 	nop.w

08008ad0 <pxCurrentTCBConst2>:
 8008ad0:	20000ec0 	.word	0x20000ec0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ad8:	4808      	ldr	r0, [pc, #32]	; (8008afc <prvPortStartFirstTask+0x24>)
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	6800      	ldr	r0, [r0, #0]
 8008ade:	f380 8808 	msr	MSP, r0
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8814 	msr	CONTROL, r0
 8008aea:	b662      	cpsie	i
 8008aec:	b661      	cpsie	f
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	df00      	svc	0
 8008af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008afa:	bf00      	nop
 8008afc:	e000ed08 	.word	0xe000ed08

08008b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b06:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a46      	ldr	r2, [pc, #280]	; (8008c24 <xPortStartScheduler+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10a      	bne.n	8008b26 <xPortStartScheduler+0x26>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	613b      	str	r3, [r7, #16]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b26:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <xPortStartScheduler+0x120>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <xPortStartScheduler+0x128>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10a      	bne.n	8008b46 <xPortStartScheduler+0x46>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60fb      	str	r3, [r7, #12]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b46:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <xPortStartScheduler+0x12c>)
 8008b48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <xPortStartScheduler+0x130>)
 8008b6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b6e:	4b31      	ldr	r3, [pc, #196]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b74:	e009      	b.n	8008b8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b76:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4a2d      	ldr	r2, [pc, #180]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d0ef      	beq.n	8008b76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b96:	4b27      	ldr	r3, [pc, #156]	; (8008c34 <xPortStartScheduler+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f1c3 0307 	rsb	r3, r3, #7
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d00a      	beq.n	8008bb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	60bb      	str	r3, [r7, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	e7fe      	b.n	8008bb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bb8:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bc2:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bca:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <xPortStartScheduler+0x134>)
 8008bcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <xPortStartScheduler+0x138>)
 8008bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008be0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008be2:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a14      	ldr	r2, [pc, #80]	; (8008c38 <xPortStartScheduler+0x138>)
 8008be8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bee:	f000 f8dd 	bl	8008dac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bf2:	4b12      	ldr	r3, [pc, #72]	; (8008c3c <xPortStartScheduler+0x13c>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bf8:	f000 f8fc 	bl	8008df4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bfc:	4b10      	ldr	r3, [pc, #64]	; (8008c40 <xPortStartScheduler+0x140>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <xPortStartScheduler+0x140>)
 8008c02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c08:	f7ff ff66 	bl	8008ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c0c:	f7ff f84c 	bl	8007ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8008c10:	f7ff ff22 	bl	8008a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	e000ed00 	.word	0xe000ed00
 8008c24:	410fc271 	.word	0x410fc271
 8008c28:	410fc270 	.word	0x410fc270
 8008c2c:	e000e400 	.word	0xe000e400
 8008c30:	200014ec 	.word	0x200014ec
 8008c34:	200014f0 	.word	0x200014f0
 8008c38:	e000ed20 	.word	0xe000ed20
 8008c3c:	2000002c 	.word	0x2000002c
 8008c40:	e000ef34 	.word	0xe000ef34

08008c44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	607b      	str	r3, [r7, #4]
}
 8008c5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3301      	adds	r3, #1
 8008c64:	4a0d      	ldr	r2, [pc, #52]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c68:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <vPortEnterCritical+0x58>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10f      	bne.n	8008c90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <vPortEnterCritical+0x5c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	603b      	str	r3, [r7, #0]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <vPortEnterCritical+0x4a>
	}
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	2000002c 	.word	0x2000002c
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008caa:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <vPortExitCritical+0x24>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	607b      	str	r3, [r7, #4]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4a09      	ldr	r2, [pc, #36]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <vPortExitCritical+0x50>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <vPortExitCritical+0x42>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f383 8811 	msr	BASEPRI, r3
}
 8008ce4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	2000002c 	.word	0x2000002c
	...

08008d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d00:	f3ef 8009 	mrs	r0, PSP
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <pxCurrentTCBConst>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f01e 0f10 	tst.w	lr, #16
 8008d10:	bf08      	it	eq
 8008d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	6010      	str	r0, [r2, #0]
 8008d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d24:	f380 8811 	msr	BASEPRI, r0
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f7fe ffba 	bl	8007ca8 <vTaskSwitchContext>
 8008d34:	f04f 0000 	mov.w	r0, #0
 8008d38:	f380 8811 	msr	BASEPRI, r0
 8008d3c:	bc09      	pop	{r0, r3}
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	6808      	ldr	r0, [r1, #0]
 8008d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d46:	f01e 0f10 	tst.w	lr, #16
 8008d4a:	bf08      	it	eq
 8008d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d50:	f380 8809 	msr	PSP, r0
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	f3af 8000 	nop.w

08008d60 <pxCurrentTCBConst>:
 8008d60:	20000ec0 	.word	0x20000ec0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d64:	bf00      	nop
 8008d66:	bf00      	nop

08008d68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d82:	f7fe fed7 	bl	8007b34 <xTaskIncrementTick>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <xPortSysTickHandler+0x40>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f383 8811 	msr	BASEPRI, r3
}
 8008d9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008db6:	4b0b      	ldr	r3, [pc, #44]	; (8008de4 <vPortSetupTimerInterrupt+0x38>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <vPortSetupTimerInterrupt+0x3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <vPortSetupTimerInterrupt+0x40>)
 8008dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc6:	099b      	lsrs	r3, r3, #6
 8008dc8:	4a09      	ldr	r2, [pc, #36]	; (8008df0 <vPortSetupTimerInterrupt+0x44>)
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <vPortSetupTimerInterrupt+0x34>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	e000e010 	.word	0xe000e010
 8008de4:	e000e018 	.word	0xe000e018
 8008de8:	20000018 	.word	0x20000018
 8008dec:	10624dd3 	.word	0x10624dd3
 8008df0:	e000e014 	.word	0xe000e014

08008df4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008df4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e04 <vPortEnableVFP+0x10>
 8008df8:	6801      	ldr	r1, [r0, #0]
 8008dfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dfe:	6001      	str	r1, [r0, #0]
 8008e00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e02:	bf00      	nop
 8008e04:	e000ed88 	.word	0xe000ed88

08008e08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
 8008e12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b0f      	cmp	r3, #15
 8008e18:	d914      	bls.n	8008e44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e1a:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <vPortValidateInterruptPriority+0x70>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <vPortValidateInterruptPriority+0x74>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	7afa      	ldrb	r2, [r7, #11]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d20a      	bcs.n	8008e44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	607b      	str	r3, [r7, #4]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <vPortValidateInterruptPriority+0x78>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <vPortValidateInterruptPriority+0x7c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d90a      	bls.n	8008e6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	603b      	str	r3, [r7, #0]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <vPortValidateInterruptPriority+0x60>
	}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	e000e3f0 	.word	0xe000e3f0
 8008e7c:	200014ec 	.word	0x200014ec
 8008e80:	e000ed0c 	.word	0xe000ed0c
 8008e84:	200014f0 	.word	0x200014f0

08008e88 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f023 0307 	bic.w	r3, r3, #7
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8008ea8:	f7fe fd88 	bl	80079bc <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8008eac:	4b16      	ldr	r3, [pc, #88]	; (8008f08 <pvPortMalloc+0x80>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008eb4:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <pvPortMalloc+0x84>)
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <pvPortMalloc+0x80>)
 8008ebe:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008ec0:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <pvPortMalloc+0x88>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d813      	bhi.n	8008ef8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <pvPortMalloc+0x88>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	441a      	add	r2, r3
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <pvPortMalloc+0x88>)
 8008eda:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d90b      	bls.n	8008ef8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8008ee0:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <pvPortMalloc+0x80>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <pvPortMalloc+0x88>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4413      	add	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8008eec:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <pvPortMalloc+0x88>)
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	4a06      	ldr	r2, [pc, #24]	; (8008f10 <pvPortMalloc+0x88>)
 8008ef6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ef8:	f7fe fd6e 	bl	80079d8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200034f8 	.word	0x200034f8
 8008f0c:	200014fc 	.word	0x200014fc
 8008f10:	200034f4 	.word	0x200034f4

08008f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <vPortFree+0x24>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	60fb      	str	r3, [r7, #12]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <vPortFree+0x22>
}
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <malloc>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <malloc+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f000 b82b 	b.w	8008fa4 <_malloc_r>
 8008f4e:	bf00      	nop
 8008f50:	2000007c 	.word	0x2000007c

08008f54 <free>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <free+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 b98b 	b.w	8009274 <_free_r>
 8008f5e:	bf00      	nop
 8008f60:	2000007c 	.word	0x2000007c

08008f64 <sbrk_aligned>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	4e0e      	ldr	r6, [pc, #56]	; (8008fa0 <sbrk_aligned+0x3c>)
 8008f68:	460c      	mov	r4, r1
 8008f6a:	6831      	ldr	r1, [r6, #0]
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	b911      	cbnz	r1, 8008f76 <sbrk_aligned+0x12>
 8008f70:	f000 f936 	bl	80091e0 <_sbrk_r>
 8008f74:	6030      	str	r0, [r6, #0]
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f000 f931 	bl	80091e0 <_sbrk_r>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	d00a      	beq.n	8008f98 <sbrk_aligned+0x34>
 8008f82:	1cc4      	adds	r4, r0, #3
 8008f84:	f024 0403 	bic.w	r4, r4, #3
 8008f88:	42a0      	cmp	r0, r4
 8008f8a:	d007      	beq.n	8008f9c <sbrk_aligned+0x38>
 8008f8c:	1a21      	subs	r1, r4, r0
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f926 	bl	80091e0 <_sbrk_r>
 8008f94:	3001      	adds	r0, #1
 8008f96:	d101      	bne.n	8008f9c <sbrk_aligned+0x38>
 8008f98:	f04f 34ff 	mov.w	r4, #4294967295
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	20003500 	.word	0x20003500

08008fa4 <_malloc_r>:
 8008fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa8:	1ccd      	adds	r5, r1, #3
 8008faa:	f025 0503 	bic.w	r5, r5, #3
 8008fae:	3508      	adds	r5, #8
 8008fb0:	2d0c      	cmp	r5, #12
 8008fb2:	bf38      	it	cc
 8008fb4:	250c      	movcc	r5, #12
 8008fb6:	2d00      	cmp	r5, #0
 8008fb8:	4607      	mov	r7, r0
 8008fba:	db01      	blt.n	8008fc0 <_malloc_r+0x1c>
 8008fbc:	42a9      	cmp	r1, r5
 8008fbe:	d905      	bls.n	8008fcc <_malloc_r+0x28>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090a0 <_malloc_r+0xfc>
 8008fd0:	f000 f868 	bl	80090a4 <__malloc_lock>
 8008fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fd8:	461c      	mov	r4, r3
 8008fda:	bb5c      	cbnz	r4, 8009034 <_malloc_r+0x90>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f7ff ffc0 	bl	8008f64 <sbrk_aligned>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	d155      	bne.n	8009096 <_malloc_r+0xf2>
 8008fea:	f8d8 4000 	ldr.w	r4, [r8]
 8008fee:	4626      	mov	r6, r4
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	d145      	bne.n	8009080 <_malloc_r+0xdc>
 8008ff4:	2c00      	cmp	r4, #0
 8008ff6:	d048      	beq.n	800908a <_malloc_r+0xe6>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4638      	mov	r0, r7
 8008ffe:	eb04 0903 	add.w	r9, r4, r3
 8009002:	f000 f8ed 	bl	80091e0 <_sbrk_r>
 8009006:	4581      	cmp	r9, r0
 8009008:	d13f      	bne.n	800908a <_malloc_r+0xe6>
 800900a:	6821      	ldr	r1, [r4, #0]
 800900c:	1a6d      	subs	r5, r5, r1
 800900e:	4629      	mov	r1, r5
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff ffa7 	bl	8008f64 <sbrk_aligned>
 8009016:	3001      	adds	r0, #1
 8009018:	d037      	beq.n	800908a <_malloc_r+0xe6>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	442b      	add	r3, r5
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	f8d8 3000 	ldr.w	r3, [r8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d038      	beq.n	800909a <_malloc_r+0xf6>
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	42a2      	cmp	r2, r4
 800902c:	d12b      	bne.n	8009086 <_malloc_r+0xe2>
 800902e:	2200      	movs	r2, #0
 8009030:	605a      	str	r2, [r3, #4]
 8009032:	e00f      	b.n	8009054 <_malloc_r+0xb0>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	1b52      	subs	r2, r2, r5
 8009038:	d41f      	bmi.n	800907a <_malloc_r+0xd6>
 800903a:	2a0b      	cmp	r2, #11
 800903c:	d917      	bls.n	800906e <_malloc_r+0xca>
 800903e:	1961      	adds	r1, r4, r5
 8009040:	42a3      	cmp	r3, r4
 8009042:	6025      	str	r5, [r4, #0]
 8009044:	bf18      	it	ne
 8009046:	6059      	strne	r1, [r3, #4]
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	bf08      	it	eq
 800904c:	f8c8 1000 	streq.w	r1, [r8]
 8009050:	5162      	str	r2, [r4, r5]
 8009052:	604b      	str	r3, [r1, #4]
 8009054:	4638      	mov	r0, r7
 8009056:	f104 060b 	add.w	r6, r4, #11
 800905a:	f000 f829 	bl	80090b0 <__malloc_unlock>
 800905e:	f026 0607 	bic.w	r6, r6, #7
 8009062:	1d23      	adds	r3, r4, #4
 8009064:	1af2      	subs	r2, r6, r3
 8009066:	d0ae      	beq.n	8008fc6 <_malloc_r+0x22>
 8009068:	1b9b      	subs	r3, r3, r6
 800906a:	50a3      	str	r3, [r4, r2]
 800906c:	e7ab      	b.n	8008fc6 <_malloc_r+0x22>
 800906e:	42a3      	cmp	r3, r4
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	d1dd      	bne.n	8009030 <_malloc_r+0x8c>
 8009074:	f8c8 2000 	str.w	r2, [r8]
 8009078:	e7ec      	b.n	8009054 <_malloc_r+0xb0>
 800907a:	4623      	mov	r3, r4
 800907c:	6864      	ldr	r4, [r4, #4]
 800907e:	e7ac      	b.n	8008fda <_malloc_r+0x36>
 8009080:	4634      	mov	r4, r6
 8009082:	6876      	ldr	r6, [r6, #4]
 8009084:	e7b4      	b.n	8008ff0 <_malloc_r+0x4c>
 8009086:	4613      	mov	r3, r2
 8009088:	e7cc      	b.n	8009024 <_malloc_r+0x80>
 800908a:	230c      	movs	r3, #12
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	4638      	mov	r0, r7
 8009090:	f000 f80e 	bl	80090b0 <__malloc_unlock>
 8009094:	e797      	b.n	8008fc6 <_malloc_r+0x22>
 8009096:	6025      	str	r5, [r4, #0]
 8009098:	e7dc      	b.n	8009054 <_malloc_r+0xb0>
 800909a:	605b      	str	r3, [r3, #4]
 800909c:	deff      	udf	#255	; 0xff
 800909e:	bf00      	nop
 80090a0:	200034fc 	.word	0x200034fc

080090a4 <__malloc_lock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_lock+0x8>)
 80090a6:	f000 b8d5 	b.w	8009254 <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	20003640 	.word	0x20003640

080090b0 <__malloc_unlock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__malloc_unlock+0x8>)
 80090b2:	f000 b8d0 	b.w	8009256 <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	20003640 	.word	0x20003640

080090bc <sniprintf>:
 80090bc:	b40c      	push	{r2, r3}
 80090be:	b530      	push	{r4, r5, lr}
 80090c0:	4b17      	ldr	r3, [pc, #92]	; (8009120 <sniprintf+0x64>)
 80090c2:	1e0c      	subs	r4, r1, #0
 80090c4:	681d      	ldr	r5, [r3, #0]
 80090c6:	b09d      	sub	sp, #116	; 0x74
 80090c8:	da08      	bge.n	80090dc <sniprintf+0x20>
 80090ca:	238b      	movs	r3, #139	; 0x8b
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	b01d      	add	sp, #116	; 0x74
 80090d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090d8:	b002      	add	sp, #8
 80090da:	4770      	bx	lr
 80090dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80090e4:	bf14      	ite	ne
 80090e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090ea:	4623      	moveq	r3, r4
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	9006      	str	r0, [sp, #24]
 80090f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80090fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090fe:	ab21      	add	r3, sp, #132	; 0x84
 8009100:	a902      	add	r1, sp, #8
 8009102:	4628      	mov	r0, r5
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	f000 f95b 	bl	80093c0 <_svfiprintf_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	bfbc      	itt	lt
 800910e:	238b      	movlt	r3, #139	; 0x8b
 8009110:	602b      	strlt	r3, [r5, #0]
 8009112:	2c00      	cmp	r4, #0
 8009114:	d0dd      	beq.n	80090d2 <sniprintf+0x16>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	2200      	movs	r2, #0
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	e7d9      	b.n	80090d2 <sniprintf+0x16>
 800911e:	bf00      	nop
 8009120:	2000007c 	.word	0x2000007c

08009124 <memset>:
 8009124:	4402      	add	r2, r0
 8009126:	4603      	mov	r3, r0
 8009128:	4293      	cmp	r3, r2
 800912a:	d100      	bne.n	800912e <memset+0xa>
 800912c:	4770      	bx	lr
 800912e:	f803 1b01 	strb.w	r1, [r3], #1
 8009132:	e7f9      	b.n	8009128 <memset+0x4>

08009134 <_reclaim_reent>:
 8009134:	4b29      	ldr	r3, [pc, #164]	; (80091dc <_reclaim_reent+0xa8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4283      	cmp	r3, r0
 800913a:	b570      	push	{r4, r5, r6, lr}
 800913c:	4604      	mov	r4, r0
 800913e:	d04b      	beq.n	80091d8 <_reclaim_reent+0xa4>
 8009140:	69c3      	ldr	r3, [r0, #28]
 8009142:	b143      	cbz	r3, 8009156 <_reclaim_reent+0x22>
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d144      	bne.n	80091d4 <_reclaim_reent+0xa0>
 800914a:	69e3      	ldr	r3, [r4, #28]
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	b111      	cbz	r1, 8009156 <_reclaim_reent+0x22>
 8009150:	4620      	mov	r0, r4
 8009152:	f000 f88f 	bl	8009274 <_free_r>
 8009156:	6961      	ldr	r1, [r4, #20]
 8009158:	b111      	cbz	r1, 8009160 <_reclaim_reent+0x2c>
 800915a:	4620      	mov	r0, r4
 800915c:	f000 f88a 	bl	8009274 <_free_r>
 8009160:	69e1      	ldr	r1, [r4, #28]
 8009162:	b111      	cbz	r1, 800916a <_reclaim_reent+0x36>
 8009164:	4620      	mov	r0, r4
 8009166:	f000 f885 	bl	8009274 <_free_r>
 800916a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800916c:	b111      	cbz	r1, 8009174 <_reclaim_reent+0x40>
 800916e:	4620      	mov	r0, r4
 8009170:	f000 f880 	bl	8009274 <_free_r>
 8009174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009176:	b111      	cbz	r1, 800917e <_reclaim_reent+0x4a>
 8009178:	4620      	mov	r0, r4
 800917a:	f000 f87b 	bl	8009274 <_free_r>
 800917e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009180:	b111      	cbz	r1, 8009188 <_reclaim_reent+0x54>
 8009182:	4620      	mov	r0, r4
 8009184:	f000 f876 	bl	8009274 <_free_r>
 8009188:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800918a:	b111      	cbz	r1, 8009192 <_reclaim_reent+0x5e>
 800918c:	4620      	mov	r0, r4
 800918e:	f000 f871 	bl	8009274 <_free_r>
 8009192:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009194:	b111      	cbz	r1, 800919c <_reclaim_reent+0x68>
 8009196:	4620      	mov	r0, r4
 8009198:	f000 f86c 	bl	8009274 <_free_r>
 800919c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800919e:	b111      	cbz	r1, 80091a6 <_reclaim_reent+0x72>
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f867 	bl	8009274 <_free_r>
 80091a6:	6a23      	ldr	r3, [r4, #32]
 80091a8:	b1b3      	cbz	r3, 80091d8 <_reclaim_reent+0xa4>
 80091aa:	4620      	mov	r0, r4
 80091ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091b0:	4718      	bx	r3
 80091b2:	5949      	ldr	r1, [r1, r5]
 80091b4:	b941      	cbnz	r1, 80091c8 <_reclaim_reent+0x94>
 80091b6:	3504      	adds	r5, #4
 80091b8:	69e3      	ldr	r3, [r4, #28]
 80091ba:	2d80      	cmp	r5, #128	; 0x80
 80091bc:	68d9      	ldr	r1, [r3, #12]
 80091be:	d1f8      	bne.n	80091b2 <_reclaim_reent+0x7e>
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 f857 	bl	8009274 <_free_r>
 80091c6:	e7c0      	b.n	800914a <_reclaim_reent+0x16>
 80091c8:	680e      	ldr	r6, [r1, #0]
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 f852 	bl	8009274 <_free_r>
 80091d0:	4631      	mov	r1, r6
 80091d2:	e7ef      	b.n	80091b4 <_reclaim_reent+0x80>
 80091d4:	2500      	movs	r5, #0
 80091d6:	e7ef      	b.n	80091b8 <_reclaim_reent+0x84>
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	bf00      	nop
 80091dc:	2000007c 	.word	0x2000007c

080091e0 <_sbrk_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d06      	ldr	r5, [pc, #24]	; (80091fc <_sbrk_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	f7f8 fb0e 	bl	800180c <_sbrk>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_sbrk_r+0x1a>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_sbrk_r+0x1a>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	2000363c 	.word	0x2000363c

08009200 <__errno>:
 8009200:	4b01      	ldr	r3, [pc, #4]	; (8009208 <__errno+0x8>)
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	2000007c 	.word	0x2000007c

0800920c <__libc_init_array>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	4d0d      	ldr	r5, [pc, #52]	; (8009244 <__libc_init_array+0x38>)
 8009210:	4c0d      	ldr	r4, [pc, #52]	; (8009248 <__libc_init_array+0x3c>)
 8009212:	1b64      	subs	r4, r4, r5
 8009214:	10a4      	asrs	r4, r4, #2
 8009216:	2600      	movs	r6, #0
 8009218:	42a6      	cmp	r6, r4
 800921a:	d109      	bne.n	8009230 <__libc_init_array+0x24>
 800921c:	4d0b      	ldr	r5, [pc, #44]	; (800924c <__libc_init_array+0x40>)
 800921e:	4c0c      	ldr	r4, [pc, #48]	; (8009250 <__libc_init_array+0x44>)
 8009220:	f000 fbae 	bl	8009980 <_init>
 8009224:	1b64      	subs	r4, r4, r5
 8009226:	10a4      	asrs	r4, r4, #2
 8009228:	2600      	movs	r6, #0
 800922a:	42a6      	cmp	r6, r4
 800922c:	d105      	bne.n	800923a <__libc_init_array+0x2e>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	f855 3b04 	ldr.w	r3, [r5], #4
 8009234:	4798      	blx	r3
 8009236:	3601      	adds	r6, #1
 8009238:	e7ee      	b.n	8009218 <__libc_init_array+0xc>
 800923a:	f855 3b04 	ldr.w	r3, [r5], #4
 800923e:	4798      	blx	r3
 8009240:	3601      	adds	r6, #1
 8009242:	e7f2      	b.n	800922a <__libc_init_array+0x1e>
 8009244:	0800a2f0 	.word	0x0800a2f0
 8009248:	0800a2f0 	.word	0x0800a2f0
 800924c:	0800a2f0 	.word	0x0800a2f0
 8009250:	0800a2f4 	.word	0x0800a2f4

08009254 <__retarget_lock_acquire_recursive>:
 8009254:	4770      	bx	lr

08009256 <__retarget_lock_release_recursive>:
 8009256:	4770      	bx	lr

08009258 <memcpy>:
 8009258:	440a      	add	r2, r1
 800925a:	4291      	cmp	r1, r2
 800925c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009260:	d100      	bne.n	8009264 <memcpy+0xc>
 8009262:	4770      	bx	lr
 8009264:	b510      	push	{r4, lr}
 8009266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800926a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800926e:	4291      	cmp	r1, r2
 8009270:	d1f9      	bne.n	8009266 <memcpy+0xe>
 8009272:	bd10      	pop	{r4, pc}

08009274 <_free_r>:
 8009274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009276:	2900      	cmp	r1, #0
 8009278:	d044      	beq.n	8009304 <_free_r+0x90>
 800927a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927e:	9001      	str	r0, [sp, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f1a1 0404 	sub.w	r4, r1, #4
 8009286:	bfb8      	it	lt
 8009288:	18e4      	addlt	r4, r4, r3
 800928a:	f7ff ff0b 	bl	80090a4 <__malloc_lock>
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <_free_r+0x94>)
 8009290:	9801      	ldr	r0, [sp, #4]
 8009292:	6813      	ldr	r3, [r2, #0]
 8009294:	b933      	cbnz	r3, 80092a4 <_free_r+0x30>
 8009296:	6063      	str	r3, [r4, #4]
 8009298:	6014      	str	r4, [r2, #0]
 800929a:	b003      	add	sp, #12
 800929c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092a0:	f7ff bf06 	b.w	80090b0 <__malloc_unlock>
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	d908      	bls.n	80092ba <_free_r+0x46>
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	1961      	adds	r1, r4, r5
 80092ac:	428b      	cmp	r3, r1
 80092ae:	bf01      	itttt	eq
 80092b0:	6819      	ldreq	r1, [r3, #0]
 80092b2:	685b      	ldreq	r3, [r3, #4]
 80092b4:	1949      	addeq	r1, r1, r5
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	e7ed      	b.n	8009296 <_free_r+0x22>
 80092ba:	461a      	mov	r2, r3
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	b10b      	cbz	r3, 80092c4 <_free_r+0x50>
 80092c0:	42a3      	cmp	r3, r4
 80092c2:	d9fa      	bls.n	80092ba <_free_r+0x46>
 80092c4:	6811      	ldr	r1, [r2, #0]
 80092c6:	1855      	adds	r5, r2, r1
 80092c8:	42a5      	cmp	r5, r4
 80092ca:	d10b      	bne.n	80092e4 <_free_r+0x70>
 80092cc:	6824      	ldr	r4, [r4, #0]
 80092ce:	4421      	add	r1, r4
 80092d0:	1854      	adds	r4, r2, r1
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	6011      	str	r1, [r2, #0]
 80092d6:	d1e0      	bne.n	800929a <_free_r+0x26>
 80092d8:	681c      	ldr	r4, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	6053      	str	r3, [r2, #4]
 80092de:	440c      	add	r4, r1
 80092e0:	6014      	str	r4, [r2, #0]
 80092e2:	e7da      	b.n	800929a <_free_r+0x26>
 80092e4:	d902      	bls.n	80092ec <_free_r+0x78>
 80092e6:	230c      	movs	r3, #12
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	e7d6      	b.n	800929a <_free_r+0x26>
 80092ec:	6825      	ldr	r5, [r4, #0]
 80092ee:	1961      	adds	r1, r4, r5
 80092f0:	428b      	cmp	r3, r1
 80092f2:	bf04      	itt	eq
 80092f4:	6819      	ldreq	r1, [r3, #0]
 80092f6:	685b      	ldreq	r3, [r3, #4]
 80092f8:	6063      	str	r3, [r4, #4]
 80092fa:	bf04      	itt	eq
 80092fc:	1949      	addeq	r1, r1, r5
 80092fe:	6021      	streq	r1, [r4, #0]
 8009300:	6054      	str	r4, [r2, #4]
 8009302:	e7ca      	b.n	800929a <_free_r+0x26>
 8009304:	b003      	add	sp, #12
 8009306:	bd30      	pop	{r4, r5, pc}
 8009308:	200034fc 	.word	0x200034fc

0800930c <__ssputs_r>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	688e      	ldr	r6, [r1, #8]
 8009312:	461f      	mov	r7, r3
 8009314:	42be      	cmp	r6, r7
 8009316:	680b      	ldr	r3, [r1, #0]
 8009318:	4682      	mov	sl, r0
 800931a:	460c      	mov	r4, r1
 800931c:	4690      	mov	r8, r2
 800931e:	d82c      	bhi.n	800937a <__ssputs_r+0x6e>
 8009320:	898a      	ldrh	r2, [r1, #12]
 8009322:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009326:	d026      	beq.n	8009376 <__ssputs_r+0x6a>
 8009328:	6965      	ldr	r5, [r4, #20]
 800932a:	6909      	ldr	r1, [r1, #16]
 800932c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009330:	eba3 0901 	sub.w	r9, r3, r1
 8009334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009338:	1c7b      	adds	r3, r7, #1
 800933a:	444b      	add	r3, r9
 800933c:	106d      	asrs	r5, r5, #1
 800933e:	429d      	cmp	r5, r3
 8009340:	bf38      	it	cc
 8009342:	461d      	movcc	r5, r3
 8009344:	0553      	lsls	r3, r2, #21
 8009346:	d527      	bpl.n	8009398 <__ssputs_r+0x8c>
 8009348:	4629      	mov	r1, r5
 800934a:	f7ff fe2b 	bl	8008fa4 <_malloc_r>
 800934e:	4606      	mov	r6, r0
 8009350:	b360      	cbz	r0, 80093ac <__ssputs_r+0xa0>
 8009352:	6921      	ldr	r1, [r4, #16]
 8009354:	464a      	mov	r2, r9
 8009356:	f7ff ff7f 	bl	8009258 <memcpy>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009364:	81a3      	strh	r3, [r4, #12]
 8009366:	6126      	str	r6, [r4, #16]
 8009368:	6165      	str	r5, [r4, #20]
 800936a:	444e      	add	r6, r9
 800936c:	eba5 0509 	sub.w	r5, r5, r9
 8009370:	6026      	str	r6, [r4, #0]
 8009372:	60a5      	str	r5, [r4, #8]
 8009374:	463e      	mov	r6, r7
 8009376:	42be      	cmp	r6, r7
 8009378:	d900      	bls.n	800937c <__ssputs_r+0x70>
 800937a:	463e      	mov	r6, r7
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	4632      	mov	r2, r6
 8009380:	4641      	mov	r1, r8
 8009382:	f000 faab 	bl	80098dc <memmove>
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	1b9b      	subs	r3, r3, r6
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	4433      	add	r3, r6
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	2000      	movs	r0, #0
 8009394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009398:	462a      	mov	r2, r5
 800939a:	f000 fab9 	bl	8009910 <_realloc_r>
 800939e:	4606      	mov	r6, r0
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d1e0      	bne.n	8009366 <__ssputs_r+0x5a>
 80093a4:	6921      	ldr	r1, [r4, #16]
 80093a6:	4650      	mov	r0, sl
 80093a8:	f7ff ff64 	bl	8009274 <_free_r>
 80093ac:	230c      	movs	r3, #12
 80093ae:	f8ca 3000 	str.w	r3, [sl]
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	f04f 30ff 	mov.w	r0, #4294967295
 80093be:	e7e9      	b.n	8009394 <__ssputs_r+0x88>

080093c0 <_svfiprintf_r>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	4698      	mov	r8, r3
 80093c6:	898b      	ldrh	r3, [r1, #12]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	b09d      	sub	sp, #116	; 0x74
 80093cc:	4607      	mov	r7, r0
 80093ce:	460d      	mov	r5, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	d50e      	bpl.n	80093f2 <_svfiprintf_r+0x32>
 80093d4:	690b      	ldr	r3, [r1, #16]
 80093d6:	b963      	cbnz	r3, 80093f2 <_svfiprintf_r+0x32>
 80093d8:	2140      	movs	r1, #64	; 0x40
 80093da:	f7ff fde3 	bl	8008fa4 <_malloc_r>
 80093de:	6028      	str	r0, [r5, #0]
 80093e0:	6128      	str	r0, [r5, #16]
 80093e2:	b920      	cbnz	r0, 80093ee <_svfiprintf_r+0x2e>
 80093e4:	230c      	movs	r3, #12
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e0d0      	b.n	8009590 <_svfiprintf_r+0x1d0>
 80093ee:	2340      	movs	r3, #64	; 0x40
 80093f0:	616b      	str	r3, [r5, #20]
 80093f2:	2300      	movs	r3, #0
 80093f4:	9309      	str	r3, [sp, #36]	; 0x24
 80093f6:	2320      	movs	r3, #32
 80093f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009400:	2330      	movs	r3, #48	; 0x30
 8009402:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095a8 <_svfiprintf_r+0x1e8>
 8009406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800940a:	f04f 0901 	mov.w	r9, #1
 800940e:	4623      	mov	r3, r4
 8009410:	469a      	mov	sl, r3
 8009412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009416:	b10a      	cbz	r2, 800941c <_svfiprintf_r+0x5c>
 8009418:	2a25      	cmp	r2, #37	; 0x25
 800941a:	d1f9      	bne.n	8009410 <_svfiprintf_r+0x50>
 800941c:	ebba 0b04 	subs.w	fp, sl, r4
 8009420:	d00b      	beq.n	800943a <_svfiprintf_r+0x7a>
 8009422:	465b      	mov	r3, fp
 8009424:	4622      	mov	r2, r4
 8009426:	4629      	mov	r1, r5
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff ff6f 	bl	800930c <__ssputs_r>
 800942e:	3001      	adds	r0, #1
 8009430:	f000 80a9 	beq.w	8009586 <_svfiprintf_r+0x1c6>
 8009434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009436:	445a      	add	r2, fp
 8009438:	9209      	str	r2, [sp, #36]	; 0x24
 800943a:	f89a 3000 	ldrb.w	r3, [sl]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80a1 	beq.w	8009586 <_svfiprintf_r+0x1c6>
 8009444:	2300      	movs	r3, #0
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800944e:	f10a 0a01 	add.w	sl, sl, #1
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	9307      	str	r3, [sp, #28]
 8009456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800945a:	931a      	str	r3, [sp, #104]	; 0x68
 800945c:	4654      	mov	r4, sl
 800945e:	2205      	movs	r2, #5
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	4850      	ldr	r0, [pc, #320]	; (80095a8 <_svfiprintf_r+0x1e8>)
 8009466:	f7f6 feb3 	bl	80001d0 <memchr>
 800946a:	9a04      	ldr	r2, [sp, #16]
 800946c:	b9d8      	cbnz	r0, 80094a6 <_svfiprintf_r+0xe6>
 800946e:	06d0      	lsls	r0, r2, #27
 8009470:	bf44      	itt	mi
 8009472:	2320      	movmi	r3, #32
 8009474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009478:	0711      	lsls	r1, r2, #28
 800947a:	bf44      	itt	mi
 800947c:	232b      	movmi	r3, #43	; 0x2b
 800947e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009482:	f89a 3000 	ldrb.w	r3, [sl]
 8009486:	2b2a      	cmp	r3, #42	; 0x2a
 8009488:	d015      	beq.n	80094b6 <_svfiprintf_r+0xf6>
 800948a:	9a07      	ldr	r2, [sp, #28]
 800948c:	4654      	mov	r4, sl
 800948e:	2000      	movs	r0, #0
 8009490:	f04f 0c0a 	mov.w	ip, #10
 8009494:	4621      	mov	r1, r4
 8009496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800949a:	3b30      	subs	r3, #48	; 0x30
 800949c:	2b09      	cmp	r3, #9
 800949e:	d94d      	bls.n	800953c <_svfiprintf_r+0x17c>
 80094a0:	b1b0      	cbz	r0, 80094d0 <_svfiprintf_r+0x110>
 80094a2:	9207      	str	r2, [sp, #28]
 80094a4:	e014      	b.n	80094d0 <_svfiprintf_r+0x110>
 80094a6:	eba0 0308 	sub.w	r3, r0, r8
 80094aa:	fa09 f303 	lsl.w	r3, r9, r3
 80094ae:	4313      	orrs	r3, r2
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	46a2      	mov	sl, r4
 80094b4:	e7d2      	b.n	800945c <_svfiprintf_r+0x9c>
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	1d19      	adds	r1, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9103      	str	r1, [sp, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfbb      	ittet	lt
 80094c2:	425b      	neglt	r3, r3
 80094c4:	f042 0202 	orrlt.w	r2, r2, #2
 80094c8:	9307      	strge	r3, [sp, #28]
 80094ca:	9307      	strlt	r3, [sp, #28]
 80094cc:	bfb8      	it	lt
 80094ce:	9204      	strlt	r2, [sp, #16]
 80094d0:	7823      	ldrb	r3, [r4, #0]
 80094d2:	2b2e      	cmp	r3, #46	; 0x2e
 80094d4:	d10c      	bne.n	80094f0 <_svfiprintf_r+0x130>
 80094d6:	7863      	ldrb	r3, [r4, #1]
 80094d8:	2b2a      	cmp	r3, #42	; 0x2a
 80094da:	d134      	bne.n	8009546 <_svfiprintf_r+0x186>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	1d1a      	adds	r2, r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	9203      	str	r2, [sp, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bfb8      	it	lt
 80094e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80094ec:	3402      	adds	r4, #2
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80095b8 <_svfiprintf_r+0x1f8>
 80094f4:	7821      	ldrb	r1, [r4, #0]
 80094f6:	2203      	movs	r2, #3
 80094f8:	4650      	mov	r0, sl
 80094fa:	f7f6 fe69 	bl	80001d0 <memchr>
 80094fe:	b138      	cbz	r0, 8009510 <_svfiprintf_r+0x150>
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	eba0 000a 	sub.w	r0, r0, sl
 8009506:	2240      	movs	r2, #64	; 0x40
 8009508:	4082      	lsls	r2, r0
 800950a:	4313      	orrs	r3, r2
 800950c:	3401      	adds	r4, #1
 800950e:	9304      	str	r3, [sp, #16]
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	4825      	ldr	r0, [pc, #148]	; (80095ac <_svfiprintf_r+0x1ec>)
 8009516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800951a:	2206      	movs	r2, #6
 800951c:	f7f6 fe58 	bl	80001d0 <memchr>
 8009520:	2800      	cmp	r0, #0
 8009522:	d038      	beq.n	8009596 <_svfiprintf_r+0x1d6>
 8009524:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <_svfiprintf_r+0x1f0>)
 8009526:	bb1b      	cbnz	r3, 8009570 <_svfiprintf_r+0x1b0>
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	3307      	adds	r3, #7
 800952c:	f023 0307 	bic.w	r3, r3, #7
 8009530:	3308      	adds	r3, #8
 8009532:	9303      	str	r3, [sp, #12]
 8009534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009536:	4433      	add	r3, r6
 8009538:	9309      	str	r3, [sp, #36]	; 0x24
 800953a:	e768      	b.n	800940e <_svfiprintf_r+0x4e>
 800953c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009540:	460c      	mov	r4, r1
 8009542:	2001      	movs	r0, #1
 8009544:	e7a6      	b.n	8009494 <_svfiprintf_r+0xd4>
 8009546:	2300      	movs	r3, #0
 8009548:	3401      	adds	r4, #1
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	4619      	mov	r1, r3
 800954e:	f04f 0c0a 	mov.w	ip, #10
 8009552:	4620      	mov	r0, r4
 8009554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009558:	3a30      	subs	r2, #48	; 0x30
 800955a:	2a09      	cmp	r2, #9
 800955c:	d903      	bls.n	8009566 <_svfiprintf_r+0x1a6>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0c6      	beq.n	80094f0 <_svfiprintf_r+0x130>
 8009562:	9105      	str	r1, [sp, #20]
 8009564:	e7c4      	b.n	80094f0 <_svfiprintf_r+0x130>
 8009566:	fb0c 2101 	mla	r1, ip, r1, r2
 800956a:	4604      	mov	r4, r0
 800956c:	2301      	movs	r3, #1
 800956e:	e7f0      	b.n	8009552 <_svfiprintf_r+0x192>
 8009570:	ab03      	add	r3, sp, #12
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	462a      	mov	r2, r5
 8009576:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <_svfiprintf_r+0x1f4>)
 8009578:	a904      	add	r1, sp, #16
 800957a:	4638      	mov	r0, r7
 800957c:	f3af 8000 	nop.w
 8009580:	1c42      	adds	r2, r0, #1
 8009582:	4606      	mov	r6, r0
 8009584:	d1d6      	bne.n	8009534 <_svfiprintf_r+0x174>
 8009586:	89ab      	ldrh	r3, [r5, #12]
 8009588:	065b      	lsls	r3, r3, #25
 800958a:	f53f af2d 	bmi.w	80093e8 <_svfiprintf_r+0x28>
 800958e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009590:	b01d      	add	sp, #116	; 0x74
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <_svfiprintf_r+0x1f4>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	4638      	mov	r0, r7
 80095a2:	f000 f879 	bl	8009698 <_printf_i>
 80095a6:	e7eb      	b.n	8009580 <_svfiprintf_r+0x1c0>
 80095a8:	0800a2b4 	.word	0x0800a2b4
 80095ac:	0800a2be 	.word	0x0800a2be
 80095b0:	00000000 	.word	0x00000000
 80095b4:	0800930d 	.word	0x0800930d
 80095b8:	0800a2ba 	.word	0x0800a2ba

080095bc <_printf_common>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	4616      	mov	r6, r2
 80095c2:	4699      	mov	r9, r3
 80095c4:	688a      	ldr	r2, [r1, #8]
 80095c6:	690b      	ldr	r3, [r1, #16]
 80095c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	bfb8      	it	lt
 80095d0:	4613      	movlt	r3, r2
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095d8:	4607      	mov	r7, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b10a      	cbz	r2, 80095e2 <_printf_common+0x26>
 80095de:	3301      	adds	r3, #1
 80095e0:	6033      	str	r3, [r6, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	0699      	lsls	r1, r3, #26
 80095e6:	bf42      	ittt	mi
 80095e8:	6833      	ldrmi	r3, [r6, #0]
 80095ea:	3302      	addmi	r3, #2
 80095ec:	6033      	strmi	r3, [r6, #0]
 80095ee:	6825      	ldr	r5, [r4, #0]
 80095f0:	f015 0506 	ands.w	r5, r5, #6
 80095f4:	d106      	bne.n	8009604 <_printf_common+0x48>
 80095f6:	f104 0a19 	add.w	sl, r4, #25
 80095fa:	68e3      	ldr	r3, [r4, #12]
 80095fc:	6832      	ldr	r2, [r6, #0]
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc26      	bgt.n	8009652 <_printf_common+0x96>
 8009604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009608:	1e13      	subs	r3, r2, #0
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	bf18      	it	ne
 800960e:	2301      	movne	r3, #1
 8009610:	0692      	lsls	r2, r2, #26
 8009612:	d42b      	bmi.n	800966c <_printf_common+0xb0>
 8009614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009618:	4649      	mov	r1, r9
 800961a:	4638      	mov	r0, r7
 800961c:	47c0      	blx	r8
 800961e:	3001      	adds	r0, #1
 8009620:	d01e      	beq.n	8009660 <_printf_common+0xa4>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	6922      	ldr	r2, [r4, #16]
 8009626:	f003 0306 	and.w	r3, r3, #6
 800962a:	2b04      	cmp	r3, #4
 800962c:	bf02      	ittt	eq
 800962e:	68e5      	ldreq	r5, [r4, #12]
 8009630:	6833      	ldreq	r3, [r6, #0]
 8009632:	1aed      	subeq	r5, r5, r3
 8009634:	68a3      	ldr	r3, [r4, #8]
 8009636:	bf0c      	ite	eq
 8009638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800963c:	2500      	movne	r5, #0
 800963e:	4293      	cmp	r3, r2
 8009640:	bfc4      	itt	gt
 8009642:	1a9b      	subgt	r3, r3, r2
 8009644:	18ed      	addgt	r5, r5, r3
 8009646:	2600      	movs	r6, #0
 8009648:	341a      	adds	r4, #26
 800964a:	42b5      	cmp	r5, r6
 800964c:	d11a      	bne.n	8009684 <_printf_common+0xc8>
 800964e:	2000      	movs	r0, #0
 8009650:	e008      	b.n	8009664 <_printf_common+0xa8>
 8009652:	2301      	movs	r3, #1
 8009654:	4652      	mov	r2, sl
 8009656:	4649      	mov	r1, r9
 8009658:	4638      	mov	r0, r7
 800965a:	47c0      	blx	r8
 800965c:	3001      	adds	r0, #1
 800965e:	d103      	bne.n	8009668 <_printf_common+0xac>
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009668:	3501      	adds	r5, #1
 800966a:	e7c6      	b.n	80095fa <_printf_common+0x3e>
 800966c:	18e1      	adds	r1, r4, r3
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	2030      	movs	r0, #48	; 0x30
 8009672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009676:	4422      	add	r2, r4
 8009678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800967c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009680:	3302      	adds	r3, #2
 8009682:	e7c7      	b.n	8009614 <_printf_common+0x58>
 8009684:	2301      	movs	r3, #1
 8009686:	4622      	mov	r2, r4
 8009688:	4649      	mov	r1, r9
 800968a:	4638      	mov	r0, r7
 800968c:	47c0      	blx	r8
 800968e:	3001      	adds	r0, #1
 8009690:	d0e6      	beq.n	8009660 <_printf_common+0xa4>
 8009692:	3601      	adds	r6, #1
 8009694:	e7d9      	b.n	800964a <_printf_common+0x8e>
	...

08009698 <_printf_i>:
 8009698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800969c:	7e0f      	ldrb	r7, [r1, #24]
 800969e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096a0:	2f78      	cmp	r7, #120	; 0x78
 80096a2:	4691      	mov	r9, r2
 80096a4:	4680      	mov	r8, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	469a      	mov	sl, r3
 80096aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096ae:	d807      	bhi.n	80096c0 <_printf_i+0x28>
 80096b0:	2f62      	cmp	r7, #98	; 0x62
 80096b2:	d80a      	bhi.n	80096ca <_printf_i+0x32>
 80096b4:	2f00      	cmp	r7, #0
 80096b6:	f000 80d4 	beq.w	8009862 <_printf_i+0x1ca>
 80096ba:	2f58      	cmp	r7, #88	; 0x58
 80096bc:	f000 80c0 	beq.w	8009840 <_printf_i+0x1a8>
 80096c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096c8:	e03a      	b.n	8009740 <_printf_i+0xa8>
 80096ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ce:	2b15      	cmp	r3, #21
 80096d0:	d8f6      	bhi.n	80096c0 <_printf_i+0x28>
 80096d2:	a101      	add	r1, pc, #4	; (adr r1, 80096d8 <_printf_i+0x40>)
 80096d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d8:	08009731 	.word	0x08009731
 80096dc:	08009745 	.word	0x08009745
 80096e0:	080096c1 	.word	0x080096c1
 80096e4:	080096c1 	.word	0x080096c1
 80096e8:	080096c1 	.word	0x080096c1
 80096ec:	080096c1 	.word	0x080096c1
 80096f0:	08009745 	.word	0x08009745
 80096f4:	080096c1 	.word	0x080096c1
 80096f8:	080096c1 	.word	0x080096c1
 80096fc:	080096c1 	.word	0x080096c1
 8009700:	080096c1 	.word	0x080096c1
 8009704:	08009849 	.word	0x08009849
 8009708:	08009771 	.word	0x08009771
 800970c:	08009803 	.word	0x08009803
 8009710:	080096c1 	.word	0x080096c1
 8009714:	080096c1 	.word	0x080096c1
 8009718:	0800986b 	.word	0x0800986b
 800971c:	080096c1 	.word	0x080096c1
 8009720:	08009771 	.word	0x08009771
 8009724:	080096c1 	.word	0x080096c1
 8009728:	080096c1 	.word	0x080096c1
 800972c:	0800980b 	.word	0x0800980b
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	602a      	str	r2, [r5, #0]
 8009738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009740:	2301      	movs	r3, #1
 8009742:	e09f      	b.n	8009884 <_printf_i+0x1ec>
 8009744:	6820      	ldr	r0, [r4, #0]
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	0607      	lsls	r7, r0, #24
 800974a:	f103 0104 	add.w	r1, r3, #4
 800974e:	6029      	str	r1, [r5, #0]
 8009750:	d501      	bpl.n	8009756 <_printf_i+0xbe>
 8009752:	681e      	ldr	r6, [r3, #0]
 8009754:	e003      	b.n	800975e <_printf_i+0xc6>
 8009756:	0646      	lsls	r6, r0, #25
 8009758:	d5fb      	bpl.n	8009752 <_printf_i+0xba>
 800975a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800975e:	2e00      	cmp	r6, #0
 8009760:	da03      	bge.n	800976a <_printf_i+0xd2>
 8009762:	232d      	movs	r3, #45	; 0x2d
 8009764:	4276      	negs	r6, r6
 8009766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976a:	485a      	ldr	r0, [pc, #360]	; (80098d4 <_printf_i+0x23c>)
 800976c:	230a      	movs	r3, #10
 800976e:	e012      	b.n	8009796 <_printf_i+0xfe>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	6820      	ldr	r0, [r4, #0]
 8009774:	1d19      	adds	r1, r3, #4
 8009776:	6029      	str	r1, [r5, #0]
 8009778:	0605      	lsls	r5, r0, #24
 800977a:	d501      	bpl.n	8009780 <_printf_i+0xe8>
 800977c:	681e      	ldr	r6, [r3, #0]
 800977e:	e002      	b.n	8009786 <_printf_i+0xee>
 8009780:	0641      	lsls	r1, r0, #25
 8009782:	d5fb      	bpl.n	800977c <_printf_i+0xe4>
 8009784:	881e      	ldrh	r6, [r3, #0]
 8009786:	4853      	ldr	r0, [pc, #332]	; (80098d4 <_printf_i+0x23c>)
 8009788:	2f6f      	cmp	r7, #111	; 0x6f
 800978a:	bf0c      	ite	eq
 800978c:	2308      	moveq	r3, #8
 800978e:	230a      	movne	r3, #10
 8009790:	2100      	movs	r1, #0
 8009792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009796:	6865      	ldr	r5, [r4, #4]
 8009798:	60a5      	str	r5, [r4, #8]
 800979a:	2d00      	cmp	r5, #0
 800979c:	bfa2      	ittt	ge
 800979e:	6821      	ldrge	r1, [r4, #0]
 80097a0:	f021 0104 	bicge.w	r1, r1, #4
 80097a4:	6021      	strge	r1, [r4, #0]
 80097a6:	b90e      	cbnz	r6, 80097ac <_printf_i+0x114>
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	d04b      	beq.n	8009844 <_printf_i+0x1ac>
 80097ac:	4615      	mov	r5, r2
 80097ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80097b2:	fb03 6711 	mls	r7, r3, r1, r6
 80097b6:	5dc7      	ldrb	r7, [r0, r7]
 80097b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097bc:	4637      	mov	r7, r6
 80097be:	42bb      	cmp	r3, r7
 80097c0:	460e      	mov	r6, r1
 80097c2:	d9f4      	bls.n	80097ae <_printf_i+0x116>
 80097c4:	2b08      	cmp	r3, #8
 80097c6:	d10b      	bne.n	80097e0 <_printf_i+0x148>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	07de      	lsls	r6, r3, #31
 80097cc:	d508      	bpl.n	80097e0 <_printf_i+0x148>
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6861      	ldr	r1, [r4, #4]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	bfde      	ittt	le
 80097d6:	2330      	movle	r3, #48	; 0x30
 80097d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097e0:	1b52      	subs	r2, r2, r5
 80097e2:	6122      	str	r2, [r4, #16]
 80097e4:	f8cd a000 	str.w	sl, [sp]
 80097e8:	464b      	mov	r3, r9
 80097ea:	aa03      	add	r2, sp, #12
 80097ec:	4621      	mov	r1, r4
 80097ee:	4640      	mov	r0, r8
 80097f0:	f7ff fee4 	bl	80095bc <_printf_common>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d14a      	bne.n	800988e <_printf_i+0x1f6>
 80097f8:	f04f 30ff 	mov.w	r0, #4294967295
 80097fc:	b004      	add	sp, #16
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	4833      	ldr	r0, [pc, #204]	; (80098d8 <_printf_i+0x240>)
 800980c:	2778      	movs	r7, #120	; 0x78
 800980e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	6829      	ldr	r1, [r5, #0]
 8009816:	061f      	lsls	r7, r3, #24
 8009818:	f851 6b04 	ldr.w	r6, [r1], #4
 800981c:	d402      	bmi.n	8009824 <_printf_i+0x18c>
 800981e:	065f      	lsls	r7, r3, #25
 8009820:	bf48      	it	mi
 8009822:	b2b6      	uxthmi	r6, r6
 8009824:	07df      	lsls	r7, r3, #31
 8009826:	bf48      	it	mi
 8009828:	f043 0320 	orrmi.w	r3, r3, #32
 800982c:	6029      	str	r1, [r5, #0]
 800982e:	bf48      	it	mi
 8009830:	6023      	strmi	r3, [r4, #0]
 8009832:	b91e      	cbnz	r6, 800983c <_printf_i+0x1a4>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	f023 0320 	bic.w	r3, r3, #32
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	2310      	movs	r3, #16
 800983e:	e7a7      	b.n	8009790 <_printf_i+0xf8>
 8009840:	4824      	ldr	r0, [pc, #144]	; (80098d4 <_printf_i+0x23c>)
 8009842:	e7e4      	b.n	800980e <_printf_i+0x176>
 8009844:	4615      	mov	r5, r2
 8009846:	e7bd      	b.n	80097c4 <_printf_i+0x12c>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	6826      	ldr	r6, [r4, #0]
 800984c:	6961      	ldr	r1, [r4, #20]
 800984e:	1d18      	adds	r0, r3, #4
 8009850:	6028      	str	r0, [r5, #0]
 8009852:	0635      	lsls	r5, r6, #24
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	d501      	bpl.n	800985c <_printf_i+0x1c4>
 8009858:	6019      	str	r1, [r3, #0]
 800985a:	e002      	b.n	8009862 <_printf_i+0x1ca>
 800985c:	0670      	lsls	r0, r6, #25
 800985e:	d5fb      	bpl.n	8009858 <_printf_i+0x1c0>
 8009860:	8019      	strh	r1, [r3, #0]
 8009862:	2300      	movs	r3, #0
 8009864:	6123      	str	r3, [r4, #16]
 8009866:	4615      	mov	r5, r2
 8009868:	e7bc      	b.n	80097e4 <_printf_i+0x14c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	1d1a      	adds	r2, r3, #4
 800986e:	602a      	str	r2, [r5, #0]
 8009870:	681d      	ldr	r5, [r3, #0]
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	2100      	movs	r1, #0
 8009876:	4628      	mov	r0, r5
 8009878:	f7f6 fcaa 	bl	80001d0 <memchr>
 800987c:	b108      	cbz	r0, 8009882 <_printf_i+0x1ea>
 800987e:	1b40      	subs	r0, r0, r5
 8009880:	6060      	str	r0, [r4, #4]
 8009882:	6863      	ldr	r3, [r4, #4]
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	2300      	movs	r3, #0
 8009888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800988c:	e7aa      	b.n	80097e4 <_printf_i+0x14c>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	462a      	mov	r2, r5
 8009892:	4649      	mov	r1, r9
 8009894:	4640      	mov	r0, r8
 8009896:	47d0      	blx	sl
 8009898:	3001      	adds	r0, #1
 800989a:	d0ad      	beq.n	80097f8 <_printf_i+0x160>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	079b      	lsls	r3, r3, #30
 80098a0:	d413      	bmi.n	80098ca <_printf_i+0x232>
 80098a2:	68e0      	ldr	r0, [r4, #12]
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	4298      	cmp	r0, r3
 80098a8:	bfb8      	it	lt
 80098aa:	4618      	movlt	r0, r3
 80098ac:	e7a6      	b.n	80097fc <_printf_i+0x164>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4632      	mov	r2, r6
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d09d      	beq.n	80097f8 <_printf_i+0x160>
 80098bc:	3501      	adds	r5, #1
 80098be:	68e3      	ldr	r3, [r4, #12]
 80098c0:	9903      	ldr	r1, [sp, #12]
 80098c2:	1a5b      	subs	r3, r3, r1
 80098c4:	42ab      	cmp	r3, r5
 80098c6:	dcf2      	bgt.n	80098ae <_printf_i+0x216>
 80098c8:	e7eb      	b.n	80098a2 <_printf_i+0x20a>
 80098ca:	2500      	movs	r5, #0
 80098cc:	f104 0619 	add.w	r6, r4, #25
 80098d0:	e7f5      	b.n	80098be <_printf_i+0x226>
 80098d2:	bf00      	nop
 80098d4:	0800a2c5 	.word	0x0800a2c5
 80098d8:	0800a2d6 	.word	0x0800a2d6

080098dc <memmove>:
 80098dc:	4288      	cmp	r0, r1
 80098de:	b510      	push	{r4, lr}
 80098e0:	eb01 0402 	add.w	r4, r1, r2
 80098e4:	d902      	bls.n	80098ec <memmove+0x10>
 80098e6:	4284      	cmp	r4, r0
 80098e8:	4623      	mov	r3, r4
 80098ea:	d807      	bhi.n	80098fc <memmove+0x20>
 80098ec:	1e43      	subs	r3, r0, #1
 80098ee:	42a1      	cmp	r1, r4
 80098f0:	d008      	beq.n	8009904 <memmove+0x28>
 80098f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098fa:	e7f8      	b.n	80098ee <memmove+0x12>
 80098fc:	4402      	add	r2, r0
 80098fe:	4601      	mov	r1, r0
 8009900:	428a      	cmp	r2, r1
 8009902:	d100      	bne.n	8009906 <memmove+0x2a>
 8009904:	bd10      	pop	{r4, pc}
 8009906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800990a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800990e:	e7f7      	b.n	8009900 <memmove+0x24>

08009910 <_realloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	4680      	mov	r8, r0
 8009916:	4614      	mov	r4, r2
 8009918:	460e      	mov	r6, r1
 800991a:	b921      	cbnz	r1, 8009926 <_realloc_r+0x16>
 800991c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	4611      	mov	r1, r2
 8009922:	f7ff bb3f 	b.w	8008fa4 <_malloc_r>
 8009926:	b92a      	cbnz	r2, 8009934 <_realloc_r+0x24>
 8009928:	f7ff fca4 	bl	8009274 <_free_r>
 800992c:	4625      	mov	r5, r4
 800992e:	4628      	mov	r0, r5
 8009930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009934:	f000 f81b 	bl	800996e <_malloc_usable_size_r>
 8009938:	4284      	cmp	r4, r0
 800993a:	4607      	mov	r7, r0
 800993c:	d802      	bhi.n	8009944 <_realloc_r+0x34>
 800993e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009942:	d812      	bhi.n	800996a <_realloc_r+0x5a>
 8009944:	4621      	mov	r1, r4
 8009946:	4640      	mov	r0, r8
 8009948:	f7ff fb2c 	bl	8008fa4 <_malloc_r>
 800994c:	4605      	mov	r5, r0
 800994e:	2800      	cmp	r0, #0
 8009950:	d0ed      	beq.n	800992e <_realloc_r+0x1e>
 8009952:	42bc      	cmp	r4, r7
 8009954:	4622      	mov	r2, r4
 8009956:	4631      	mov	r1, r6
 8009958:	bf28      	it	cs
 800995a:	463a      	movcs	r2, r7
 800995c:	f7ff fc7c 	bl	8009258 <memcpy>
 8009960:	4631      	mov	r1, r6
 8009962:	4640      	mov	r0, r8
 8009964:	f7ff fc86 	bl	8009274 <_free_r>
 8009968:	e7e1      	b.n	800992e <_realloc_r+0x1e>
 800996a:	4635      	mov	r5, r6
 800996c:	e7df      	b.n	800992e <_realloc_r+0x1e>

0800996e <_malloc_usable_size_r>:
 800996e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009972:	1f18      	subs	r0, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfbc      	itt	lt
 8009978:	580b      	ldrlt	r3, [r1, r0]
 800997a:	18c0      	addlt	r0, r0, r3
 800997c:	4770      	bx	lr
	...

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
