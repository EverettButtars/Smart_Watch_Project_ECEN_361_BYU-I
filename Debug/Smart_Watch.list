
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008628  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009108  08009108  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009110  08009110  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034bc  20000080  08009198  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000353c  08009198  0002353c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021b00  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042b4  00000000  00000000  00041bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  00045ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000164b  00000000  00000000  00047b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000047b4  00000000  00000000  00049193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021994  00000000  00000000  0004d947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106ccb  00000000  00000000  0006f2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ee0  00000000  00000000  00175fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087a0 	.word	0x080087a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080087a0 	.word	0x080087a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 ffc2 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f868 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f9ca 	bl	8000910 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f998 	bl	80008b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000580:	f000 f8f6 	bl	8000770 <MX_RTC_Init>
  MX_I2C1_Init();
 8000584:	f000 f8b4 	bl	80006f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000588:	f000 fdb4 	bl	80010f4 <ssd1306_Init>
  ssd1306_Fill(Black);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fe1b 	bl	80011c8 <ssd1306_Fill>
  ssd1306_SetCursor(0,0);
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f000 ff65 	bl	8001464 <ssd1306_SetCursor>
  ssd1306_WriteString("BOOTING", Font_7x10 ,White);
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <main+0x98>)
 800059c:	2301      	movs	r3, #1
 800059e:	ca06      	ldmia	r2, {r1, r2}
 80005a0:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0x9c>)
 80005a2:	f000 ff39 	bl	8001418 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80005a6:	f000 fe33 	bl	8001210 <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f004 fffd 	bl	80055a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <main+0xa0>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <main+0xa4>)
 80005b4:	f005 f842 	bl	800563c <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <main+0xa8>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <main+0xac>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <main+0xb0>)
 80005c4:	f005 f83a 	bl	800563c <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <main+0xb4>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <main+0xb8>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0xbc>)
 80005d4:	f005 f832 	bl	800563c <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <main+0xc0>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0xc4>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <main+0xc8>)
 80005e4:	f005 f82a 	bl	800563c <osThreadNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <main+0xcc>)
 80005ec:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <main+0xd0>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0xd4>)
 80005f4:	f005 f822 	bl	800563c <osThreadNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <main+0xd8>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fe:	f004 fff7 	bl	80055f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x96>
 8000604:	2000001c 	.word	0x2000001c
 8000608:	08008808 	.word	0x08008808
 800060c:	0800886c 	.word	0x0800886c
 8000610:	080009dd 	.word	0x080009dd
 8000614:	200001b4 	.word	0x200001b4
 8000618:	08008890 	.word	0x08008890
 800061c:	080009ed 	.word	0x080009ed
 8000620:	200001b8 	.word	0x200001b8
 8000624:	080088b4 	.word	0x080088b4
 8000628:	08000afd 	.word	0x08000afd
 800062c:	200001bc 	.word	0x200001bc
 8000630:	080088d8 	.word	0x080088d8
 8000634:	08000b11 	.word	0x08000b11
 8000638:	200001c0 	.word	0x200001c0
 800063c:	080088fc 	.word	0x080088fc
 8000640:	08000b25 	.word	0x08000b25
 8000644:	200001c4 	.word	0x200001c4

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fbc8 	bl	8007dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f001 fefd 	bl	800246c <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 faa0 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800067c:	230a      	movs	r3, #10
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069a:	230a      	movs	r3, #10
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 ff32 	bl	8002518 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006ba:	f000 fa7f 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	2104      	movs	r1, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fafa 	bl	8002cd0 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 fa6b 	bl	8000bbc <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3758      	adds	r7, #88	; 0x58
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_I2C1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_I2C1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_I2C1_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_I2C1_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_I2C1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_I2C1_Init+0x74>)
 800072c:	f001 f9e4 	bl	8001af8 <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 fa41 	bl	8000bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_I2C1_Init+0x74>)
 800073e:	f001 fdef 	bl	8002320 <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 fa38 	bl	8000bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2C1_Init+0x74>)
 8000750:	f001 fe31 	bl	80023b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 fa2f 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b4 	.word	0x200000b4
 8000768:	40005400 	.word	0x40005400
 800076c:	10909cec 	.word	0x10909cec

08000770 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	; 0x48
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	222c      	movs	r2, #44	; 0x2c
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fb2b 	bl	8007dec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_RTC_Init+0x138>)
 8000798:	4a44      	ldr	r2, [pc, #272]	; (80008ac <MX_RTC_Init+0x13c>)
 800079a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_RTC_Init+0x138>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_RTC_Init+0x138>)
 80007a4:	227f      	movs	r2, #127	; 0x7f
 80007a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007a8:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_RTC_Init+0x138>)
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_RTC_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_RTC_Init+0x138>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_RTC_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_RTC_Init+0x138>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c6:	4838      	ldr	r0, [pc, #224]	; (80008a8 <MX_RTC_Init+0x138>)
 80007c8:	f003 f994 	bl	8003af4 <HAL_RTC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80007d2:	f000 f9f3 	bl	8000bbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 80007d6:	2318      	movs	r3, #24
 80007d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <MX_RTC_Init+0x138>)
 80007fa:	f003 fa03 	bl	8003c04 <HAL_RTC_SetTime>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000804:	f000 f9da 	bl	8000bbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000808:	2303      	movs	r3, #3
 800080a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 800080e:	2312      	movs	r3, #18
 8000810:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 8000814:	2311      	movs	r3, #17
 8000816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	481f      	ldr	r0, [pc, #124]	; (80008a8 <MX_RTC_Init+0x138>)
 800082a:	f003 fae4 	bl	8003df6 <HAL_RTC_SetDate>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000834:	f000 f9c2 	bl	8000bbc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000838:	2303      	movs	r3, #3
 800083a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x3;
 800083c:	2303      	movs	r3, #3
 800083e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000840:	2300      	movs	r3, #0
 8000842:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_RTC_Init+0x138>)
 8000870:	f003 fb96 	bl	8003fa0 <HAL_RTC_SetAlarm_IT>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800087a:	f000 f99f 	bl	8000bbc <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_RTC_Init+0x138>)
 8000882:	f003 fde9 	bl	8004458 <HAL_RTCEx_SetCalibrationOutPut>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 800088c:	f000 f996 	bl	8000bbc <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_RTC_Init+0x138>)
 8000892:	f003 fe28 	bl	80044e6 <HAL_RTCEx_SetRefClock>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 800089c:	f000 f98e 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3748      	adds	r7, #72	; 0x48
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000108 	.word	0x20000108
 80008ac:	40002800 	.word	0x40002800

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART2_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008f4:	f004 f8f8 	bl	8004ae8 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f95d 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000012c 	.word	0x2000012c
 800090c:	40004400 	.word	0x40004400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 f89b 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xc8>)
 80009aa:	f000 fee3 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 fed4 	bl	8001774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800

080009dc <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f004 febb 	bl	8005760 <osDelay>
 80009ea:	e7fb      	b.n	80009e4 <start_default_task+0x8>

080009ec <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {

	  ssd1306_Fill(Black);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fbe7 	bl	80011c8 <ssd1306_Fill>
	  ssd1306_SetCursor(0,0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fd31 	bl	8001464 <ssd1306_SetCursor>

	  char temp [4][19];
	  //"     hh-mm PM     ";
	  char *ampm = ((userData.am) ? "AM" : "PM");
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <start_wright_to_display_task+0x22>
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <start_wright_to_display_task+0xf4>)
 8000a0c:	e000      	b.n	8000a10 <start_wright_to_display_task+0x24>
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <start_wright_to_display_task+0xf8>)
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
	  snprintf(temp[0], 19, "     %02i-%02i %.2s     " ,userData.hour ,userData.min ,ampm);
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f107 0008 	add.w	r0, r7, #8
 8000a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <start_wright_to_display_task+0xfc>)
 8000a28:	2113      	movs	r1, #19
 8000a2a:	f007 f9ab 	bl	8007d84 <sniprintf>
	  ssd1306_WriteString(temp[0], Font_7x10 ,White);
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a30:	f107 0008 	add.w	r0, r7, #8
 8000a34:	2301      	movs	r3, #1
 8000a36:	ca06      	ldmia	r2, {r1, r2}
 8000a38:	f000 fcee 	bl	8001418 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,20);
 8000a3c:	2114      	movs	r1, #20
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fd10 	bl	8001464 <ssd1306_SetCursor>
	  snprintf(temp[1], 19, "BPM: %i", userData.bpm);
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	f103 0013 	add.w	r0, r3, #19
 8000a50:	4613      	mov	r3, r2
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <start_wright_to_display_task+0x104>)
 8000a54:	2113      	movs	r1, #19
 8000a56:	f007 f995 	bl	8007d84 <sniprintf>
	  ssd1306_WriteString(temp[1], Font_7x10, White);
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	f103 0013 	add.w	r0, r3, #19
 8000a64:	2301      	movs	r3, #1
 8000a66:	ca06      	ldmia	r2, {r1, r2}
 8000a68:	f000 fcd6 	bl	8001418 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,30);
 8000a6c:	211e      	movs	r1, #30
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 fcf8 	bl	8001464 <ssd1306_SetCursor>
	  snprintf(temp[2], 19, "BO2: %i%%", userData.bo2);
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8000a80:	4613      	mov	r3, r2
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <start_wright_to_display_task+0x108>)
 8000a84:	2113      	movs	r1, #19
 8000a86:	f007 f97d 	bl	8007d84 <sniprintf>
	  ssd1306_WriteString(temp[2], Font_7x10, White);
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8000a94:	2301      	movs	r3, #1
 8000a96:	ca06      	ldmia	r2, {r1, r2}
 8000a98:	f000 fcbe 	bl	8001418 <ssd1306_WriteString>


	  ssd1306_SetCursor(0,40);
 8000a9c:	2128      	movs	r1, #40	; 0x28
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fce0 	bl	8001464 <ssd1306_SetCursor>
	  snprintf(temp[3], 19, "Steps: %i", userData.steps);
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <start_wright_to_display_task+0x10c>)
 8000ab4:	2113      	movs	r1, #19
 8000ab6:	f007 f965 	bl	8007d84 <sniprintf>
	  ssd1306_WriteString(temp[3], Font_7x10, White);
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <start_wright_to_display_task+0x100>)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	f000 fca6 	bl	8001418 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000acc:	f000 fba0 	bl	8001210 <ssd1306_UpdateScreen>

	  osDelay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f004 fe44 	bl	8005760 <osDelay>
  {
 8000ad8:	e78c      	b.n	80009f4 <start_wright_to_display_task+0x8>
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08008810 	.word	0x08008810
 8000ae4:	08008814 	.word	0x08008814
 8000ae8:	08008818 	.word	0x08008818
 8000aec:	2000001c 	.word	0x2000001c
 8000af0:	08008834 	.word	0x08008834
 8000af4:	0800883c 	.word	0x0800883c
 8000af8:	08008848 	.word	0x08008848

08000afc <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_heart_rate_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 8000b04:	4801      	ldr	r0, [pc, #4]	; (8000b0c <start_read_heart_rate_task+0x10>)
 8000b06:	f004 fe2b 	bl	8005760 <osDelay>
 8000b0a:	e7fb      	b.n	8000b04 <start_read_heart_rate_task+0x8>
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(10000);
 8000b18:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b1c:	f004 fe20 	bl	8005760 <osDelay>
 8000b20:	e7fa      	b.n	8000b18 <start_read_acceloromater_task+0x8>
	...

08000b24 <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4916      	ldr	r1, [pc, #88]	; (8000b88 <start_date_and_time_task+0x64>)
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <start_date_and_time_task+0x68>)
 8000b32:	f003 f9e7 	bl	8003f04 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b36:	2200      	movs	r2, #0
 8000b38:	4915      	ldr	r1, [pc, #84]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <start_date_and_time_task+0x68>)
 8000b3c:	f003 f8ff 	bl	8003d3e <HAL_RTC_GetTime>
	  if(sTime.Hours < 12){
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b0b      	cmp	r3, #11
 8000b46:	d810      	bhi.n	8000b6a <start_date_and_time_task+0x46>
		  userData.am = 1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	721a      	strb	r2, [r3, #8]
		  if(sTime.Hours == 0){
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <start_date_and_time_task+0x3a>
			  userData.hour = 12;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b58:	220c      	movs	r2, #12
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e00d      	b.n	8000b7a <start_date_and_time_task+0x56>
		  } else {
			  userData.hour = sTime.Hours;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <start_date_and_time_task+0x56>
		  }

	  } else {
		  userData.am = 0;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	721a      	strb	r2, [r3, #8]
		  userData.hour = sTime.Hours - 12;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b0c      	subs	r3, #12
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b78:	6013      	str	r3, [r2, #0]
	  }

	  userData.min = sTime.Minutes;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <start_date_and_time_task+0x6c>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <start_date_and_time_task+0x70>)
 8000b82:	605a      	str	r2, [r3, #4]
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b84:	e7d2      	b.n	8000b2c <start_date_and_time_task+0x8>
 8000b86:	bf00      	nop
 8000b88:	200000b0 	.word	0x200000b0
 8000b8c:	20000108 	.word	0x20000108
 8000b90:	2000009c 	.word	0x2000009c
 8000b94:	20000000 	.word	0x20000000

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fcbd 	bl	8001528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40001000 	.word	0x40001000

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	210f      	movs	r1, #15
 8000c02:	f06f 0001 	mvn.w	r0, #1
 8000c06:	f000 fd8b 	bl	8001720 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	; 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2288      	movs	r2, #136	; 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f007 f8d7 	bl	8007dec <memset>
  if(hi2c->Instance==I2C1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <HAL_I2C_MspInit+0xb0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d13b      	bne.n	8000cc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c48:	2340      	movs	r3, #64	; 0x40
 8000c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fa91 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ffac 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c84:	2312      	movs	r3, #18
 8000c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c96:	2304      	movs	r3, #4
 8000c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <HAL_I2C_MspInit+0xb8>)
 8000ca4:	f000 fd66 	bl	8001774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_I2C_MspInit+0xb4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	37b0      	adds	r7, #176	; 0xb0
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0aa      	sub	sp, #168	; 0xa8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2288      	movs	r2, #136	; 0x88
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f007 f879 	bl	8007dec <memset>
  if(hrtc->Instance==RTC)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <HAL_RTC_MspInit+0xc0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d142      	bne.n	8000d8a <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d08:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fa30 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000d22:	f7ff ff4b 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_RTC_MspInit+0xc4>)
 8000d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_RTC_MspInit+0xc4>)
 8000d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_RTC_MspInit+0xc4>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_RTC_MspInit+0xc4>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_RTC_MspInit+0xc4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000d4e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d72:	4619      	mov	r1, r3
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_RTC_MspInit+0xc8>)
 8000d76:	f000 fcfd 	bl	8001774 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	2029      	movs	r0, #41	; 0x29
 8000d80:	f000 fcce 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d84:	2029      	movs	r0, #41	; 0x29
 8000d86:	f000 fce7 	bl	8001758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	37a8      	adds	r7, #168	; 0xa8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40002800 	.word	0x40002800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ac      	sub	sp, #176	; 0xb0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2288      	movs	r2, #136	; 0x88
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f007 f813 	bl	8007dec <memset>
  if(huart->Instance==USART2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a21      	ldr	r2, [pc, #132]	; (8000e50 <HAL_UART_MspInit+0xb0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d13b      	bne.n	8000e48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 f9cd 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff fee8 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df0:	4a18      	ldr	r2, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df6:	6593      	str	r3, [r2, #88]	; 0x58
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0xb4>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e34:	2307      	movs	r3, #7
 8000e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f000 fc96 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	37b0      	adds	r7, #176	; 0xb0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40004400 	.word	0x40004400
 8000e54:	40021000 	.word	0x40021000

08000e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_InitTick+0xe0>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <HAL_InitTick+0xe0>)
 8000e6c:	f043 0310 	orr.w	r3, r3, #16
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_InitTick+0xe0>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 0310 	and.w	r3, r3, #16
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7e:	f107 0210 	add.w	r2, r7, #16
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f8e5 	bl	8003058 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e98:	f002 f8b2 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8000e9c:	6378      	str	r0, [r7, #52]	; 0x34
 8000e9e:	e004      	b.n	8000eaa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ea0:	f002 f8ae 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <HAL_InitTick+0xe4>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_InitTick+0xe8>)
 8000eba:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <HAL_InitTick+0xec>)
 8000ebc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_InitTick+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ee0:	f003 fb4f 	bl	8004582 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d11b      	bne.n	8000f2a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ef2:	4813      	ldr	r0, [pc, #76]	; (8000f40 <HAL_InitTick+0xe8>)
 8000ef4:	f003 fba6 	bl	8004644 <HAL_TIM_Base_Start_IT>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000efe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d111      	bne.n	8000f2a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f06:	2036      	movs	r0, #54	; 0x36
 8000f08:	f000 fc26 	bl	8001758 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	d808      	bhi.n	8000f24 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f12:	2200      	movs	r2, #0
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f000 fc02 	bl	8001720 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_InitTick+0xf0>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e002      	b.n	8000f2a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	431bde83 	.word	0x431bde83
 8000f40:	200001c8 	.word	0x200001c8
 8000f44:	40001000 	.word	0x40001000
 8000f48:	20000024 	.word	0x20000024

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <RTC_Alarm_IRQHandler+0x10>)
 8000f7e:	f003 f94b 	bl	8004218 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000108 	.word	0x20000108

08000f8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM6_DAC_IRQHandler+0x10>)
 8000f92:	f003 fbc7 	bl	8004724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001c8 	.word	0x200001c8

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f006 ff6a 	bl	8007ea8 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20018000 	.word	0x20018000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000214 	.word	0x20000214
 8001008:	20003540 	.word	0x20003540

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f006 ff29 	bl	8007eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fa83 	bl	800056c <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001074:	08009118 	.word	0x08009118
  ldr r2, =_sbss
 8001078:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800107c:	2000353c 	.word	0x2000353c

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>

08001082 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	2200      	movs	r2, #0
 80010ac:	2178      	movs	r1, #120	; 0x78
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <ssd1306_WriteCommand+0x2c>)
 80010b0:	f000 fdbe 	bl	8001c30 <HAL_I2C_Mem_Write>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200000b4 	.word	0x200000b4

080010c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	9202      	str	r2, [sp, #8]
 80010d4:	9301      	str	r3, [sp, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	2240      	movs	r2, #64	; 0x40
 80010de:	2178      	movs	r1, #120	; 0x78
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <ssd1306_WriteData+0x30>)
 80010e2:	f000 fda5 	bl	8001c30 <HAL_I2C_Mem_Write>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000b4 	.word	0x200000b4

080010f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80010f8:	f7ff ffc3 	bl	8001082 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f000 fa33 	bl	8001568 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f9da 	bl	80014bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001108:	2020      	movs	r0, #32
 800110a:	f7ff ffc1 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ffbe 	bl	8001090 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001114:	20b0      	movs	r0, #176	; 0xb0
 8001116:	f7ff ffbb 	bl	8001090 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800111a:	20c8      	movs	r0, #200	; 0xc8
 800111c:	f7ff ffb8 	bl	8001090 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ffb5 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001126:	2010      	movs	r0, #16
 8001128:	f7ff ffb2 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800112c:	2040      	movs	r0, #64	; 0x40
 800112e:	f7ff ffaf 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001132:	20ff      	movs	r0, #255	; 0xff
 8001134:	f000 f9ae 	bl	8001494 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001138:	20a1      	movs	r0, #161	; 0xa1
 800113a:	f7ff ffa9 	bl	8001090 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800113e:	20a6      	movs	r0, #166	; 0xa6
 8001140:	f7ff ffa6 	bl	8001090 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001144:	20a8      	movs	r0, #168	; 0xa8
 8001146:	f7ff ffa3 	bl	8001090 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800114a:	203f      	movs	r0, #63	; 0x3f
 800114c:	f7ff ffa0 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001150:	20a4      	movs	r0, #164	; 0xa4
 8001152:	f7ff ff9d 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001156:	20d3      	movs	r0, #211	; 0xd3
 8001158:	f7ff ff9a 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ff97 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001162:	20d5      	movs	r0, #213	; 0xd5
 8001164:	f7ff ff94 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001168:	20f0      	movs	r0, #240	; 0xf0
 800116a:	f7ff ff91 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800116e:	20d9      	movs	r0, #217	; 0xd9
 8001170:	f7ff ff8e 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001174:	2022      	movs	r0, #34	; 0x22
 8001176:	f7ff ff8b 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800117a:	20da      	movs	r0, #218	; 0xda
 800117c:	f7ff ff88 	bl	8001090 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001180:	2012      	movs	r0, #18
 8001182:	f7ff ff85 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001186:	20db      	movs	r0, #219	; 0xdb
 8001188:	f7ff ff82 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800118c:	2020      	movs	r0, #32
 800118e:	f7ff ff7f 	bl	8001090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001192:	208d      	movs	r0, #141	; 0x8d
 8001194:	f7ff ff7c 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001198:	2014      	movs	r0, #20
 800119a:	f7ff ff79 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 f98c 	bl	80014bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f80f 	bl	80011c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011aa:	f000 f831 	bl	8001210 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <ssd1306_Init+0xd0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <ssd1306_Init+0xd0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80011ba:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <ssd1306_Init+0xd0>)
 80011bc:	2201      	movs	r2, #1
 80011be:	711a      	strb	r2, [r3, #4]
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000618 	.word	0x20000618

080011c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e00d      	b.n	80011f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <ssd1306_Fill+0x1a>
 80011de:	2100      	movs	r1, #0
 80011e0:	e000      	b.n	80011e4 <ssd1306_Fill+0x1c>
 80011e2:	21ff      	movs	r1, #255	; 0xff
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <ssd1306_Fill+0x44>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	460a      	mov	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fa:	d3ed      	bcc.n	80011d8 <ssd1306_Fill+0x10>
    }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000218 	.word	0x20000218

08001210 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e016      	b.n	800124a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	3b50      	subs	r3, #80	; 0x50
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff34 	bl	8001090 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff31 	bl	8001090 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800122e:	2010      	movs	r0, #16
 8001230:	f7ff ff2e 	bl	8001090 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <ssd1306_UpdateScreen+0x4c>)
 800123a:	4413      	add	r3, r2
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff3e 	bl	80010c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	3301      	adds	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b07      	cmp	r3, #7
 800124e:	d9e5      	bls.n	800121c <ssd1306_UpdateScreen+0xc>
    }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000218 	.word	0x20000218

08001260 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	460b      	mov	r3, r1
 800126c:	71bb      	strb	r3, [r7, #6]
 800126e:	4613      	mov	r3, r2
 8001270:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db3d      	blt.n	80012f6 <ssd1306_DrawPixel+0x96>
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b3f      	cmp	r3, #63	; 0x3f
 800127e:	d83a      	bhi.n	80012f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d11a      	bne.n	80012bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001286:	79fa      	ldrb	r2, [r7, #7]
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	4603      	mov	r3, r0
 8001290:	01db      	lsls	r3, r3, #7
 8001292:	4413      	add	r3, r2
 8001294:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <ssd1306_DrawPixel+0xa4>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	b25a      	sxtb	r2, r3
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	b259      	sxtb	r1, r3
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4603      	mov	r3, r0
 80012b0:	01db      	lsls	r3, r3, #7
 80012b2:	4413      	add	r3, r2
 80012b4:	b2c9      	uxtb	r1, r1
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <ssd1306_DrawPixel+0xa4>)
 80012b8:	54d1      	strb	r1, [r2, r3]
 80012ba:	e01d      	b.n	80012f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	b2d8      	uxtb	r0, r3
 80012c4:	4603      	mov	r3, r0
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4413      	add	r3, r2
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <ssd1306_DrawPixel+0xa4>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	b25a      	sxtb	r2, r3
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	4013      	ands	r3, r2
 80012e4:	b259      	sxtb	r1, r3
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4603      	mov	r3, r0
 80012ea:	01db      	lsls	r3, r3, #7
 80012ec:	4413      	add	r3, r2
 80012ee:	b2c9      	uxtb	r1, r1
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <ssd1306_DrawPixel+0xa4>)
 80012f2:	54d1      	strb	r1, [r2, r3]
 80012f4:	e000      	b.n	80012f8 <ssd1306_DrawPixel+0x98>
        return;
 80012f6:	bf00      	nop
    }
}
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000218 	.word	0x20000218

08001308 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4604      	mov	r4, r0
 8001310:	1d38      	adds	r0, r7, #4
 8001312:	e880 0006 	stmia.w	r0, {r1, r2}
 8001316:	461a      	mov	r2, r3
 8001318:	4623      	mov	r3, r4
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	4613      	mov	r3, r2
 800131e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b1f      	cmp	r3, #31
 8001324:	d902      	bls.n	800132c <ssd1306_WriteChar+0x24>
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b7e      	cmp	r3, #126	; 0x7e
 800132a:	d901      	bls.n	8001330 <ssd1306_WriteChar+0x28>
        return 0;
 800132c:	2300      	movs	r3, #0
 800132e:	e06d      	b.n	800140c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <ssd1306_WriteChar+0x10c>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	2b80      	cmp	r3, #128	; 0x80
 800133c:	dc06      	bgt.n	800134c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <ssd1306_WriteChar+0x10c>)
 8001340:	885b      	ldrh	r3, [r3, #2]
 8001342:	461a      	mov	r2, r3
 8001344:	797b      	ldrb	r3, [r7, #5]
 8001346:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	dd01      	ble.n	8001350 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e05d      	b.n	800140c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	e04c      	b.n	80013f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3b20      	subs	r3, #32
 800135c:	7979      	ldrb	r1, [r7, #5]
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4619      	mov	r1, r3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	440b      	add	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	e034      	b.n	80013e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <ssd1306_WriteChar+0x10c>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b2d8      	uxtb	r0, r3
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <ssd1306_WriteChar+0x10c>)
 8001396:	885b      	ldrh	r3, [r3, #2]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4413      	add	r3, r2
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	7bba      	ldrb	r2, [r7, #14]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff ff5b 	bl	8001260 <ssd1306_DrawPixel>
 80013aa:	e016      	b.n	80013da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <ssd1306_WriteChar+0x10c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4413      	add	r3, r2
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <ssd1306_WriteChar+0x10c>)
 80013bc:	885b      	ldrh	r3, [r3, #2]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b2d9      	uxtb	r1, r3
 80013c8:	7bbb      	ldrb	r3, [r7, #14]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	f7ff ff43 	bl	8001260 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	3301      	adds	r3, #1
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	793b      	ldrb	r3, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d3c5      	bcc.n	8001376 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	797b      	ldrb	r3, [r7, #5]
 80013f2:	461a      	mov	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d3ad      	bcc.n	8001356 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <ssd1306_WriteChar+0x10c>)
 80013fc:	881a      	ldrh	r2, [r3, #0]
 80013fe:	793b      	ldrb	r3, [r7, #4]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4413      	add	r3, r2
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b03      	ldr	r3, [pc, #12]	; (8001414 <ssd1306_WriteChar+0x10c>)
 8001408:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3724      	adds	r7, #36	; 0x24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	20000618 	.word	0x20000618

08001418 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	1d38      	adds	r0, r7, #4
 8001422:	e880 0006 	stmia.w	r0, {r1, r2}
 8001426:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001428:	e012      	b.n	8001450 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	7818      	ldrb	r0, [r3, #0]
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	1d3a      	adds	r2, r7, #4
 8001432:	ca06      	ldmia	r2, {r1, r2}
 8001434:	f7ff ff68 	bl	8001308 <ssd1306_WriteChar>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d002      	beq.n	800144a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	e008      	b.n	800145c <ssd1306_WriteString+0x44>
        }
        str++;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3301      	adds	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e8      	bne.n	800142a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	781b      	ldrb	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	460a      	mov	r2, r1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	4613      	mov	r3, r2
 8001472:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <ssd1306_SetCursor+0x2c>)
 800147a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <ssd1306_SetCursor+0x2c>)
 8001482:	805a      	strh	r2, [r3, #2]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000618 	.word	0x20000618

08001494 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800149e:	2381      	movs	r3, #129	; 0x81
 80014a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdf3 	bl	8001090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fdef 	bl	8001090 <ssd1306_WriteCommand>
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80014cc:	23af      	movs	r3, #175	; 0xaf
 80014ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <ssd1306_SetDisplayOn+0x38>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	715a      	strb	r2, [r3, #5]
 80014d6:	e004      	b.n	80014e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80014d8:	23ae      	movs	r3, #174	; 0xae
 80014da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <ssd1306_SetDisplayOn+0x38>)
 80014de:	2200      	movs	r2, #0
 80014e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fdd3 	bl	8001090 <ssd1306_WriteCommand>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000618 	.word	0x20000618

080014f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 f901 	bl	800170a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001508:	200f      	movs	r0, #15
 800150a:	f7ff fca5 	bl	8000e58 <HAL_InitTick>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	e001      	b.n	800151e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151a:	f7ff fb55 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800151e:	79fb      	ldrb	r3, [r7, #7]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000028 	.word	0x20000028
 800154c:	20000620 	.word	0x20000620

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000620 	.word	0x20000620

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000028 	.word	0x20000028

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff4c 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001732:	f7ff ff61 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001736:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f7ff ffb1 	bl	80016a4 <NVIC_EncodePriority>
 8001742:	4602      	mov	r2, r0
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff80 	bl	8001650 <__NVIC_SetPriority>
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff54 	bl	8001614 <__NVIC_EnableIRQ>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e17f      	b.n	8001a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8171 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d130      	bne.n	8001816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ea:	2201      	movs	r2, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 0201 	and.w	r2, r3, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b03      	cmp	r3, #3
 8001820:	d118      	bne.n	8001854 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001828:	2201      	movs	r2, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	f003 0201 	and.w	r2, r3, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b03      	cmp	r3, #3
 800185e:	d017      	beq.n	8001890 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	6939      	ldr	r1, [r7, #16]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ac 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a5e      	ldr	r2, [pc, #376]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x242>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4f      	ldr	r2, [pc, #316]	; (8001aac <HAL_GPIO_Init+0x338>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <HAL_GPIO_Init+0x33c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <HAL_GPIO_Init+0x340>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4c      	ldr	r2, [pc, #304]	; (8001ab8 <HAL_GPIO_Init+0x344>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4b      	ldr	r2, [pc, #300]	; (8001abc <HAL_GPIO_Init+0x348>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x22a>
 800199a:	2306      	movs	r3, #6
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 800199e:	2307      	movs	r3, #7
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b6:	2300      	movs	r3, #0
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d6:	4b3b      	ldr	r3, [pc, #236]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f ae78 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	48000c00 	.word	0x48000c00
 8001ab8:	48001000 	.word	0x48001000
 8001abc:	48001400 	.word	0x48001400
 8001ac0:	48001800 	.word	0x48001800
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e08d      	b.n	8001c26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff f87a 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d108      	bne.n	8001b9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e007      	b.n	8001baa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69d9      	ldr	r1, [r3, #28]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1a      	ldr	r2, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	817b      	strh	r3, [r7, #10]
 8001c42:	460b      	mov	r3, r1
 8001c44:	813b      	strh	r3, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	f040 80f9 	bne.w	8001e4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x34>
 8001c5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0ed      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_Mem_Write+0x4e>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0e6      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c86:	f7ff fc63 	bl	8001550 <HAL_GetTick>
 8001c8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2319      	movs	r3, #25
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f955 	bl	8001f48 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d1      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2221      	movs	r2, #33	; 0x21
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd0:	88f8      	ldrh	r0, [r7, #6]
 8001cd2:	893a      	ldrh	r2, [r7, #8]
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f8b9 	bl	8001e58 <I2C_RequestMemoryWrite>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0a9      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d90e      	bls.n	8001d20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	22ff      	movs	r2, #255	; 0xff
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	8979      	ldrh	r1, [r7, #10]
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 facf 	bl	80022bc <I2C_TransferConfig>
 8001d1e:	e00f      	b.n	8001d40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	8979      	ldrh	r1, [r7, #10]
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fabe 	bl	80022bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f94e 	bl	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e07b      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d034      	beq.n	8001df8 <HAL_I2C_Mem_Write+0x1c8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d130      	bne.n	8001df8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2180      	movs	r1, #128	; 0x80
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f8d1 	bl	8001f48 <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e04d      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d90e      	bls.n	8001dd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	22ff      	movs	r2, #255	; 0xff
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	8979      	ldrh	r1, [r7, #10]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fa73 	bl	80022bc <I2C_TransferConfig>
 8001dd6:	e00f      	b.n	8001df8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	8979      	ldrh	r1, [r7, #10]
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fa62 	bl	80022bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d19e      	bne.n	8001d40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f934 	bl	8002074 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e01a      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_I2C_Mem_Write+0x224>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	fe00e800 	.word	0xfe00e800

08001e58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	817b      	strh	r3, [r7, #10]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	813b      	strh	r3, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	8979      	ldrh	r1, [r7, #10]
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <I2C_RequestMemoryWrite+0xa4>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa1b 	bl	80022bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	69b9      	ldr	r1, [r7, #24]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f8ab 	bl	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e02c      	b.n	8001ef4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eaa:	e015      	b.n	8001ed8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eac:	893b      	ldrh	r3, [r7, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	69b9      	ldr	r1, [r7, #24]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f891 	bl	8001fe6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e012      	b.n	8001ef4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ece:	893b      	ldrh	r3, [r7, #8]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f830 	bl	8001f48 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	80002000 	.word	0x80002000

08001f00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d103      	bne.n	8001f1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d007      	beq.n	8001f3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	619a      	str	r2, [r3, #24]
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f58:	e031      	b.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d02d      	beq.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f62:	f7ff faf5 	bl	8001550 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d302      	bcc.n	8001f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d122      	bne.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d113      	bne.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00f      	b.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d0be      	beq.n	8001f5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ff2:	e033      	b.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f87f 	bl	80020fc <I2C_IsErrorOccurred>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e031      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d025      	beq.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002010:	f7ff fa9e 	bl	8001550 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d302      	bcc.n	8002026 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11a      	bne.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d013      	beq.n	800205c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e007      	b.n	800206c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d1c4      	bne.n	8001ff4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002080:	e02f      	b.n	80020e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f838 	bl	80020fc <I2C_IsErrorOccurred>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e02d      	b.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002096:	f7ff fa5b 	bl	8001550 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d11a      	bne.n	80020e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d013      	beq.n	80020e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0220 	orr.w	r2, r3, #32
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e007      	b.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d1c8      	bne.n	8002082 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d068      	beq.n	80021fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2210      	movs	r2, #16
 800212e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002130:	e049      	b.n	80021c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d045      	beq.n	80021c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7ff fa09 	bl	8001550 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_IsErrorOccurred+0x54>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d13a      	bne.n	80021c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002162:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002172:	d121      	bne.n	80021b8 <I2C_IsErrorOccurred+0xbc>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217a:	d01d      	beq.n	80021b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b20      	cmp	r3, #32
 8002180:	d01a      	beq.n	80021b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002190:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002192:	f7ff f9dd 	bl	8001550 <HAL_GetTick>
 8002196:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002198:	e00e      	b.n	80021b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800219a:	f7ff f9d9 	bl	8001550 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b19      	cmp	r3, #25
 80021a6:	d907      	bls.n	80021b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f043 0320 	orr.w	r3, r3, #32
 80021ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80021b6:	e006      	b.n	80021c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d1e9      	bne.n	800219a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d003      	beq.n	80021dc <I2C_IsErrorOccurred+0xe0>
 80021d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0aa      	beq.n	8002132 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2220      	movs	r2, #32
 80021ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002260:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01c      	beq.n	80022aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fe45 	bl	8001f00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <I2C_IsErrorOccurred+0x1bc>)
 8002282:	400b      	ands	r3, r1
 8002284:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	fe00e800 	.word	0xfe00e800

080022bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	4613      	mov	r3, r2
 80022cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022d4:	7a7b      	ldrb	r3, [r7, #9]
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	0d5b      	lsrs	r3, r3, #21
 80022f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <I2C_TransferConfig+0x60>)
 80022fc:	430b      	orrs	r3, r1
 80022fe:	43db      	mvns	r3, r3
 8002300:	ea02 0103 	and.w	r1, r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	430a      	orrs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	03ff63ff 	.word	0x03ff63ff

08002320 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	d138      	bne.n	80023a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002340:	2302      	movs	r3, #2
 8002342:	e032      	b.n	80023aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002372:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d139      	bne.n	8002440 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e033      	b.n	8002442 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2224      	movs	r2, #36	; 0x24
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002408:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_PWREx_GetVoltageRange+0x18>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000

0800246c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247a:	d130      	bne.n	80024de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d038      	beq.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2232      	movs	r2, #50	; 0x32
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	3301      	adds	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b0:	e002      	b.n	80024b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d102      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f2      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	d110      	bne.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e00f      	b.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ea:	d007      	beq.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40007000 	.word	0x40007000
 8002510:	20000018 	.word	0x20000018
 8002514:	431bde83 	.word	0x431bde83

08002518 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e3ca      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252a:	4b97      	ldr	r3, [pc, #604]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	4b94      	ldr	r3, [pc, #592]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80e4 	beq.w	8002714 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_RCC_OscConfig+0x4a>
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b0c      	cmp	r3, #12
 8002556:	f040 808b 	bne.w	8002670 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b01      	cmp	r3, #1
 800255e:	f040 8087 	bne.w	8002670 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x62>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e3a2      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_RCC_OscConfig+0x7c>
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002592:	e005      	b.n	80025a0 <HAL_RCC_OscConfig+0x88>
 8002594:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d223      	bcs.n	80025ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd87 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e383      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	496d      	ldr	r1, [pc, #436]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4968      	ldr	r1, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
 80025ea:	e025      	b.n	8002638 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a65      	ldr	r2, [pc, #404]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4960      	ldr	r1, [pc, #384]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	495b      	ldr	r1, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fd47 	bl	80030bc <RCC_SetFlashLatencyFromMSIRange>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e343      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002638:	f000 fc4a 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	4950      	ldr	r1, [pc, #320]	; (800278c <HAL_RCC_OscConfig+0x274>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	4a4e      	ldr	r2, [pc, #312]	; (8002790 <HAL_RCC_OscConfig+0x278>)
 8002656:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002658:	4b4e      	ldr	r3, [pc, #312]	; (8002794 <HAL_RCC_OscConfig+0x27c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fbfb 	bl	8000e58 <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d052      	beq.n	8002712 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	e327      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d032      	beq.n	80026de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a42      	ldr	r2, [pc, #264]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002684:	f7fe ff64 	bl	8001550 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800268c:	f7fe ff60 	bl	8001550 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e310      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a36      	ldr	r2, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4931      	ldr	r1, [pc, #196]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	492c      	ldr	r1, [pc, #176]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	e01a      	b.n	8002714 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026de:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a29      	ldr	r2, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ea:	f7fe ff31 	bl	8001550 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f2:	f7fe ff2d 	bl	8001550 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e2dd      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1da>
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002712:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d074      	beq.n	800280a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x21a>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d10e      	bne.n	800274a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d10b      	bne.n	800274a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d064      	beq.n	8002808 <HAL_RCC_OscConfig+0x2f0>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d160      	bne.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e2ba      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x24a>
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800275a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e026      	b.n	80027b0 <HAL_RCC_OscConfig+0x298>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276a:	d115      	bne.n	8002798 <HAL_RCC_OscConfig+0x280>
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a02      	ldr	r2, [pc, #8]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 800277e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x298>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	08008920 	.word	0x08008920
 8002790:	20000018 	.word	0x20000018
 8002794:	20000024 	.word	0x20000024
 8002798:	4ba0      	ldr	r3, [pc, #640]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a9f      	ldr	r2, [pc, #636]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b9d      	ldr	r3, [pc, #628]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a9c      	ldr	r2, [pc, #624]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe feca 	bl	8001550 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fec6 	bl	8001550 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e276      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2a8>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe feb6 	bl	8001550 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe feb2 	bl	8001550 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e262      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x2d0>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d060      	beq.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x310>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d119      	bne.n	8002856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d116      	bne.n	8002856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x328>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e23f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	4973      	ldr	r1, [pc, #460]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e040      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d023      	beq.n	80028a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285e:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fe71 	bl	8001550 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe fe6d 	bl	8001550 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e21d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002884:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	495f      	ldr	r1, [pc, #380]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fe4d 	bl	8001550 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ba:	f7fe fe49 	bl	8001550 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1f9      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d03c      	beq.n	800295e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01c      	beq.n	8002926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	4a4a      	ldr	r2, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fe28 	bl	8001550 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fe24 	bl	8001550 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1d4      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCC_OscConfig+0x3ec>
 8002924:	e01b      	b.n	800295e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fe0b 	bl	8001550 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe fe07 	bl	8001550 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1b7      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1ef      	bne.n	800293e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80a6 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
 8002988:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x508>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d118      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fdce 	bl	8001550 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b8:	f7fe fdca 	bl	8001550 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e17a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0x508>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_RCC_OscConfig+0x4d8>
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ee:	e029      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_OscConfig+0x50c>
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <HAL_RCC_OscConfig+0x504>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a9b      	ldr	r2, [pc, #620]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a34:	4b98      	ldr	r3, [pc, #608]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a97      	ldr	r2, [pc, #604]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fd80 	bl	8001550 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fd7c 	bl	8001550 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e12a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6a:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ed      	beq.n	8002a54 <HAL_RCC_OscConfig+0x53c>
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fd69 	bl	8001550 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fd65 	bl	8001550 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e113      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a98:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ed      	bne.n	8002a82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a79      	ldr	r2, [pc, #484]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80fe 	beq.w	8002cbe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	f040 80d0 	bne.w	8002c6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002acc:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d130      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	3b01      	subs	r3, #1
 8002aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d127      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11f      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b0c:	2a07      	cmp	r2, #7
 8002b0e:	bf14      	ite	ne
 8002b10:	2201      	movne	r2, #1
 8002b12:	2200      	moveq	r2, #0
 8002b14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d113      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d06e      	beq.n	8002c20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d069      	beq.n	8002c1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0ad      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b64:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b70:	f7fe fcee 	bl	8001550 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fcea 	bl	8001550 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e09a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_RCC_OscConfig+0x784>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb0:	0212      	lsls	r2, r2, #8
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bb8:	0852      	lsrs	r2, r2, #1
 8002bba:	3a01      	subs	r2, #1
 8002bbc:	0552      	lsls	r2, r2, #21
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bc4:	0852      	lsrs	r2, r2, #1
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0652      	lsls	r2, r2, #25
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	0912      	lsrs	r2, r2, #4
 8002bd2:	0452      	lsls	r2, r2, #17
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	4930      	ldr	r1, [pc, #192]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf4:	f7fe fcac 	bl	8001550 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fca8 	bl	8001550 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e058      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1a:	e050      	b.n	8002cbe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d148      	bne.n	8002cbe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c44:	f7fe fc84 	bl	8001550 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fc80 	bl	8001550 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e030      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x734>
 8002c6a:	e028      	b.n	8002cbe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d023      	beq.n	8002cba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_RCC_OscConfig+0x780>)
 8002c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fc67 	bl	8001550 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c86:	f7fe fc63 	bl	8001550 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d905      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e013      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_OscConfig+0x7b0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ec      	bne.n	8002c86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_OscConfig+0x7b0>)
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	4905      	ldr	r1, [pc, #20]	; (8002cc8 <HAL_RCC_OscConfig+0x7b0>)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x7b4>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60cb      	str	r3, [r1, #12]
 8002cb8:	e001      	b.n	8002cbe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	feeefffc 	.word	0xfeeefffc

08002cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0e7      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b75      	ldr	r3, [pc, #468]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4970      	ldr	r1, [pc, #448]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b6e      	ldr	r3, [pc, #440]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0cf      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d908      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4960      	ldr	r1, [pc, #384]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d04c      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d56:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d121      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0a6      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6e:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e09a      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d86:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e08e      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e086      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4943      	ldr	r1, [pc, #268]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe fbca 	bl	8001550 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe fbc6 	bl	8001550 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e06e      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d208      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	492b      	ldr	r1, [pc, #172]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d210      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e24:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 0207 	bic.w	r2, r3, #7
 8002e2c:	4923      	ldr	r1, [pc, #140]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCC_ClockConfig+0x1ec>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e036      	b.n	8002eb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4918      	ldr	r1, [pc, #96]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4910      	ldr	r1, [pc, #64]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e84:	f000 f824 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f4>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ea4:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1fc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd ffd5 	bl	8000e58 <HAL_InitTick>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08008920 	.word	0x08008920
 8002ec8:	20000018 	.word	0x20000018
 8002ecc:	20000024 	.word	0x20000024

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d11e      	bne.n	8002f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f04:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e005      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f2c:	4a2b      	ldr	r2, [pc, #172]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d102      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e004      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d134      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d003      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xac>
 8002f74:	e005      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f78:	617b      	str	r3, [r7, #20]
      break;
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f7e:	617b      	str	r3, [r7, #20]
      break;
 8002f80:	e002      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	617b      	str	r3, [r7, #20]
      break;
 8002f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	3301      	adds	r3, #1
 8002f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	fb03 f202 	mul.w	r2, r3, r2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	0e5b      	lsrs	r3, r3, #25
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08008938 	.word	0x08008938
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	007a1200 	.word	0x007a1200

08002fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000018 	.word	0x20000018

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003004:	f7ff fff0 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4904      	ldr	r1, [pc, #16]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	08008930 	.word	0x08008930

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003030:	f7ff ffda 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0adb      	lsrs	r3, r3, #11
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4904      	ldr	r1, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	08008930 	.word	0x08008930

08003058 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	220f      	movs	r2, #15
 8003066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_RCC_GetClockConfig+0x5c>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	08db      	lsrs	r3, r3, #3
 8003092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCC_GetClockConfig+0x60>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0207 	and.w	r2, r3, #7
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40022000 	.word	0x40022000

080030bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c8:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d4:	f7ff f9bc 	bl	8002450 <HAL_PWREx_GetVoltageRange>
 80030d8:	6178      	str	r0, [r7, #20]
 80030da:	e014      	b.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	4a24      	ldr	r2, [pc, #144]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	; 0x58
 80030e8:	4b22      	ldr	r3, [pc, #136]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f4:	f7ff f9ac 	bl	8002450 <HAL_PWREx_GetVoltageRange>
 80030f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fe:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800310c:	d10b      	bne.n	8003126 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d919      	bls.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2ba0      	cmp	r3, #160	; 0xa0
 8003118:	d902      	bls.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311a:	2302      	movs	r3, #2
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e013      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003120:	2301      	movs	r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	e010      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d902      	bls.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800312c:	2303      	movs	r3, #3
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e00a      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d102      	bne.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003138:	2302      	movs	r3, #2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e004      	b.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b70      	cmp	r3, #112	; 0x70
 8003142:	d101      	bne.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003144:	2301      	movs	r3, #1
 8003146:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	4909      	ldr	r1, [pc, #36]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	40022000 	.word	0x40022000

0800317c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003184:	2300      	movs	r3, #0
 8003186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003188:	2300      	movs	r3, #0
 800318a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003194:	2b00      	cmp	r3, #0
 8003196:	d041      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a0:	d02a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a6:	d824      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ac:	d008      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031b2:	d81e      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031bc:	d010      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031be:	e018      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031c0:	4b86      	ldr	r3, [pc, #536]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4a85      	ldr	r2, [pc, #532]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031cc:	e015      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fabb 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031de:	e00c      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3320      	adds	r3, #32
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fba6 	bl	8003938 <RCCEx_PLLSAI2_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f0:	e003      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	74fb      	strb	r3, [r7, #19]
      break;
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003200:	4b76      	ldr	r3, [pc, #472]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800320e:	4973      	ldr	r1, [pc, #460]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003216:	e001      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d041      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003230:	d02a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003232:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003236:	d824      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323c:	d008      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800323e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003242:	d81e      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800324e:	e018      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003250:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800325c:	e015      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa73 	bl	8003750 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800326e:	e00c      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3320      	adds	r3, #32
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fb5e 	bl	8003938 <RCCEx_PLLSAI2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003280:	e003      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	74fb      	strb	r3, [r7, #19]
      break;
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003290:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	494f      	ldr	r1, [pc, #316]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032a6:	e001      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80a0 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032de:	6593      	str	r3, [r2, #88]	; 0x58
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fc:	f7fe f928 	bl	8001550 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003302:	e009      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fe f924 	bl	8001550 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d902      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	74fb      	strb	r3, [r7, #19]
        break;
 8003316:	e005      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d15c      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332a:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01f      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d019      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003354:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003374:	4a19      	ldr	r2, [pc, #100]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe f8e3 	bl	8001550 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	e00b      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe f8df 	bl	8001550 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d902      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	74fb      	strb	r3, [r7, #19]
            break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ec      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033d2:	e009      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
 80033d8:	e006      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e8:	7c7b      	ldrb	r3, [r7, #17]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b9e      	ldr	r3, [pc, #632]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	4a9d      	ldr	r2, [pc, #628]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4b98      	ldr	r3, [pc, #608]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	4994      	ldr	r1, [pc, #592]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003428:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f023 020c 	bic.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	498c      	ldr	r1, [pc, #560]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800344a:	4b87      	ldr	r3, [pc, #540]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4983      	ldr	r1, [pc, #524]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346c:	4b7e      	ldr	r3, [pc, #504]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	497b      	ldr	r1, [pc, #492]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	4972      	ldr	r1, [pc, #456]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034be:	496a      	ldr	r1, [pc, #424]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034d2:	4b65      	ldr	r3, [pc, #404]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	4961      	ldr	r1, [pc, #388]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f4:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	4959      	ldr	r1, [pc, #356]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003516:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	4950      	ldr	r1, [pc, #320]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	4948      	ldr	r1, [pc, #288]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	493f      	ldr	r1, [pc, #252]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d028      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	4937      	ldr	r1, [pc, #220]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359a:	d106      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	e011      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b2:	d10c      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f8c8 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d028      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	491f      	ldr	r1, [pc, #124]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f8:	d106      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003604:	60d3      	str	r3, [r2, #12]
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f899 	bl	8003750 <RCCEx_PLLSAI1_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02b      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a02      	ldr	r2, [pc, #8]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003662:	60d3      	str	r3, [r2, #12]
 8003664:	e014      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f867 	bl	8003750 <RCCEx_PLLSAI1_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02f      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	4928      	ldr	r1, [pc, #160]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ba:	d10d      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3304      	adds	r3, #4
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f844 	bl	8003750 <RCCEx_PLLSAI1_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d014      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	74bb      	strb	r3, [r7, #18]
 80036d6:	e011      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3320      	adds	r3, #32
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f925 	bl	8003938 <RCCEx_PLLSAI2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373a:	4904      	ldr	r1, [pc, #16]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003742:	7cbb      	ldrb	r3, [r7, #18]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000

08003750 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375e:	4b75      	ldr	r3, [pc, #468]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800376a:	4b72      	ldr	r3, [pc, #456]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d10d      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
       ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
       ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d047      	beq.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e044      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d018      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x86>
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d825      	bhi.n	80037f4 <RCCEx_PLLSAI1_Config+0xa4>
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <RCCEx_PLLSAI1_Config+0x62>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d009      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x74>
 80037b0:	e020      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037b2:	4b60      	ldr	r3, [pc, #384]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c2:	e01a      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e013      	b.n	80037fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037e2:	4b54      	ldr	r3, [pc, #336]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037f2:	e006      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e004      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003802:	bf00      	nop
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800380a:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	430b      	orrs	r3, r1
 8003820:	4944      	ldr	r1, [pc, #272]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d17d      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a40      	ldr	r2, [pc, #256]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003838:	f7fd fe8a 	bl	8001550 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003840:	f7fd fe86 	bl	8001550 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
        break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ef      	bne.n	8003840 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d160      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d111      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800386c:	4b31      	ldr	r3, [pc, #196]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6892      	ldr	r2, [r2, #8]
 800387c:	0211      	lsls	r1, r2, #8
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	0912      	lsrs	r2, r2, #4
 8003884:	0452      	lsls	r2, r2, #17
 8003886:	430a      	orrs	r2, r1
 8003888:	492a      	ldr	r1, [pc, #168]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	610b      	str	r3, [r1, #16]
 800388e:	e027      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d112      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003896:	4b27      	ldr	r3, [pc, #156]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800389e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6892      	ldr	r2, [r2, #8]
 80038a6:	0211      	lsls	r1, r2, #8
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6912      	ldr	r2, [r2, #16]
 80038ac:	0852      	lsrs	r2, r2, #1
 80038ae:	3a01      	subs	r2, #1
 80038b0:	0552      	lsls	r2, r2, #21
 80038b2:	430a      	orrs	r2, r1
 80038b4:	491f      	ldr	r1, [pc, #124]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	610b      	str	r3, [r1, #16]
 80038ba:	e011      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038bc:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6952      	ldr	r2, [r2, #20]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0652      	lsls	r2, r2, #25
 80038d8:	430a      	orrs	r2, r1
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038e0:	4b14      	ldr	r3, [pc, #80]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fe30 	bl	8001550 <HAL_GetTick>
 80038f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038f2:	e009      	b.n	8003908 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038f4:	f7fd fe2c 	bl	8001550 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d902      	bls.n	8003908 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	73fb      	strb	r3, [r7, #15]
          break;
 8003906:	e005      	b.n	8003914 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003946:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d018      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003952:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0203 	and.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d10d      	bne.n	800397e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
       ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800396a:	4b61      	ldr	r3, [pc, #388]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
       ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d047      	beq.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e044      	b.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d018      	beq.n	80039be <RCCEx_PLLSAI2_Config+0x86>
 800398c:	2b03      	cmp	r3, #3
 800398e:	d825      	bhi.n	80039dc <RCCEx_PLLSAI2_Config+0xa4>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d002      	beq.n	800399a <RCCEx_PLLSAI2_Config+0x62>
 8003994:	2b02      	cmp	r3, #2
 8003996:	d009      	beq.n	80039ac <RCCEx_PLLSAI2_Config+0x74>
 8003998:	e020      	b.n	80039dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399a:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11d      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039aa:	e01a      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e013      	b.n	80039e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039be:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ca:	4b49      	ldr	r3, [pc, #292]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039da:	e006      	b.n	80039ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e004      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f2:	4b3f      	ldr	r3, [pc, #252]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	430b      	orrs	r3, r1
 8003a08:	4939      	ldr	r1, [pc, #228]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d167      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a14:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a35      	ldr	r2, [pc, #212]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a20:	f7fd fd96 	bl	8001550 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a26:	e009      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a28:	f7fd fd92 	bl	8001550 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d902      	bls.n	8003a3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3a:	e005      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ef      	bne.n	8003a28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d14a      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6892      	ldr	r2, [r2, #8]
 8003a64:	0211      	lsls	r1, r2, #8
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68d2      	ldr	r2, [r2, #12]
 8003a6a:	0912      	lsrs	r2, r2, #4
 8003a6c:	0452      	lsls	r2, r2, #17
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	491f      	ldr	r1, [pc, #124]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	614b      	str	r3, [r1, #20]
 8003a76:	e011      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	0211      	lsls	r1, r2, #8
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6912      	ldr	r2, [r2, #16]
 8003a8e:	0852      	lsrs	r2, r2, #1
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0652      	lsls	r2, r2, #25
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4916      	ldr	r1, [pc, #88]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fd52 	bl	8001550 <HAL_GetTick>
 8003aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aae:	e009      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ab0:	f7fd fd4e 	bl	8001550 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac2:	e005      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ef      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4904      	ldr	r1, [pc, #16]	; (8003af0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d079      	beq.n	8003bfa <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f8da 	bl	8000cd4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d058      	beq.n	8003be8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ca      	movs	r2, #202	; 0xca
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2253      	movs	r2, #83	; 0x53
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fbda 	bl	8004300 <RTC_EnterInitMode>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d127      	bne.n	8003ba6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b68:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6919      	ldr	r1, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fbde 	bl	8004368 <RTC_ExitInitMode>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0203 	bic.w	r2, r2, #3
 8003bc4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
 8003be6:	e001      	b.n	8003bec <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_RTC_SetTime+0x1a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e08b      	b.n	8003d36 <HAL_RTC_SetTime+0x132>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	22ca      	movs	r2, #202	; 0xca
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2253      	movs	r2, #83	; 0x53
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fb5e 	bl	8004300 <RTC_EnterInitMode>
 8003c44:	4603      	mov	r3, r0
 8003c46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d163      	bne.n	8003d16 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d126      	bne.n	8003ca2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fbb9 	bl	80043e4 <RTC_ByteToBcd2>
 8003c72:	4603      	mov	r3, r0
 8003c74:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fbb2 	bl	80043e4 <RTC_ByteToBcd2>
 8003c80:	4603      	mov	r3, r0
 8003c82:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c84:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	789b      	ldrb	r3, [r3, #2]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fbaa 	bl	80043e4 <RTC_ByteToBcd2>
 8003c90:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c92:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	78db      	ldrb	r3, [r3, #3]
 8003c9a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e018      	b.n	8003cd4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cc2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cc8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	78db      	ldrb	r3, [r3, #3]
 8003cce:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fb2b 	bl	8004368 <RTC_ExitInitMode>
 8003d12:	4603      	mov	r3, r0
 8003d14:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d103      	bne.n	8003d2c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd90      	pop	{r4, r7, pc}

08003d3e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d6c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	0d9b      	lsrs	r3, r3, #22
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11a      	bne.n	8003dec <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fb32 	bl	8004424 <RTC_Bcd2ToByte>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fb29 	bl	8004424 <RTC_Bcd2ToByte>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	789b      	ldrb	r3, [r3, #2]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fb20 	bl	8004424 <RTC_Bcd2ToByte>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003df6:	b590      	push	{r4, r7, lr}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_RTC_SetDate+0x1a>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e075      	b.n	8003efc <HAL_RTC_SetDate+0x106>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10e      	bne.n	8003e44 <HAL_RTC_SetDate+0x4e>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	785b      	ldrb	r3, [r3, #1]
 8003e36:	f023 0310 	bic.w	r3, r3, #16
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	330a      	adds	r3, #10
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d11c      	bne.n	8003e84 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	78db      	ldrb	r3, [r3, #3]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fac8 	bl	80043e4 <RTC_ByteToBcd2>
 8003e54:	4603      	mov	r3, r0
 8003e56:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fac1 	bl	80043e4 <RTC_ByteToBcd2>
 8003e62:	4603      	mov	r3, r0
 8003e64:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e66:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	789b      	ldrb	r3, [r3, #2]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fab9 	bl	80043e4 <RTC_ByteToBcd2>
 8003e72:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e74:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e00e      	b.n	8003ea2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	78db      	ldrb	r3, [r3, #3]
 8003e88:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e90:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e96:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	22ca      	movs	r2, #202	; 0xca
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2253      	movs	r2, #83	; 0x53
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fa24 	bl	8004300 <RTC_EnterInitMode>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10c      	bne.n	8003edc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ecc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ed0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fa48 	bl	8004368 <RTC_ExitInitMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	22ff      	movs	r2, #255	; 0xff
 8003ee2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}

08003f04 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	0a1b      	lsrs	r3, r3, #8
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0b5b      	lsrs	r3, r3, #13
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d11a      	bne.n	8003f94 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	78db      	ldrb	r3, [r3, #3]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa5e 	bl	8004424 <RTC_Bcd2ToByte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fa55 	bl	8004424 <RTC_Bcd2ToByte>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	789b      	ldrb	r3, [r3, #2]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa4c 	bl	8004424 <RTC_Bcd2ToByte>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003fa0:	b590      	push	{r4, r7, lr}
 8003fa2:	b089      	sub	sp, #36	; 0x24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_RTC_SetAlarm_IT+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e127      	b.n	800420a <HAL_RTC_SetAlarm_IT+0x26a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d137      	bne.n	8004040 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f9fb 	bl	80043e4 <RTC_ByteToBcd2>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f9f4 	bl	80043e4 <RTC_ByteToBcd2>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004000:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9ec 	bl	80043e4 <RTC_ByteToBcd2>
 800400c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800400e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	78db      	ldrb	r3, [r3, #3]
 8004016:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004018:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f9de 	bl	80043e4 <RTC_ByteToBcd2>
 8004028:	4603      	mov	r3, r0
 800402a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800402c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004034:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800403a:	4313      	orrs	r3, r2
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e023      	b.n	8004088 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2200      	movs	r2, #0
 8004052:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004060:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004066:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	78db      	ldrb	r3, [r3, #3]
 800406c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800406e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004076:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004078:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800407e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004084:	4313      	orrs	r3, r2
 8004086:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	22ca      	movs	r2, #202	; 0xca
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2253      	movs	r2, #83	; 0x53
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ac:	d14a      	bne.n	8004144 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80040ce:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80040d0:	f7fd fa3e 	bl	8001550 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80040d6:	e015      	b.n	8004104 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040d8:	f7fd fa3a 	bl	8001550 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040e6:	d90d      	bls.n	8004104 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2203      	movs	r2, #3
 80040f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e082      	b.n	800420a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0e2      	beq.n	80040d8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004130:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	e049      	b.n	80041d8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004152:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004164:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004166:	f7fd f9f3 	bl	8001550 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800416c:	e015      	b.n	800419a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800416e:	f7fd f9ef 	bl	8001550 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417c:	d90d      	bls.n	800419a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2203      	movs	r2, #3
 800418a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e037      	b.n	800420a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0e2      	beq.n	800416e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_RTC_SetAlarm_IT+0x274>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <HAL_RTC_SetAlarm_IT+0x274>)
 80041de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RTC_SetAlarm_IT+0x274>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <HAL_RTC_SetAlarm_IT+0x274>)
 80041ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd90      	pop	{r4, r7, pc}
 8004212:	bf00      	nop
 8004214:	40010400 	.word	0x40010400

08004218 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004220:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004222:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004226:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00b      	beq.n	800425c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004254:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f824 	bl	80042a4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d012      	beq.n	8004290 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004288:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f96f 	bl	800456e <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40010400 	.word	0x40010400

080042a4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <HAL_RTC_WaitForSynchro+0x44>)
 80042c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80042c8:	f7fd f942 	bl	8001550 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042ce:	e009      	b.n	80042e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042d0:	f7fd f93e 	bl	8001550 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e007      	b.n	80042f4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ee      	beq.n	80042d0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	0003ff5f 	.word	0x0003ff5f

08004300 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d120      	bne.n	800435c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004324:	f7fd f914 	bl	8001550 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800432a:	e00d      	b.n	8004348 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800432c:	f7fd f910 	bl	8001550 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800433a:	d905      	bls.n	8004348 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2203      	movs	r2, #3
 8004344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <RTC_EnterInitMode+0x5c>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d1e7      	bne.n	800432c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <RTC_ExitInitMode+0x78>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <RTC_ExitInitMode+0x78>)
 800437a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <RTC_ExitInitMode+0x78>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff93 	bl	80042b8 <HAL_RTC_WaitForSynchro>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01e      	beq.n	80043d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2203      	movs	r2, #3
 800439c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e017      	b.n	80043d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <RTC_ExitInitMode+0x78>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4a0d      	ldr	r2, [pc, #52]	; (80043e0 <RTC_ExitInitMode+0x78>)
 80043ac:	f023 0320 	bic.w	r3, r3, #32
 80043b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff80 	bl	80042b8 <HAL_RTC_WaitForSynchro>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2203      	movs	r2, #3
 80043c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <RTC_ExitInitMode+0x78>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <RTC_ExitInitMode+0x78>)
 80043d0:	f043 0320 	orr.w	r3, r3, #32
 80043d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40002800 	.word	0x40002800

080043e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80043f6:	e005      	b.n	8004404 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	3b0a      	subs	r3, #10
 8004402:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	2b09      	cmp	r3, #9
 8004408:	d8f6      	bhi.n	80043f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	b2da      	uxtb	r2, r3
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	4313      	orrs	r3, r2
 8004416:	b2db      	uxtb	r3, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	4413      	add	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	b2da      	uxtb	r2, r3
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4413      	add	r3, r2
 800444a:	b2db      	uxtb	r3, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e034      	b.n	80044da <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	22ca      	movs	r2, #202	; 0xca
 8004486:	625a      	str	r2, [r3, #36]	; 0x24
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2253      	movs	r2, #83	; 0x53
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800449e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6899      	ldr	r1, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	22ff      	movs	r2, #255	; 0xff
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RTCEx_SetRefClock+0x16>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e034      	b.n	8004566 <HAL_RTCEx_SetRefClock+0x80>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	22ca      	movs	r2, #202	; 0xca
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2253      	movs	r2, #83	; 0x53
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff feef 	bl	8004300 <RTC_EnterInitMode>
 8004522:	4603      	mov	r3, r0
 8004524:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0210 	orr.w	r2, r2, #16
 800453a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff13 	bl	8004368 <RTC_ExitInitMode>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	22ff      	movs	r2, #255	; 0xff
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e049      	b.n	8004628 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f841 	bl	8004630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f000 f9d9 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3708      	adds	r7, #8
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d001      	beq.n	800465c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e04f      	b.n	80046fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_TIM_Base_Start_IT+0xc4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01d      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004686:	d018      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_TIM_Base_Start_IT+0xc8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <HAL_TIM_Base_Start_IT+0xcc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_TIM_Base_Start_IT+0xd0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_TIM_Base_Start_IT+0xd4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_TIM_Base_Start_IT+0x76>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <HAL_TIM_Base_Start_IT+0xd8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d115      	bne.n	80046e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_TIM_Base_Start_IT+0xdc>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b06      	cmp	r3, #6
 80046ca:	d015      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d2:	d011      	beq.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	e008      	b.n	80046f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e000      	b.n	80046fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	00010007 	.word	0x00010007

08004724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d020      	beq.n	8004788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0202 	mvn.w	r2, #2
 8004758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8e4 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8d6 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8e7 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d020      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01b      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0204 	mvn.w	r2, #4
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2202      	movs	r2, #2
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8be 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8b0 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8c1 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d020      	beq.n	8004820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01b      	beq.n	8004820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0208 	mvn.w	r2, #8
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f898 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f88a 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f89b 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d020      	beq.n	800486c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f06f 0210 	mvn.w	r2, #16
 800483c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2208      	movs	r2, #8
 8004842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f872 	bl	800493c <HAL_TIM_IC_CaptureCallback>
 8004858:	e005      	b.n	8004866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f864 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f875 	bl	8004950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00c      	beq.n	8004890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0201 	mvn.w	r2, #1
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc f984 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00c      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f906 	bl	8004ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8fe 	bl	8004ad4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f834 	bl	8004964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0220 	mvn.w	r2, #32
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8c6 	bl	8004aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d013      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d00f      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3d      	ldr	r2, [pc, #244]	; (8004a90 <TIM_Base_SetConfig+0x118>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3c      	ldr	r2, [pc, #240]	; (8004a94 <TIM_Base_SetConfig+0x11c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3b      	ldr	r2, [pc, #236]	; (8004a98 <TIM_Base_SetConfig+0x120>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d8:	d01b      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2c      	ldr	r2, [pc, #176]	; (8004a90 <TIM_Base_SetConfig+0x118>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d017      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2b      	ldr	r2, [pc, #172]	; (8004a94 <TIM_Base_SetConfig+0x11c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <TIM_Base_SetConfig+0x120>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a28      	ldr	r2, [pc, #160]	; (8004aa0 <TIM_Base_SetConfig+0x128>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a27      	ldr	r2, [pc, #156]	; (8004aa4 <TIM_Base_SetConfig+0x12c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_Base_SetConfig+0x9a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a26      	ldr	r2, [pc, #152]	; (8004aa8 <TIM_Base_SetConfig+0x130>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d108      	bne.n	8004a24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <TIM_Base_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <TIM_Base_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <TIM_Base_SetConfig+0x128>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <TIM_Base_SetConfig+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <TIM_Base_SetConfig+0x130>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d103      	bne.n	8004a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40013400 	.word	0x40013400
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40014400 	.word	0x40014400
 8004aa8:	40014800 	.word	0x40014800

08004aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e040      	b.n	8004b7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc f948 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2224      	movs	r2, #36	; 0x24
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fae0 	bl	80050f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f825 	bl	8004b84 <UART_SetConfig>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e01b      	b.n	8004b7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb5f 	bl	8005238 <UART_CheckIdleState>
 8004b7a:	4603      	mov	r3, r0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b08a      	sub	sp, #40	; 0x28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4ba4      	ldr	r3, [pc, #656]	; (8004e44 <UART_SetConfig+0x2c0>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a99      	ldr	r2, [pc, #612]	; (8004e48 <UART_SetConfig+0x2c4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	4313      	orrs	r3, r2
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a90      	ldr	r2, [pc, #576]	; (8004e4c <UART_SetConfig+0x2c8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d126      	bne.n	8004c5c <UART_SetConfig+0xd8>
 8004c0e:	4b90      	ldr	r3, [pc, #576]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d81b      	bhi.n	8004c54 <UART_SetConfig+0xd0>
 8004c1c:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <UART_SetConfig+0xa0>)
 8004c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c22:	bf00      	nop
 8004c24:	08004c35 	.word	0x08004c35
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	08004c3d 	.word	0x08004c3d
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e116      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e112      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e10e      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e10a      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e106      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7c      	ldr	r2, [pc, #496]	; (8004e54 <UART_SetConfig+0x2d0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d138      	bne.n	8004cd8 <UART_SetConfig+0x154>
 8004c66:	4b7a      	ldr	r3, [pc, #488]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d82d      	bhi.n	8004cd0 <UART_SetConfig+0x14c>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0xf8>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cd1 	.word	0x08004cd1
 8004c84:	08004cd1 	.word	0x08004cd1
 8004c88:	08004cd1 	.word	0x08004cd1
 8004c8c:	08004cc1 	.word	0x08004cc1
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004cd1 	.word	0x08004cd1
 8004c98:	08004cd1 	.word	0x08004cd1
 8004c9c:	08004cb9 	.word	0x08004cb9
 8004ca0:	08004cd1 	.word	0x08004cd1
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cc9 	.word	0x08004cc9
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e0d8      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	e0d4      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc6:	e0d0      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e0cc      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e0c8      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5e      	ldr	r2, [pc, #376]	; (8004e58 <UART_SetConfig+0x2d4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d125      	bne.n	8004d2e <UART_SetConfig+0x1aa>
 8004ce2:	4b5b      	ldr	r3, [pc, #364]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cec:	2b30      	cmp	r3, #48	; 0x30
 8004cee:	d016      	beq.n	8004d1e <UART_SetConfig+0x19a>
 8004cf0:	2b30      	cmp	r3, #48	; 0x30
 8004cf2:	d818      	bhi.n	8004d26 <UART_SetConfig+0x1a2>
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d00a      	beq.n	8004d0e <UART_SetConfig+0x18a>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d814      	bhi.n	8004d26 <UART_SetConfig+0x1a2>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <UART_SetConfig+0x182>
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d008      	beq.n	8004d16 <UART_SetConfig+0x192>
 8004d04:	e00f      	b.n	8004d26 <UART_SetConfig+0x1a2>
 8004d06:	2300      	movs	r3, #0
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0c:	e0ad      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d14:	e0a9      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d16:	2304      	movs	r3, #4
 8004d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1c:	e0a5      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d24:	e0a1      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d26:	2310      	movs	r3, #16
 8004d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2c:	e09d      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a4a      	ldr	r2, [pc, #296]	; (8004e5c <UART_SetConfig+0x2d8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d125      	bne.n	8004d84 <UART_SetConfig+0x200>
 8004d38:	4b45      	ldr	r3, [pc, #276]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d42:	2bc0      	cmp	r3, #192	; 0xc0
 8004d44:	d016      	beq.n	8004d74 <UART_SetConfig+0x1f0>
 8004d46:	2bc0      	cmp	r3, #192	; 0xc0
 8004d48:	d818      	bhi.n	8004d7c <UART_SetConfig+0x1f8>
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d00a      	beq.n	8004d64 <UART_SetConfig+0x1e0>
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d814      	bhi.n	8004d7c <UART_SetConfig+0x1f8>
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <UART_SetConfig+0x1d8>
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	d008      	beq.n	8004d6c <UART_SetConfig+0x1e8>
 8004d5a:	e00f      	b.n	8004d7c <UART_SetConfig+0x1f8>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e082      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d64:	2302      	movs	r3, #2
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e07e      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d72:	e07a      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d74:	2308      	movs	r3, #8
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e076      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e072      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <UART_SetConfig+0x2dc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d12a      	bne.n	8004de4 <UART_SetConfig+0x260>
 8004d8e:	4b30      	ldr	r3, [pc, #192]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9c:	d01a      	beq.n	8004dd4 <UART_SetConfig+0x250>
 8004d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da2:	d81b      	bhi.n	8004ddc <UART_SetConfig+0x258>
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d00c      	beq.n	8004dc4 <UART_SetConfig+0x240>
 8004daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dae:	d815      	bhi.n	8004ddc <UART_SetConfig+0x258>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <UART_SetConfig+0x238>
 8004db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db8:	d008      	beq.n	8004dcc <UART_SetConfig+0x248>
 8004dba:	e00f      	b.n	8004ddc <UART_SetConfig+0x258>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e052      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e04e      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e04a      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e046      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e042      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <UART_SetConfig+0x2c4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d13a      	bne.n	8004e64 <UART_SetConfig+0x2e0>
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <UART_SetConfig+0x2cc>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dfc:	d01a      	beq.n	8004e34 <UART_SetConfig+0x2b0>
 8004dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e02:	d81b      	bhi.n	8004e3c <UART_SetConfig+0x2b8>
 8004e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e08:	d00c      	beq.n	8004e24 <UART_SetConfig+0x2a0>
 8004e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0e:	d815      	bhi.n	8004e3c <UART_SetConfig+0x2b8>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <UART_SetConfig+0x298>
 8004e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e18:	d008      	beq.n	8004e2c <UART_SetConfig+0x2a8>
 8004e1a:	e00f      	b.n	8004e3c <UART_SetConfig+0x2b8>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e022      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e01e      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e32:	e01a      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004e34:	2308      	movs	r3, #8
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e016      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e012      	b.n	8004e6a <UART_SetConfig+0x2e6>
 8004e44:	efff69f3 	.word	0xefff69f3
 8004e48:	40008000 	.word	0x40008000
 8004e4c:	40013800 	.word	0x40013800
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40004400 	.word	0x40004400
 8004e58:	40004800 	.word	0x40004800
 8004e5c:	40004c00 	.word	0x40004c00
 8004e60:	40005000 	.word	0x40005000
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a9f      	ldr	r2, [pc, #636]	; (80050ec <UART_SetConfig+0x568>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d17a      	bne.n	8004f6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d824      	bhi.n	8004ec6 <UART_SetConfig+0x342>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <UART_SetConfig+0x300>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ec7 	.word	0x08004ec7
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004eb7 	.word	0x08004eb7
 8004e98:	08004ec7 	.word	0x08004ec7
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ec7 	.word	0x08004ec7
 8004ea4:	08004ebf 	.word	0x08004ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fe f8aa 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004eac:	61f8      	str	r0, [r7, #28]
        break;
 8004eae:	e010      	b.n	8004ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb0:	4b8f      	ldr	r3, [pc, #572]	; (80050f0 <UART_SetConfig+0x56c>)
 8004eb2:	61fb      	str	r3, [r7, #28]
        break;
 8004eb4:	e00d      	b.n	8004ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb6:	f7fe f80b 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004eba:	61f8      	str	r0, [r7, #28]
        break;
 8004ebc:	e009      	b.n	8004ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec2:	61fb      	str	r3, [r7, #28]
        break;
 8004ec4:	e005      	b.n	8004ed2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80fb 	beq.w	80050d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d305      	bcc.n	8004ef6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d903      	bls.n	8004efe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004efc:	e0e8      	b.n	80050d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2200      	movs	r2, #0
 8004f02:	461c      	mov	r4, r3
 8004f04:	4615      	mov	r5, r2
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	022b      	lsls	r3, r5, #8
 8004f10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f14:	0222      	lsls	r2, r4, #8
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	6849      	ldr	r1, [r1, #4]
 8004f1a:	0849      	lsrs	r1, r1, #1
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	4688      	mov	r8, r1
 8004f20:	4681      	mov	r9, r0
 8004f22:	eb12 0a08 	adds.w	sl, r2, r8
 8004f26:	eb43 0b09 	adc.w	fp, r3, r9
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	f7fb f998 	bl	8000270 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4613      	mov	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d308      	bcc.n	8004f62 <UART_SetConfig+0x3de>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f56:	d204      	bcs.n	8004f62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	60da      	str	r2, [r3, #12]
 8004f60:	e0b6      	b.n	80050d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f68:	e0b2      	b.n	80050d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f72:	d15e      	bne.n	8005032 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d828      	bhi.n	8004fce <UART_SetConfig+0x44a>
 8004f7c:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x400>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe f82a 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e014      	b.n	8004fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe f83c 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8004fb4:	61f8      	str	r0, [r7, #28]
        break;
 8004fb6:	e010      	b.n	8004fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b4d      	ldr	r3, [pc, #308]	; (80050f0 <UART_SetConfig+0x56c>)
 8004fba:	61fb      	str	r3, [r7, #28]
        break;
 8004fbc:	e00d      	b.n	8004fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fd ff87 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8004fc2:	61f8      	str	r0, [r7, #28]
        break;
 8004fc4:	e009      	b.n	8004fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e005      	b.n	8004fda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d077      	beq.n	80050d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005a      	lsls	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	441a      	add	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b0f      	cmp	r3, #15
 8004ffa:	d916      	bls.n	800502a <UART_SetConfig+0x4a6>
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005002:	d212      	bcs.n	800502a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f023 030f 	bic.w	r3, r3, #15
 800500c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	b29b      	uxth	r3, r3
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	b29a      	uxth	r2, r3
 800501a:	8afb      	ldrh	r3, [r7, #22]
 800501c:	4313      	orrs	r3, r2
 800501e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	8afa      	ldrh	r2, [r7, #22]
 8005026:	60da      	str	r2, [r3, #12]
 8005028:	e052      	b.n	80050d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005030:	e04e      	b.n	80050d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005036:	2b08      	cmp	r3, #8
 8005038:	d827      	bhi.n	800508a <UART_SetConfig+0x506>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <UART_SetConfig+0x4bc>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005065 	.word	0x08005065
 8005044:	0800506d 	.word	0x0800506d
 8005048:	08005075 	.word	0x08005075
 800504c:	0800508b 	.word	0x0800508b
 8005050:	0800507b 	.word	0x0800507b
 8005054:	0800508b 	.word	0x0800508b
 8005058:	0800508b 	.word	0x0800508b
 800505c:	0800508b 	.word	0x0800508b
 8005060:	08005083 	.word	0x08005083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005064:	f7fd ffcc 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8005068:	61f8      	str	r0, [r7, #28]
        break;
 800506a:	e014      	b.n	8005096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800506c:	f7fd ffde 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8005070:	61f8      	str	r0, [r7, #28]
        break;
 8005072:	e010      	b.n	8005096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005074:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <UART_SetConfig+0x56c>)
 8005076:	61fb      	str	r3, [r7, #28]
        break;
 8005078:	e00d      	b.n	8005096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507a:	f7fd ff29 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 800507e:	61f8      	str	r0, [r7, #28]
        break;
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005094:	bf00      	nop
    }

    if (pclk != 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	085a      	lsrs	r2, r3, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	d909      	bls.n	80050ca <UART_SetConfig+0x546>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050bc:	d205      	bcs.n	80050ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e002      	b.n	80050d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ea:	bf00      	nop
 80050ec:	40008000 	.word	0x40008000
 80050f0:	00f42400 	.word	0x00f42400

080050f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01a      	beq.n	800520a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f2:	d10a      	bne.n	800520a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b098      	sub	sp, #96	; 0x60
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005248:	f7fc f982 	bl	8001550 <HAL_GetTick>
 800524c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d12e      	bne.n	80052ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005264:	2200      	movs	r2, #0
 8005266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f88c 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d021      	beq.n	80052ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528a:	653b      	str	r3, [r7, #80]	; 0x50
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005294:	647b      	str	r3, [r7, #68]	; 0x44
 8005296:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800529a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e6      	bne.n	8005276 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e062      	b.n	8005380 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d149      	bne.n	800535c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d0:	2200      	movs	r2, #0
 80052d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f856 	bl	8005388 <UART_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d03c      	beq.n	800535c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	623b      	str	r3, [r7, #32]
   return(result);
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
 8005302:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e6      	bne.n	80052e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60fb      	str	r3, [r7, #12]
   return(result);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	64bb      	str	r3, [r7, #72]	; 0x48
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005334:	61fa      	str	r2, [r7, #28]
 8005336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	69b9      	ldr	r1, [r7, #24]
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	617b      	str	r3, [r7, #20]
   return(result);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e011      	b.n	8005380 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3758      	adds	r7, #88	; 0x58
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005398:	e049      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d045      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a2:	f7fc f8d5 	bl	8001550 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e048      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d031      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d110      	bne.n	80053fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2208      	movs	r2, #8
 80053de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f838 	bl	8005456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2208      	movs	r2, #8
 80053ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e029      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005408:	d111      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f81e 	bl	8005456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0a6      	beq.n	800539a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b095      	sub	sp, #84	; 0x54
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547c:	643b      	str	r3, [r7, #64]	; 0x40
 800547e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d118      	bne.n	80054fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	647b      	str	r3, [r7, #68]	; 0x44
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6979      	ldr	r1, [r7, #20]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	613b      	str	r3, [r7, #16]
   return(result);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e6      	bne.n	80054cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005512:	bf00      	nop
 8005514:	3754      	adds	r7, #84	; 0x54
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <__NVIC_SetPriority>:
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	6039      	str	r1, [r7, #0]
 800552a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005530:	2b00      	cmp	r3, #0
 8005532:	db0a      	blt.n	800554a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	490c      	ldr	r1, [pc, #48]	; (800556c <__NVIC_SetPriority+0x4c>)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	0112      	lsls	r2, r2, #4
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	440b      	add	r3, r1
 8005544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005548:	e00a      	b.n	8005560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	b2da      	uxtb	r2, r3
 800554e:	4908      	ldr	r1, [pc, #32]	; (8005570 <__NVIC_SetPriority+0x50>)
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	3b04      	subs	r3, #4
 8005558:	0112      	lsls	r2, r2, #4
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	440b      	add	r3, r1
 800555e:	761a      	strb	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	e000e100 	.word	0xe000e100
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <SysTick_Handler+0x1c>)
 800557a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800557c:	f001 fd28 	bl	8006fd0 <xTaskGetSchedulerState>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d001      	beq.n	800558a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005586:	f002 fb0f 	bl	8007ba8 <xPortSysTickHandler>
  }
}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	e000e010 	.word	0xe000e010

08005594 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005598:	2100      	movs	r1, #0
 800559a:	f06f 0004 	mvn.w	r0, #4
 800559e:	f7ff ffbf 	bl	8005520 <__NVIC_SetPriority>
#endif
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ae:	f3ef 8305 	mrs	r3, IPSR
 80055b2:	603b      	str	r3, [r7, #0]
  return(result);
 80055b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055ba:	f06f 0305 	mvn.w	r3, #5
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	e00c      	b.n	80055dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <osKernelInitialize+0x44>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <osKernelInitialize+0x44>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e002      	b.n	80055dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000624 	.word	0x20000624

080055f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f6:	f3ef 8305 	mrs	r3, IPSR
 80055fa:	603b      	str	r3, [r7, #0]
  return(result);
 80055fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005602:	f06f 0305 	mvn.w	r3, #5
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e010      	b.n	800562c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <osKernelStart+0x48>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d109      	bne.n	8005626 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005612:	f7ff ffbf 	bl	8005594 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <osKernelStart+0x48>)
 8005618:	2202      	movs	r2, #2
 800561a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800561c:	f001 f87c 	bl	8006718 <vTaskStartScheduler>
      stat = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e002      	b.n	800562c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800562c:	687b      	ldr	r3, [r7, #4]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000624 	.word	0x20000624

0800563c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b08e      	sub	sp, #56	; 0x38
 8005640:	af04      	add	r7, sp, #16
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564c:	f3ef 8305 	mrs	r3, IPSR
 8005650:	617b      	str	r3, [r7, #20]
  return(result);
 8005652:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005654:	2b00      	cmp	r3, #0
 8005656:	d17e      	bne.n	8005756 <osThreadNew+0x11a>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d07b      	beq.n	8005756 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005662:	2318      	movs	r3, #24
 8005664:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d045      	beq.n	8005702 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <osThreadNew+0x48>
        name = attr->name;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <osThreadNew+0x6e>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b38      	cmp	r3, #56	; 0x38
 800569c:	d805      	bhi.n	80056aa <osThreadNew+0x6e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <osThreadNew+0x72>
        return (NULL);
 80056aa:	2300      	movs	r3, #0
 80056ac:	e054      	b.n	8005758 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <osThreadNew+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2ba7      	cmp	r3, #167	; 0xa7
 80056cc:	d90a      	bls.n	80056e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <osThreadNew+0xa8>
        mem = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e010      	b.n	8005706 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <osThreadNew+0xca>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <osThreadNew+0xca>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <osThreadNew+0xca>
          mem = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e001      	b.n	8005706 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d110      	bne.n	800572e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005714:	9202      	str	r2, [sp, #8]
 8005716:	9301      	str	r3, [sp, #4]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fe0c 	bl	8006340 <xTaskCreateStatic>
 8005728:	4603      	mov	r3, r0
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e013      	b.n	8005756 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d110      	bne.n	8005756 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	b29a      	uxth	r2, r3
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fe57 	bl	80063fa <xTaskCreate>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d001      	beq.n	8005756 <osThreadNew+0x11a>
            hTask = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005756:	693b      	ldr	r3, [r7, #16]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005768:	f3ef 8305 	mrs	r3, IPSR
 800576c:	60bb      	str	r3, [r7, #8]
  return(result);
 800576e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <osDelay+0x1c>
    stat = osErrorISR;
 8005774:	f06f 0305 	mvn.w	r3, #5
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e007      	b.n	800578c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 ff92 	bl	80066b0 <vTaskDelay>
    }
  }

  return (stat);
 800578c:	68fb      	ldr	r3, [r7, #12]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80057a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a06      	ldr	r2, [pc, #24]	; (80057c8 <vApplicationGetIdleTaskMemory+0x30>)
 80057ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2280      	movs	r2, #128	; 0x80
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20000628 	.word	0x20000628
 80057c8:	200006d0 	.word	0x200006d0

080057cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80057dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a06      	ldr	r2, [pc, #24]	; (80057fc <vApplicationGetTimerTaskMemory+0x30>)
 80057e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ea:	601a      	str	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	200008d0 	.word	0x200008d0
 80057fc:	20000978 	.word	0x20000978

08005800 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0208 	add.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f04f 32ff 	mov.w	r2, #4294967295
 8005818:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 0208 	add.w	r2, r3, #8
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	601a      	str	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d103      	bne.n	80058c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e00c      	b.n	80058dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3308      	adds	r3, #8
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e002      	b.n	80058d0 <vListInsert+0x2e>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d2f6      	bcs.n	80058ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d103      	bne.n	8005948 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	1e5a      	subs	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005992:	f002 f877 	bl	8007a84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	441a      	add	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	3b01      	subs	r3, #1
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	441a      	add	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	22ff      	movs	r2, #255	; 0xff
 80059de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d114      	bne.n	8005a12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01a      	beq.n	8005a26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3310      	adds	r3, #16
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f929 	bl	8006c4c <xTaskRemoveFromEventList>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <xQueueGenericReset+0xcc>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	e009      	b.n	8005a26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3310      	adds	r3, #16
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fef2 	bl	8005800 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3324      	adds	r3, #36	; 0x24
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff feed 	bl	8005800 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a26:	f002 f85d 	bl	8007ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a2a:	2301      	movs	r3, #1
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08e      	sub	sp, #56	; 0x38
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <xQueueGenericCreateStatic+0x52>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <xQueueGenericCreateStatic+0x56>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueGenericCreateStatic+0x58>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	623b      	str	r3, [r7, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <xQueueGenericCreateStatic+0x7e>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <xQueueGenericCreateStatic+0x82>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <xQueueGenericCreateStatic+0x84>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	61fb      	str	r3, [r7, #28]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ad6:	2350      	movs	r3, #80	; 0x50
 8005ad8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b50      	cmp	r3, #80	; 0x50
 8005ade:	d00a      	beq.n	8005af6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61bb      	str	r3, [r7, #24]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005af6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00d      	beq.n	8005b1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f805 	bl	8005b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3730      	adds	r7, #48	; 0x30
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b56:	2101      	movs	r1, #1
 8005b58:	69b8      	ldr	r0, [r7, #24]
 8005b5a:	f7ff ff05 	bl	8005968 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	; 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xQueueGenericSend+0x32>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d103      	bne.n	8005bb0 <xQueueGenericSend+0x40>
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <xQueueGenericSend+0x44>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <xQueueGenericSend+0x46>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <xQueueGenericSend+0x60>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d103      	bne.n	8005bde <xQueueGenericSend+0x6e>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <xQueueGenericSend+0x72>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <xQueueGenericSend+0x74>
 8005be2:	2300      	movs	r3, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericSend+0x8e>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	623b      	str	r3, [r7, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bfe:	f001 f9e7 	bl	8006fd0 <xTaskGetSchedulerState>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <xQueueGenericSend+0x9e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericSend+0xa2>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericSend+0xa4>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	61fb      	str	r3, [r7, #28]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c2e:	f001 ff29 	bl	8007a84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d302      	bcc.n	8005c44 <xQueueGenericSend+0xd4>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d129      	bne.n	8005c98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4a:	f000 fa0b 	bl	8006064 <prvCopyDataToQueue>
 8005c4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d010      	beq.n	8005c7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	3324      	adds	r3, #36	; 0x24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fff5 	bl	8006c4c <xTaskRemoveFromEventList>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c68:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <xQueueGenericSend+0x1f8>)
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	e00a      	b.n	8005c90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c80:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <xQueueGenericSend+0x1f8>)
 8005c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c90:	f001 ff28 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e063      	b.n	8005d60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c9e:	f001 ff21 	bl	8007ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e05c      	b.n	8005d60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 f82f 	bl	8006d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cba:	f001 ff13 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cbe:	f000 fd9b 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cc2:	f001 fedf 	bl	8007a84 <vPortEnterCritical>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d103      	bne.n	8005cdc <xQueueGenericSend+0x16c>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce2:	b25b      	sxtb	r3, r3
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <xQueueGenericSend+0x182>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cf2:	f001 fef7 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cf6:	1d3a      	adds	r2, r7, #4
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 f81e 	bl	8006d40 <xTaskCheckForTimeOut>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d124      	bne.n	8005d54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0c:	f000 faa2 	bl	8006254 <prvIsQueueFull>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	3310      	adds	r3, #16
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 ff44 	bl	8006bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d26:	f000 fa2d 	bl	8006184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d2a:	f000 fd73 	bl	8006814 <xTaskResumeAll>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f47f af7c 	bne.w	8005c2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <xQueueGenericSend+0x1f8>)
 8005d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	e772      	b.n	8005c2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d4a:	f000 fa1b 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d4e:	f000 fd61 	bl	8006814 <xTaskResumeAll>
 8005d52:	e76c      	b.n	8005c2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d56:	f000 fa15 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d5a:	f000 fd5b 	bl	8006814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3738      	adds	r7, #56	; 0x38
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	e000ed04 	.word	0xe000ed04

08005d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b090      	sub	sp, #64	; 0x40
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d103      	bne.n	8005da8 <xQueueGenericSendFromISR+0x3c>
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <xQueueGenericSendFromISR+0x40>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <xQueueGenericSendFromISR+0x42>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d103      	bne.n	8005dd6 <xQueueGenericSendFromISR+0x6a>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <xQueueGenericSendFromISR+0x6e>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <xQueueGenericSendFromISR+0x70>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	623b      	str	r3, [r7, #32]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005df6:	f001 ff27 	bl	8007c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	61fa      	str	r2, [r7, #28]
 8005e10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <xQueueGenericSendFromISR+0xbc>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d12f      	bne.n	8005e88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e3e:	f000 f911 	bl	8006064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d112      	bne.n	8005e72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e56:	3324      	adds	r3, #36	; 0x24
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fef7 	bl	8006c4c <xTaskRemoveFromEventList>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e007      	b.n	8005e82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e76:	3301      	adds	r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	b25a      	sxtb	r2, r3
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e82:	2301      	movs	r3, #1
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e86:	e001      	b.n	8005e8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3740      	adds	r7, #64	; 0x40
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08c      	sub	sp, #48	; 0x30
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <xQueueReceive+0x30>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	623b      	str	r3, [r7, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <xQueueReceive+0x3e>
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <xQueueReceive+0x42>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <xQueueReceive+0x44>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xQueueReceive+0x5e>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61fb      	str	r3, [r7, #28]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f02:	f001 f865 	bl	8006fd0 <xTaskGetSchedulerState>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <xQueueReceive+0x6e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <xQueueReceive+0x72>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <xQueueReceive+0x74>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <xQueueReceive+0x8e>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	61bb      	str	r3, [r7, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f32:	f001 fda7 	bl	8007a84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01f      	beq.n	8005f82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f46:	f000 f8f7 	bl	8006138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00f      	beq.n	8005f7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fe74 	bl	8006c4c <xTaskRemoveFromEventList>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f6a:	4b3d      	ldr	r3, [pc, #244]	; (8006060 <xQueueReceive+0x1bc>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f7a:	f001 fdb3 	bl	8007ae4 <vPortExitCritical>
				return pdPASS;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e069      	b.n	8006056 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f88:	f001 fdac 	bl	8007ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e062      	b.n	8006056 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f96:	f107 0310 	add.w	r3, r7, #16
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 feba 	bl	8006d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fa4:	f001 fd9e 	bl	8007ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fa8:	f000 fc26 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fac:	f001 fd6a 	bl	8007a84 <vPortEnterCritical>
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fb6:	b25b      	sxtb	r3, r3
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d103      	bne.n	8005fc6 <xQueueReceive+0x122>
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d103      	bne.n	8005fdc <xQueueReceive+0x138>
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fdc:	f001 fd82 	bl	8007ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fe0:	1d3a      	adds	r2, r7, #4
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fea9 	bl	8006d40 <xTaskCheckForTimeOut>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d123      	bne.n	800603c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ff6:	f000 f917 	bl	8006228 <prvIsQueueEmpty>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d017      	beq.n	8006030 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fdcf 	bl	8006bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800600e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006010:	f000 f8b8 	bl	8006184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006014:	f000 fbfe 	bl	8006814 <xTaskResumeAll>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d189      	bne.n	8005f32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800601e:	4b10      	ldr	r3, [pc, #64]	; (8006060 <xQueueReceive+0x1bc>)
 8006020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	e780      	b.n	8005f32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006032:	f000 f8a7 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006036:	f000 fbed 	bl	8006814 <xTaskResumeAll>
 800603a:	e77a      	b.n	8005f32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800603c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800603e:	f000 f8a1 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006042:	f000 fbe7 	bl	8006814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006048:	f000 f8ee 	bl	8006228 <prvIsQueueEmpty>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	f43f af6f 	beq.w	8005f32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006056:	4618      	mov	r0, r3
 8006058:	3730      	adds	r7, #48	; 0x30
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d14d      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 ffbc 	bl	800700c <xTaskPriorityDisinherit>
 8006094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e043      	b.n	8006126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d119      	bne.n	80060d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6858      	ldr	r0, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f001 ff26 	bl	8007f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d32b      	bcc.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e026      	b.n	8006126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68d8      	ldr	r0, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	461a      	mov	r2, r3
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	f001 ff0c 	bl	8007f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	425b      	negs	r3, r3
 80060f2:	441a      	add	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d207      	bcs.n	8006114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	425b      	negs	r3, r3
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d105      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3b01      	subs	r3, #1
 8006124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	441a      	add	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d303      	bcc.n	800616c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	461a      	mov	r2, r3
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f001 fec2 	bl	8007f00 <memcpy>
	}
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800618c:	f001 fc7a 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006198:	e011      	b.n	80061be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3324      	adds	r3, #36	; 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fd50 	bl	8006c4c <xTaskRemoveFromEventList>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061b2:	f000 fe27 	bl	8006e04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dce9      	bgt.n	800619a <prvUnlockQueue+0x16>
 80061c6:	e000      	b.n	80061ca <prvUnlockQueue+0x46>
					break;
 80061c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	22ff      	movs	r2, #255	; 0xff
 80061ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061d2:	f001 fc87 	bl	8007ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061d6:	f001 fc55 	bl	8007a84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e2:	e011      	b.n	8006208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d012      	beq.n	8006212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3310      	adds	r3, #16
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fd2b 	bl	8006c4c <xTaskRemoveFromEventList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061fc:	f000 fe02 	bl	8006e04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	3b01      	subs	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dce9      	bgt.n	80061e4 <prvUnlockQueue+0x60>
 8006210:	e000      	b.n	8006214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22ff      	movs	r2, #255	; 0xff
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800621c:	f001 fc62 	bl	8007ae4 <vPortExitCritical>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006230:	f001 fc28 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e001      	b.n	8006246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f001 fc4d 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800625c:	f001 fc12 	bl	8007a84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	429a      	cmp	r2, r3
 800626a:	d102      	bne.n	8006272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e001      	b.n	8006276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f001 fc35 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e014      	b.n	80062be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006294:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <vQueueAddToRegistry+0x50>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062a0:	490c      	ldr	r1, [pc, #48]	; (80062d4 <vQueueAddToRegistry+0x50>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <vQueueAddToRegistry+0x50>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062b6:	e006      	b.n	80062c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b07      	cmp	r3, #7
 80062c2:	d9e7      	bls.n	8006294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000d78 	.word	0x20000d78

080062d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062e8:	f001 fbcc 	bl	8007a84 <vPortEnterCritical>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d103      	bne.n	8006302 <vQueueWaitForMessageRestricted+0x2a>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006308:	b25b      	sxtb	r3, r3
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d103      	bne.n	8006318 <vQueueWaitForMessageRestricted+0x40>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006318:	f001 fbe4 	bl	8007ae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fc61 	bl	8006bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7ff ff26 	bl	8006184 <prvUnlockQueue>
	}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af04      	add	r7, sp, #16
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xTaskCreateStatic+0x46>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	61fb      	str	r3, [r7, #28]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006386:	23a8      	movs	r3, #168	; 0xa8
 8006388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2ba8      	cmp	r3, #168	; 0xa8
 800638e:	d00a      	beq.n	80063a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61bb      	str	r3, [r7, #24]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01e      	beq.n	80063ec <xTaskCreateStatic+0xac>
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063c6:	2300      	movs	r3, #0
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	9302      	str	r3, [sp, #8]
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f850 	bl	8006484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e6:	f000 f8f3 	bl	80065d0 <prvAddNewTaskToReadyList>
 80063ea:	e001      	b.n	80063f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063f0:	697b      	ldr	r3, [r7, #20]
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3728      	adds	r7, #40	; 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08c      	sub	sp, #48	; 0x30
 80063fe:	af04      	add	r7, sp, #16
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fc5a 	bl	8007cc8 <pvPortMalloc>
 8006414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800641c:	20a8      	movs	r0, #168	; 0xa8
 800641e:	f001 fc53 	bl	8007cc8 <pvPortMalloc>
 8006422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
 8006430:	e005      	b.n	800643e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f001 fc8e 	bl	8007d54 <vPortFree>
 8006438:	e001      	b.n	800643e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	2300      	movs	r3, #0
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f80e 	bl	8006484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006468:	69f8      	ldr	r0, [r7, #28]
 800646a:	f000 f8b1 	bl	80065d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800646e:	2301      	movs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e002      	b.n	800647a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006474:	f04f 33ff 	mov.w	r3, #4294967295
 8006478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800647a:	69bb      	ldr	r3, [r7, #24]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	461a      	mov	r2, r3
 800649c:	21a5      	movs	r1, #165	; 0xa5
 800649e:	f001 fca5 	bl	8007dec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	3b01      	subs	r3, #1
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01f      	beq.n	8006522 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	e012      	b.n	800650e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	7819      	ldrb	r1, [r3, #0]
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	3334      	adds	r3, #52	; 0x34
 80064f8:	460a      	mov	r2, r1
 80064fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	3301      	adds	r3, #1
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d9e9      	bls.n	80064e8 <prvInitialiseNewTask+0x64>
 8006514:	e000      	b.n	8006518 <prvInitialiseNewTask+0x94>
			{
				break;
 8006516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006520:	e003      	b.n	800652a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	2b37      	cmp	r3, #55	; 0x37
 800652e:	d901      	bls.n	8006534 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006530:	2337      	movs	r3, #55	; 0x37
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f978 	bl	8005840 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	3318      	adds	r3, #24
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff f973 	bl	8005840 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2200      	movs	r2, #0
 800657c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	3354      	adds	r3, #84	; 0x54
 8006584:	224c      	movs	r2, #76	; 0x4c
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f001 fc2f 	bl	8007dec <memset>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <prvInitialiseNewTask+0x140>)
 8006592:	659a      	str	r2, [r3, #88]	; 0x58
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <prvInitialiseNewTask+0x144>)
 8006598:	65da      	str	r2, [r3, #92]	; 0x5c
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	4a0b      	ldr	r2, [pc, #44]	; (80065cc <prvInitialiseNewTask+0x148>)
 800659e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	69b8      	ldr	r0, [r7, #24]
 80065a6:	f001 f941 	bl	800782c <pxPortInitialiseStack>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065bc:	bf00      	nop
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200033f4 	.word	0x200033f4
 80065c8:	2000345c 	.word	0x2000345c
 80065cc:	200034c4 	.word	0x200034c4

080065d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d8:	f001 fa54 	bl	8007a84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e6:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ee:	4a2a      	ldr	r2, [pc, #168]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d110      	bne.n	800661e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065fc:	f000 fc26 	bl	8006e4c <prvInitialiseTaskLists>
 8006600:	e00d      	b.n	800661e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <prvAddNewTaskToReadyList+0xcc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d802      	bhi.n	800661e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006618:	4a1f      	ldr	r2, [pc, #124]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 8006626:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006628:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <prvAddNewTaskToReadyList+0xd4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d903      	bls.n	8006644 <prvAddNewTaskToReadyList+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <prvAddNewTaskToReadyList+0xd4>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvAddNewTaskToReadyList+0xd8>)
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7ff f8fd 	bl	800585a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006660:	f001 fa40 	bl	8007ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <prvAddNewTaskToReadyList+0xcc>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	429a      	cmp	r2, r3
 8006678:	d207      	bcs.n	800668a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <prvAddNewTaskToReadyList+0xdc>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2000128c 	.word	0x2000128c
 8006698:	20000db8 	.word	0x20000db8
 800669c:	20001298 	.word	0x20001298
 80066a0:	200012a8 	.word	0x200012a8
 80066a4:	20001294 	.word	0x20001294
 80066a8:	20000dbc 	.word	0x20000dbc
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d017      	beq.n	80066f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <vTaskDelay+0x60>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <vTaskDelay+0x30>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	60bb      	str	r3, [r7, #8]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066e0:	f000 f88a 	bl	80067f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fcfe 	bl	80070e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ec:	f000 f892 	bl	8006814 <xTaskResumeAll>
 80066f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d107      	bne.n	8006708 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <vTaskDelay+0x64>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200012b4 	.word	0x200012b4
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006726:	463a      	mov	r2, r7
 8006728:	1d39      	adds	r1, r7, #4
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff f832 	bl	8005798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	9202      	str	r2, [sp, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	460a      	mov	r2, r1
 8006746:	4924      	ldr	r1, [pc, #144]	; (80067d8 <vTaskStartScheduler+0xc0>)
 8006748:	4824      	ldr	r0, [pc, #144]	; (80067dc <vTaskStartScheduler+0xc4>)
 800674a:	f7ff fdf9 	bl	8006340 <xTaskCreateStatic>
 800674e:	4603      	mov	r3, r0
 8006750:	4a23      	ldr	r2, [pc, #140]	; (80067e0 <vTaskStartScheduler+0xc8>)
 8006752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006754:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <vTaskStartScheduler+0xc8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e001      	b.n	8006766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d102      	bne.n	8006772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800676c:	f000 fd10 	bl	8007190 <xTimerCreateTimerTask>
 8006770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d11b      	bne.n	80067b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
}
 800678a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800678c:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <vTaskStartScheduler+0xcc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3354      	adds	r3, #84	; 0x54
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <vTaskStartScheduler+0xd0>)
 8006794:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vTaskStartScheduler+0xd4>)
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <vTaskStartScheduler+0xd8>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a4:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <vTaskStartScheduler+0xdc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067aa:	f001 f8c9 	bl	8007940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067ae:	e00e      	b.n	80067ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d10a      	bne.n	80067ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <vTaskStartScheduler+0xb4>
}
 80067ce:	bf00      	nop
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08008854 	.word	0x08008854
 80067dc:	08006e1d 	.word	0x08006e1d
 80067e0:	200012b0 	.word	0x200012b0
 80067e4:	20000db8 	.word	0x20000db8
 80067e8:	2000007c 	.word	0x2000007c
 80067ec:	200012ac 	.word	0x200012ac
 80067f0:	20001298 	.word	0x20001298
 80067f4:	20001290 	.word	0x20001290

080067f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067fc:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vTaskSuspendAll+0x18>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4a03      	ldr	r2, [pc, #12]	; (8006810 <vTaskSuspendAll+0x18>)
 8006804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006806:	bf00      	nop
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	200012b4 	.word	0x200012b4

08006814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006822:	4b42      	ldr	r3, [pc, #264]	; (800692c <xTaskResumeAll+0x118>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <xTaskResumeAll+0x2c>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006840:	f001 f920 	bl	8007a84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006844:	4b39      	ldr	r3, [pc, #228]	; (800692c <xTaskResumeAll+0x118>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3b01      	subs	r3, #1
 800684a:	4a38      	ldr	r2, [pc, #224]	; (800692c <xTaskResumeAll+0x118>)
 800684c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800684e:	4b37      	ldr	r3, [pc, #220]	; (800692c <xTaskResumeAll+0x118>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d162      	bne.n	800691c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <xTaskResumeAll+0x11c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d05e      	beq.n	800691c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800685e:	e02f      	b.n	80068c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006860:	4b34      	ldr	r3, [pc, #208]	; (8006934 <xTaskResumeAll+0x120>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3318      	adds	r3, #24
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff f851 	bl	8005914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3304      	adds	r3, #4
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff f84c 	bl	8005914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <xTaskResumeAll+0x124>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d903      	bls.n	8006890 <xTaskResumeAll+0x7c>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <xTaskResumeAll+0x124>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <xTaskResumeAll+0x128>)
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe ffd7 	bl	800585a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	4b23      	ldr	r3, [pc, #140]	; (8006940 <xTaskResumeAll+0x12c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80068ba:	4b22      	ldr	r3, [pc, #136]	; (8006944 <xTaskResumeAll+0x130>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c0:	4b1c      	ldr	r3, [pc, #112]	; (8006934 <xTaskResumeAll+0x120>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1cb      	bne.n	8006860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ce:	f000 fb5f 	bl	8006f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068d2:	4b1d      	ldr	r3, [pc, #116]	; (8006948 <xTaskResumeAll+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068de:	f000 f847 	bl	8006970 <xTaskIncrementTick>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068e8:	4b16      	ldr	r3, [pc, #88]	; (8006944 <xTaskResumeAll+0x130>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f1      	bne.n	80068de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80068fa:	4b13      	ldr	r3, [pc, #76]	; (8006948 <xTaskResumeAll+0x134>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006900:	4b10      	ldr	r3, [pc, #64]	; (8006944 <xTaskResumeAll+0x130>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800690c:	4b0f      	ldr	r3, [pc, #60]	; (800694c <xTaskResumeAll+0x138>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800691c:	f001 f8e2 	bl	8007ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8006920:	68bb      	ldr	r3, [r7, #8]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200012b4 	.word	0x200012b4
 8006930:	2000128c 	.word	0x2000128c
 8006934:	2000124c 	.word	0x2000124c
 8006938:	20001294 	.word	0x20001294
 800693c:	20000dbc 	.word	0x20000dbc
 8006940:	20000db8 	.word	0x20000db8
 8006944:	200012a0 	.word	0x200012a0
 8006948:	2000129c 	.word	0x2000129c
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <xTaskGetTickCount+0x1c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20001290 	.word	0x20001290

08006970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697a:	4b4f      	ldr	r3, [pc, #316]	; (8006ab8 <xTaskIncrementTick+0x148>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 808f 	bne.w	8006aa2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006984:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <xTaskIncrementTick+0x14c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800698c:	4a4b      	ldr	r2, [pc, #300]	; (8006abc <xTaskIncrementTick+0x14c>)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d120      	bne.n	80069da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006998:	4b49      	ldr	r3, [pc, #292]	; (8006ac0 <xTaskIncrementTick+0x150>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	603b      	str	r3, [r7, #0]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xTaskIncrementTick+0x46>
 80069b8:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <xTaskIncrementTick+0x150>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <xTaskIncrementTick+0x154>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a3f      	ldr	r2, [pc, #252]	; (8006ac0 <xTaskIncrementTick+0x150>)
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	4a3f      	ldr	r2, [pc, #252]	; (8006ac4 <xTaskIncrementTick+0x154>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <xTaskIncrementTick+0x158>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a3d      	ldr	r2, [pc, #244]	; (8006ac8 <xTaskIncrementTick+0x158>)
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	f000 fadb 	bl	8006f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069da:	4b3c      	ldr	r3, [pc, #240]	; (8006acc <xTaskIncrementTick+0x15c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d349      	bcc.n	8006a78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e4:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <xTaskIncrementTick+0x150>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ee:	4b37      	ldr	r3, [pc, #220]	; (8006acc <xTaskIncrementTick+0x15c>)
 80069f0:	f04f 32ff 	mov.w	r2, #4294967295
 80069f4:	601a      	str	r2, [r3, #0]
					break;
 80069f6:	e03f      	b.n	8006a78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f8:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <xTaskIncrementTick+0x150>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d203      	bcs.n	8006a18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a10:	4a2e      	ldr	r2, [pc, #184]	; (8006acc <xTaskIncrementTick+0x15c>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a16:	e02f      	b.n	8006a78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe ff79 	bl	8005914 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe ff70 	bl	8005914 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4b25      	ldr	r3, [pc, #148]	; (8006ad0 <xTaskIncrementTick+0x160>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d903      	bls.n	8006a48 <xTaskIncrementTick+0xd8>
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <xTaskIncrementTick+0x160>)
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4a1f      	ldr	r2, [pc, #124]	; (8006ad4 <xTaskIncrementTick+0x164>)
 8006a56:	441a      	add	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	f7fe fefb 	bl	800585a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <xTaskIncrementTick+0x168>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d3b8      	bcc.n	80069e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a76:	e7b5      	b.n	80069e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a78:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <xTaskIncrementTick+0x168>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	4915      	ldr	r1, [pc, #84]	; (8006ad4 <xTaskIncrementTick+0x164>)
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d901      	bls.n	8006a94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <xTaskIncrementTick+0x16c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e004      	b.n	8006aac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <xTaskIncrementTick+0x170>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <xTaskIncrementTick+0x170>)
 8006aaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006aac:	697b      	ldr	r3, [r7, #20]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200012b4 	.word	0x200012b4
 8006abc:	20001290 	.word	0x20001290
 8006ac0:	20001244 	.word	0x20001244
 8006ac4:	20001248 	.word	0x20001248
 8006ac8:	200012a4 	.word	0x200012a4
 8006acc:	200012ac 	.word	0x200012ac
 8006ad0:	20001294 	.word	0x20001294
 8006ad4:	20000dbc 	.word	0x20000dbc
 8006ad8:	20000db8 	.word	0x20000db8
 8006adc:	200012a0 	.word	0x200012a0
 8006ae0:	2000129c 	.word	0x2000129c

08006ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <vTaskSwitchContext+0xb0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006af2:	4b29      	ldr	r3, [pc, #164]	; (8006b98 <vTaskSwitchContext+0xb4>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006af8:	e046      	b.n	8006b88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006afa:	4b27      	ldr	r3, [pc, #156]	; (8006b98 <vTaskSwitchContext+0xb4>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b00:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <vTaskSwitchContext+0xb8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e010      	b.n	8006b2a <vTaskSwitchContext+0x46>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <vTaskSwitchContext+0x40>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vTaskSwitchContext+0x3e>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	491d      	ldr	r1, [pc, #116]	; (8006ba0 <vTaskSwitchContext+0xbc>)
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0e4      	beq.n	8006b08 <vTaskSwitchContext+0x24>
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <vTaskSwitchContext+0xbc>)
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	605a      	str	r2, [r3, #4]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d104      	bne.n	8006b6e <vTaskSwitchContext+0x8a>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	605a      	str	r2, [r3, #4]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4a0b      	ldr	r2, [pc, #44]	; (8006ba4 <vTaskSwitchContext+0xc0>)
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <vTaskSwitchContext+0xb8>)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <vTaskSwitchContext+0xc0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3354      	adds	r3, #84	; 0x54
 8006b84:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <vTaskSwitchContext+0xc4>)
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	200012b4 	.word	0x200012b4
 8006b98:	200012a0 	.word	0x200012a0
 8006b9c:	20001294 	.word	0x20001294
 8006ba0:	20000dbc 	.word	0x20000dbc
 8006ba4:	20000db8 	.word	0x20000db8
 8006ba8:	2000007c 	.word	0x2000007c

08006bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	60fb      	str	r3, [r7, #12]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd2:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vTaskPlaceOnEventList+0x44>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fe fe61 	bl	80058a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006be0:	2101      	movs	r1, #1
 8006be2:	6838      	ldr	r0, [r7, #0]
 8006be4:	f000 fa80 	bl	80070e8 <prvAddCurrentTaskToDelayedList>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000db8 	.word	0x20000db8

08006bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	617b      	str	r3, [r7, #20]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3318      	adds	r3, #24
 8006c22:	4619      	mov	r1, r3
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7fe fe18 	bl	800585a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	68b8      	ldr	r0, [r7, #8]
 8006c3a:	f000 fa55 	bl	80070e8 <prvAddCurrentTaskToDelayedList>
	}
 8006c3e:	bf00      	nop
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000db8 	.word	0x20000db8

08006c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10a      	bne.n	8006c78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60fb      	str	r3, [r7, #12]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fe49 	bl	8005914 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c82:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <xTaskRemoveFromEventList+0xb0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11d      	bne.n	8006cc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fe40 	bl	8005914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <xTaskRemoveFromEventList+0xb4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d903      	bls.n	8006ca8 <xTaskRemoveFromEventList+0x5c>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <xTaskRemoveFromEventList+0xb4>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <xTaskRemoveFromEventList+0xb8>)
 8006cb6:	441a      	add	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7fe fdcb 	bl	800585a <vListInsertEnd>
 8006cc4:	e005      	b.n	8006cd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3318      	adds	r3, #24
 8006cca:	4619      	mov	r1, r3
 8006ccc:	480e      	ldr	r0, [pc, #56]	; (8006d08 <xTaskRemoveFromEventList+0xbc>)
 8006cce:	f7fe fdc4 	bl	800585a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <xTaskRemoveFromEventList+0xc0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d905      	bls.n	8006cec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <xTaskRemoveFromEventList+0xc4>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e001      	b.n	8006cf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cf0:	697b      	ldr	r3, [r7, #20]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200012b4 	.word	0x200012b4
 8006d00:	20001294 	.word	0x20001294
 8006d04:	20000dbc 	.word	0x20000dbc
 8006d08:	2000124c 	.word	0x2000124c
 8006d0c:	20000db8 	.word	0x20000db8
 8006d10:	200012a0 	.word	0x200012a0

08006d14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <vTaskInternalSetTimeOutState+0x24>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <vTaskInternalSetTimeOutState+0x28>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200012a4 	.word	0x200012a4
 8006d3c:	20001290 	.word	0x20001290

08006d40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d82:	f000 fe7f 	bl	8007a84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d86:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <xTaskCheckForTimeOut+0xbc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d102      	bne.n	8006da6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e023      	b.n	8006dee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <xTaskCheckForTimeOut+0xc0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d007      	beq.n	8006dc2 <xTaskCheckForTimeOut+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d302      	bcc.n	8006dc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
 8006dc0:	e015      	b.n	8006dee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d20b      	bcs.n	8006de4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff ff9b 	bl	8006d14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	e004      	b.n	8006dee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2200      	movs	r2, #0
 8006de8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dee:	f000 fe79 	bl	8007ae4 <vPortExitCritical>

	return xReturn;
 8006df2:	69fb      	ldr	r3, [r7, #28]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20001290 	.word	0x20001290
 8006e00:	200012a4 	.word	0x200012a4

08006e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <vTaskMissedYield+0x14>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	200012a0 	.word	0x200012a0

08006e1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e24:	f000 f852 	bl	8006ecc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <prvIdleTask+0x28>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d9f9      	bls.n	8006e24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <prvIdleTask+0x2c>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e40:	e7f0      	b.n	8006e24 <prvIdleTask+0x8>
 8006e42:	bf00      	nop
 8006e44:	20000dbc 	.word	0x20000dbc
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	e00c      	b.n	8006e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <prvInitialiseTaskLists+0x60>)
 8006e64:	4413      	add	r3, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fcca 	bl	8005800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	607b      	str	r3, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b37      	cmp	r3, #55	; 0x37
 8006e76:	d9ef      	bls.n	8006e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e78:	480d      	ldr	r0, [pc, #52]	; (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e7a:	f7fe fcc1 	bl	8005800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e7e:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006e80:	f7fe fcbe 	bl	8005800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e84:	480c      	ldr	r0, [pc, #48]	; (8006eb8 <prvInitialiseTaskLists+0x6c>)
 8006e86:	f7fe fcbb 	bl	8005800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8a:	480c      	ldr	r0, [pc, #48]	; (8006ebc <prvInitialiseTaskLists+0x70>)
 8006e8c:	f7fe fcb8 	bl	8005800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e90:	480b      	ldr	r0, [pc, #44]	; (8006ec0 <prvInitialiseTaskLists+0x74>)
 8006e92:	f7fe fcb5 	bl	8005800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <prvInitialiseTaskLists+0x78>)
 8006e98:	4a05      	ldr	r2, [pc, #20]	; (8006eb0 <prvInitialiseTaskLists+0x64>)
 8006e9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <prvInitialiseTaskLists+0x7c>)
 8006e9e:	4a05      	ldr	r2, [pc, #20]	; (8006eb4 <prvInitialiseTaskLists+0x68>)
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000dbc 	.word	0x20000dbc
 8006eb0:	2000121c 	.word	0x2000121c
 8006eb4:	20001230 	.word	0x20001230
 8006eb8:	2000124c 	.word	0x2000124c
 8006ebc:	20001260 	.word	0x20001260
 8006ec0:	20001278 	.word	0x20001278
 8006ec4:	20001244 	.word	0x20001244
 8006ec8:	20001248 	.word	0x20001248

08006ecc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed2:	e019      	b.n	8006f08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed4:	f000 fdd6 	bl	8007a84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <prvCheckTasksWaitingTermination+0x50>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fd15 	bl	8005914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	4a0b      	ldr	r2, [pc, #44]	; (8006f20 <prvCheckTasksWaitingTermination+0x54>)
 8006ef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006efc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006efe:	f000 fdf1 	bl	8007ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f810 	bl	8006f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <prvCheckTasksWaitingTermination+0x58>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e1      	bne.n	8006ed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20001260 	.word	0x20001260
 8006f20:	2000128c 	.word	0x2000128c
 8006f24:	20001274 	.word	0x20001274

08006f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3354      	adds	r3, #84	; 0x54
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 ff61 	bl	8007dfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 ff03 	bl	8007d54 <vPortFree>
				vPortFree( pxTCB );
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 ff00 	bl	8007d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f54:	e018      	b.n	8006f88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d103      	bne.n	8006f68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fef7 	bl	8007d54 <vPortFree>
	}
 8006f66:	e00f      	b.n	8006f88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d00a      	beq.n	8006f88 <prvDeleteTCB+0x60>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	60fb      	str	r3, [r7, #12]
}
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <prvDeleteTCB+0x5e>
	}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <prvResetNextTaskUnblockTime+0x38>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <prvResetNextTaskUnblockTime+0x3c>)
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fa8:	e008      	b.n	8006fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <prvResetNextTaskUnblockTime+0x38>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4a04      	ldr	r2, [pc, #16]	; (8006fcc <prvResetNextTaskUnblockTime+0x3c>)
 8006fba:	6013      	str	r3, [r2, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20001244 	.word	0x20001244
 8006fcc:	200012ac 	.word	0x200012ac

08006fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <xTaskGetSchedulerState+0x34>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	e008      	b.n	8006ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe4:	4b08      	ldr	r3, [pc, #32]	; (8007008 <xTaskGetSchedulerState+0x38>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fec:	2302      	movs	r3, #2
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	e001      	b.n	8006ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ff6:	687b      	ldr	r3, [r7, #4]
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20001298 	.word	0x20001298
 8007008:	200012b4 	.word	0x200012b4

0800700c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d056      	beq.n	80070d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007022:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <xTaskPriorityDisinherit+0xd0>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	429a      	cmp	r2, r3
 800702a:	d00a      	beq.n	8007042 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60fb      	str	r3, [r7, #12]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007072:	429a      	cmp	r2, r3
 8007074:	d02c      	beq.n	80070d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	2b00      	cmp	r3, #0
 800707c:	d128      	bne.n	80070d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3304      	adds	r3, #4
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fc46 	bl	8005914 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <xTaskPriorityDisinherit+0xd4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d903      	bls.n	80070b0 <xTaskPriorityDisinherit+0xa4>
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <xTaskPriorityDisinherit+0xd4>)
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <xTaskPriorityDisinherit+0xd8>)
 80070be:	441a      	add	r2, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f7fe fbc7 	bl	800585a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d0:	697b      	ldr	r3, [r7, #20]
	}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000db8 	.word	0x20000db8
 80070e0:	20001294 	.word	0x20001294
 80070e4:	20000dbc 	.word	0x20000dbc

080070e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070f2:	4b21      	ldr	r3, [pc, #132]	; (8007178 <prvAddCurrentTaskToDelayedList+0x90>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070f8:	4b20      	ldr	r3, [pc, #128]	; (800717c <prvAddCurrentTaskToDelayedList+0x94>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fc08 	bl	8005914 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d10a      	bne.n	8007122 <prvAddCurrentTaskToDelayedList+0x3a>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d007      	beq.n	8007122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	4b1a      	ldr	r3, [pc, #104]	; (800717c <prvAddCurrentTaskToDelayedList+0x94>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3304      	adds	r3, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4819      	ldr	r0, [pc, #100]	; (8007180 <prvAddCurrentTaskToDelayedList+0x98>)
 800711c:	f7fe fb9d 	bl	800585a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007120:	e026      	b.n	8007170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <prvAddCurrentTaskToDelayedList+0x94>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	429a      	cmp	r2, r3
 8007138:	d209      	bcs.n	800714e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800713a:	4b12      	ldr	r3, [pc, #72]	; (8007184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <prvAddCurrentTaskToDelayedList+0x94>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3304      	adds	r3, #4
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f7fe fbab 	bl	80058a2 <vListInsert>
}
 800714c:	e010      	b.n	8007170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvAddCurrentTaskToDelayedList+0x94>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe fba1 	bl	80058a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	d202      	bcs.n	8007170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800716a:	4a08      	ldr	r2, [pc, #32]	; (800718c <prvAddCurrentTaskToDelayedList+0xa4>)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20001290 	.word	0x20001290
 800717c:	20000db8 	.word	0x20000db8
 8007180:	20001278 	.word	0x20001278
 8007184:	20001248 	.word	0x20001248
 8007188:	20001244 	.word	0x20001244
 800718c:	200012ac 	.word	0x200012ac

08007190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007196:	2300      	movs	r3, #0
 8007198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800719a:	f000 fb07 	bl	80077ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800719e:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <xTimerCreateTimerTask+0x80>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d021      	beq.n	80071ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80071ae:	1d3a      	adds	r2, r7, #4
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fb07 	bl	80057cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	9202      	str	r2, [sp, #8]
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	2302      	movs	r3, #2
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	460a      	mov	r2, r1
 80071d0:	4910      	ldr	r1, [pc, #64]	; (8007214 <xTimerCreateTimerTask+0x84>)
 80071d2:	4811      	ldr	r0, [pc, #68]	; (8007218 <xTimerCreateTimerTask+0x88>)
 80071d4:	f7ff f8b4 	bl	8006340 <xTaskCreateStatic>
 80071d8:	4603      	mov	r3, r0
 80071da:	4a10      	ldr	r2, [pc, #64]	; (800721c <xTimerCreateTimerTask+0x8c>)
 80071dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071de:	4b0f      	ldr	r3, [pc, #60]	; (800721c <xTimerCreateTimerTask+0x8c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071e6:	2301      	movs	r3, #1
 80071e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	613b      	str	r3, [r7, #16]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007206:	697b      	ldr	r3, [r7, #20]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	200012e8 	.word	0x200012e8
 8007214:	0800885c 	.word	0x0800885c
 8007218:	08007355 	.word	0x08007355
 800721c:	200012ec 	.word	0x200012ec

08007220 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	; 0x28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	623b      	str	r3, [r7, #32]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <xTimerGenericCommand+0x98>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d02a      	beq.n	80072ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b05      	cmp	r3, #5
 8007266:	dc18      	bgt.n	800729a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007268:	f7ff feb2 	bl	8006fd0 <xTaskGetSchedulerState>
 800726c:	4603      	mov	r3, r0
 800726e:	2b02      	cmp	r3, #2
 8007270:	d109      	bne.n	8007286 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <xTimerGenericCommand+0x98>)
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	f107 0110 	add.w	r1, r7, #16
 800727a:	2300      	movs	r3, #0
 800727c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727e:	f7fe fc77 	bl	8005b70 <xQueueGenericSend>
 8007282:	6278      	str	r0, [r7, #36]	; 0x24
 8007284:	e012      	b.n	80072ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007286:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <xTimerGenericCommand+0x98>)
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	f107 0110 	add.w	r1, r7, #16
 800728e:	2300      	movs	r3, #0
 8007290:	2200      	movs	r2, #0
 8007292:	f7fe fc6d 	bl	8005b70 <xQueueGenericSend>
 8007296:	6278      	str	r0, [r7, #36]	; 0x24
 8007298:	e008      	b.n	80072ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <xTimerGenericCommand+0x98>)
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f107 0110 	add.w	r1, r7, #16
 80072a2:	2300      	movs	r3, #0
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	f7fe fd61 	bl	8005d6c <xQueueGenericSendFromISR>
 80072aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3728      	adds	r7, #40	; 0x28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200012e8 	.word	0x200012e8

080072bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c6:	4b22      	ldr	r3, [pc, #136]	; (8007350 <prvProcessExpiredTimer+0x94>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe fb1d 	bl	8005914 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d022      	beq.n	800732e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	699a      	ldr	r2, [r3, #24]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	18d1      	adds	r1, r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	6978      	ldr	r0, [r7, #20]
 80072f6:	f000 f8d1 	bl	800749c <prvInsertTimerInActiveList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01f      	beq.n	8007340 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007300:	2300      	movs	r3, #0
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	2100      	movs	r1, #0
 800730a:	6978      	ldr	r0, [r7, #20]
 800730c:	f7ff ff88 	bl	8007220 <xTimerGenericCommand>
 8007310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007334:	f023 0301 	bic.w	r3, r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	6978      	ldr	r0, [r7, #20]
 8007346:	4798      	blx	r3
}
 8007348:	bf00      	nop
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	200012e0 	.word	0x200012e0

08007354 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800735c:	f107 0308 	add.w	r3, r7, #8
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f857 	bl	8007414 <prvGetNextExpireTime>
 8007366:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f803 	bl	8007378 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007372:	f000 f8d5 	bl	8007520 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007376:	e7f1      	b.n	800735c <prvTimerTask+0x8>

08007378 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007382:	f7ff fa39 	bl	80067f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007386:	f107 0308 	add.w	r3, r7, #8
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f866 	bl	800745c <prvSampleTimeNow>
 8007390:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d130      	bne.n	80073fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <prvProcessTimerOrBlockTask+0x3c>
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d806      	bhi.n	80073b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073a6:	f7ff fa35 	bl	8006814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ff85 	bl	80072bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073b2:	e024      	b.n	80073fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d008      	beq.n	80073cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073ba:	4b13      	ldr	r3, [pc, #76]	; (8007408 <prvProcessTimerOrBlockTask+0x90>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <prvProcessTimerOrBlockTask+0x50>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <prvProcessTimerOrBlockTask+0x52>
 80073c8:	2300      	movs	r3, #0
 80073ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <prvProcessTimerOrBlockTask+0x94>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	f7fe ff7d 	bl	80062d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073de:	f7ff fa19 	bl	8006814 <xTaskResumeAll>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073e8:	4b09      	ldr	r3, [pc, #36]	; (8007410 <prvProcessTimerOrBlockTask+0x98>)
 80073ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	f3bf 8f6f 	isb	sy
}
 80073f8:	e001      	b.n	80073fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073fa:	f7ff fa0b 	bl	8006814 <xTaskResumeAll>
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	200012e4 	.word	0x200012e4
 800740c:	200012e8 	.word	0x200012e8
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <prvGetNextExpireTime+0x44>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <prvGetNextExpireTime+0x16>
 8007426:	2201      	movs	r2, #1
 8007428:	e000      	b.n	800742c <prvGetNextExpireTime+0x18>
 800742a:	2200      	movs	r2, #0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007438:	4b07      	ldr	r3, [pc, #28]	; (8007458 <prvGetNextExpireTime+0x44>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e001      	b.n	8007448 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007448:	68fb      	ldr	r3, [r7, #12]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	200012e0 	.word	0x200012e0

0800745c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007464:	f7ff fa74 	bl	8006950 <xTaskGetTickCount>
 8007468:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <prvSampleTimeNow+0x3c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	429a      	cmp	r2, r3
 8007472:	d205      	bcs.n	8007480 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007474:	f000 f936 	bl	80076e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e002      	b.n	8007486 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007486:	4a04      	ldr	r2, [pc, #16]	; (8007498 <prvSampleTimeNow+0x3c>)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800748c:	68fb      	ldr	r3, [r7, #12]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200012f0 	.word	0x200012f0

0800749c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d812      	bhi.n	80074e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d302      	bcc.n	80074d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e01b      	b.n	800750e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <prvInsertTimerInActiveList+0x7c>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3304      	adds	r3, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4610      	mov	r0, r2
 80074e2:	f7fe f9de 	bl	80058a2 <vListInsert>
 80074e6:	e012      	b.n	800750e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d206      	bcs.n	80074fe <prvInsertTimerInActiveList+0x62>
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d302      	bcc.n	80074fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074f8:	2301      	movs	r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e007      	b.n	800750e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <prvInsertTimerInActiveList+0x80>)
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3304      	adds	r3, #4
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f7fe f9ca 	bl	80058a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800750e:	697b      	ldr	r3, [r7, #20]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	200012e4 	.word	0x200012e4
 800751c:	200012e0 	.word	0x200012e0

08007520 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	; 0x38
 8007524:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007526:	e0ca      	b.n	80076be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	da18      	bge.n	8007560 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800752e:	1d3b      	adds	r3, r7, #4
 8007530:	3304      	adds	r3, #4
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	61fb      	str	r3, [r7, #28]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007556:	6850      	ldr	r0, [r2, #4]
 8007558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800755a:	6892      	ldr	r2, [r2, #8]
 800755c:	4611      	mov	r1, r2
 800755e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f2c0 80ab 	blt.w	80076be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe f9cb 	bl	8005914 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800757e:	463b      	mov	r3, r7
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff ff6b 	bl	800745c <prvSampleTimeNow>
 8007586:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b09      	cmp	r3, #9
 800758c:	f200 8096 	bhi.w	80076bc <prvProcessReceivedCommands+0x19c>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <prvProcessReceivedCommands+0x78>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075c1 	.word	0x080075c1
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c1 	.word	0x080075c1
 80075a4:	08007635 	.word	0x08007635
 80075a8:	08007649 	.word	0x08007649
 80075ac:	08007693 	.word	0x08007693
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075c1 	.word	0x080075c1
 80075b8:	08007635 	.word	0x08007635
 80075bc:	08007649 	.word	0x08007649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	18d1      	adds	r1, r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e0:	f7ff ff5c 	bl	800749c <prvInsertTimerInActiveList>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d069      	beq.n	80076be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d05e      	beq.n	80076be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	441a      	add	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	2100      	movs	r1, #0
 8007610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007612:	f7ff fe05 	bl	8007220 <xTimerGenericCommand>
 8007616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d14f      	bne.n	80076be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61bb      	str	r3, [r7, #24]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007646:	e03a      	b.n	80076be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	617b      	str	r3, [r7, #20]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	18d1      	adds	r1, r2, r3
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800768c:	f7ff ff06 	bl	800749c <prvInsertTimerInActiveList>
					break;
 8007690:	e015      	b.n	80076be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80076a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a2:	f000 fb57 	bl	8007d54 <vPortFree>
 80076a6:	e00a      	b.n	80076be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076ba:	e000      	b.n	80076be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80076bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <prvProcessReceivedCommands+0x1c0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	1d39      	adds	r1, r7, #4
 80076c4:	2200      	movs	r2, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fbec 	bl	8005ea4 <xQueueReceive>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f47f af2a 	bne.w	8007528 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	3730      	adds	r7, #48	; 0x30
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200012e8 	.word	0x200012e8

080076e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ea:	e048      	b.n	800777e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076ec:	4b2d      	ldr	r3, [pc, #180]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076f6:	4b2b      	ldr	r3, [pc, #172]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe f905 	bl	8005914 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d02e      	beq.n	800777e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	429a      	cmp	r2, r3
 8007730:	d90e      	bls.n	8007750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800773e:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe f8aa 	bl	80058a2 <vListInsert>
 800774e:	e016      	b.n	800777e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007750:	2300      	movs	r3, #0
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	2100      	movs	r1, #0
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fd60 	bl	8007220 <xTimerGenericCommand>
 8007760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	603b      	str	r3, [r7, #0]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1b1      	bne.n	80076ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800778e:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <prvSwitchTimerLists+0xc4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <prvSwitchTimerLists+0xc0>)
 8007794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007796:	4a04      	ldr	r2, [pc, #16]	; (80077a8 <prvSwitchTimerLists+0xc4>)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	6013      	str	r3, [r2, #0]
}
 800779c:	bf00      	nop
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200012e0 	.word	0x200012e0
 80077a8:	200012e4 	.word	0x200012e4

080077ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077b2:	f000 f967 	bl	8007a84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077b6:	4b15      	ldr	r3, [pc, #84]	; (800780c <prvCheckForValidListAndQueue+0x60>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d120      	bne.n	8007800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077be:	4814      	ldr	r0, [pc, #80]	; (8007810 <prvCheckForValidListAndQueue+0x64>)
 80077c0:	f7fe f81e 	bl	8005800 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077c4:	4813      	ldr	r0, [pc, #76]	; (8007814 <prvCheckForValidListAndQueue+0x68>)
 80077c6:	f7fe f81b 	bl	8005800 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <prvCheckForValidListAndQueue+0x6c>)
 80077cc:	4a10      	ldr	r2, [pc, #64]	; (8007810 <prvCheckForValidListAndQueue+0x64>)
 80077ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077d0:	4b12      	ldr	r3, [pc, #72]	; (800781c <prvCheckForValidListAndQueue+0x70>)
 80077d2:	4a10      	ldr	r2, [pc, #64]	; (8007814 <prvCheckForValidListAndQueue+0x68>)
 80077d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077d6:	2300      	movs	r3, #0
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <prvCheckForValidListAndQueue+0x74>)
 80077dc:	4a11      	ldr	r2, [pc, #68]	; (8007824 <prvCheckForValidListAndQueue+0x78>)
 80077de:	2110      	movs	r1, #16
 80077e0:	200a      	movs	r0, #10
 80077e2:	f7fe f929 	bl	8005a38 <xQueueGenericCreateStatic>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a08      	ldr	r2, [pc, #32]	; (800780c <prvCheckForValidListAndQueue+0x60>)
 80077ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077ec:	4b07      	ldr	r3, [pc, #28]	; (800780c <prvCheckForValidListAndQueue+0x60>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077f4:	4b05      	ldr	r3, [pc, #20]	; (800780c <prvCheckForValidListAndQueue+0x60>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	490b      	ldr	r1, [pc, #44]	; (8007828 <prvCheckForValidListAndQueue+0x7c>)
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fd42 	bl	8006284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007800:	f000 f970 	bl	8007ae4 <vPortExitCritical>
}
 8007804:	bf00      	nop
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200012e8 	.word	0x200012e8
 8007810:	200012b8 	.word	0x200012b8
 8007814:	200012cc 	.word	0x200012cc
 8007818:	200012e0 	.word	0x200012e0
 800781c:	200012e4 	.word	0x200012e4
 8007820:	20001394 	.word	0x20001394
 8007824:	200012f4 	.word	0x200012f4
 8007828:	08008864 	.word	0x08008864

0800782c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b04      	subs	r3, #4
 800783c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b04      	subs	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800785c:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <pxPortInitialiseStack+0x64>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b14      	subs	r3, #20
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b04      	subs	r3, #4
 8007872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f06f 0202 	mvn.w	r2, #2
 800787a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3b20      	subs	r3, #32
 8007880:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	08007895 	.word	0x08007895

08007894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <prvTaskExitError+0x54>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a6:	d00a      	beq.n	80078be <prvTaskExitError+0x2a>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	60fb      	str	r3, [r7, #12]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <prvTaskExitError+0x28>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60bb      	str	r3, [r7, #8]
}
 80078d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078d2:	bf00      	nop
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0fc      	beq.n	80078d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	2000002c 	.word	0x2000002c
 80078ec:	00000000 	.word	0x00000000

080078f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <pxCurrentTCBConst2>)
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	f380 8809 	msr	PSP, r0
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f04f 0000 	mov.w	r0, #0
 8007906:	f380 8811 	msr	BASEPRI, r0
 800790a:	4770      	bx	lr
 800790c:	f3af 8000 	nop.w

08007910 <pxCurrentTCBConst2>:
 8007910:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007918:	4808      	ldr	r0, [pc, #32]	; (800793c <prvPortStartFirstTask+0x24>)
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f380 8808 	msr	MSP, r0
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8814 	msr	CONTROL, r0
 800792a:	b662      	cpsie	i
 800792c:	b661      	cpsie	f
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	df00      	svc	0
 8007938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800793a:	bf00      	nop
 800793c:	e000ed08 	.word	0xe000ed08

08007940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007946:	4b46      	ldr	r3, [pc, #280]	; (8007a60 <xPortStartScheduler+0x120>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a46      	ldr	r2, [pc, #280]	; (8007a64 <xPortStartScheduler+0x124>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10a      	bne.n	8007966 <xPortStartScheduler+0x26>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007966:	4b3e      	ldr	r3, [pc, #248]	; (8007a60 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3f      	ldr	r2, [pc, #252]	; (8007a68 <xPortStartScheduler+0x128>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x46>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	60fb      	str	r3, [r7, #12]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007986:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <xPortStartScheduler+0x12c>)
 8007988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <xPortStartScheduler+0x130>)
 80079ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ae:	4b31      	ldr	r3, [pc, #196]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b4:	e009      	b.n	80079ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079b6:	4b2f      	ldr	r3, [pc, #188]	; (8007a74 <xPortStartScheduler+0x134>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4a2d      	ldr	r2, [pc, #180]	; (8007a74 <xPortStartScheduler+0x134>)
 80079be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b80      	cmp	r3, #128	; 0x80
 80079d4:	d0ef      	beq.n	80079b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079d6:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f1c3 0307 	rsb	r3, r3, #7
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d00a      	beq.n	80079f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	60bb      	str	r3, [r7, #8]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079f8:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <xPortStartScheduler+0x134>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <xPortStartScheduler+0x134>)
 8007a0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a16:	4b18      	ldr	r3, [pc, #96]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a14      	ldr	r2, [pc, #80]	; (8007a78 <xPortStartScheduler+0x138>)
 8007a28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a2e:	f000 f8dd 	bl	8007bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a32:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <xPortStartScheduler+0x13c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a38:	f000 f8fc 	bl	8007c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0f      	ldr	r2, [pc, #60]	; (8007a80 <xPortStartScheduler+0x140>)
 8007a42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a48:	f7ff ff66 	bl	8007918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a4c:	f7ff f84a 	bl	8006ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a50:	f7ff ff20 	bl	8007894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	e000ed00 	.word	0xe000ed00
 8007a64:	410fc271 	.word	0x410fc271
 8007a68:	410fc270 	.word	0x410fc270
 8007a6c:	e000e400 	.word	0xe000e400
 8007a70:	200013e4 	.word	0x200013e4
 8007a74:	200013e8 	.word	0x200013e8
 8007a78:	e000ed20 	.word	0xe000ed20
 8007a7c:	2000002c 	.word	0x2000002c
 8007a80:	e000ef34 	.word	0xe000ef34

08007a84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	607b      	str	r3, [r7, #4]
}
 8007a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a9e:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a0d      	ldr	r2, [pc, #52]	; (8007adc <vPortEnterCritical+0x58>)
 8007aa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <vPortEnterCritical+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10f      	bne.n	8007ad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <vPortEnterCritical+0x5c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	603b      	str	r3, [r7, #0]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <vPortEnterCritical+0x4a>
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	2000002c 	.word	0x2000002c
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <vPortExitCritical+0x50>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <vPortExitCritical+0x24>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	607b      	str	r3, [r7, #4]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <vPortExitCritical+0x50>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <vPortExitCritical+0x50>)
 8007b10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b12:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <vPortExitCritical+0x50>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d105      	bne.n	8007b26 <vPortExitCritical+0x42>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f383 8811 	msr	BASEPRI, r3
}
 8007b24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000002c 	.word	0x2000002c
	...

08007b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b40:	f3ef 8009 	mrs	r0, PSP
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <pxCurrentTCBConst>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	f01e 0f10 	tst.w	lr, #16
 8007b50:	bf08      	it	eq
 8007b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b64:	f380 8811 	msr	BASEPRI, r0
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f7fe ffb8 	bl	8006ae4 <vTaskSwitchContext>
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f380 8811 	msr	BASEPRI, r0
 8007b7c:	bc09      	pop	{r0, r3}
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	6808      	ldr	r0, [r1, #0]
 8007b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b86:	f01e 0f10 	tst.w	lr, #16
 8007b8a:	bf08      	it	eq
 8007b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b90:	f380 8809 	msr	PSP, r0
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst>:
 8007ba0:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	607b      	str	r3, [r7, #4]
}
 8007bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bc2:	f7fe fed5 	bl	8006970 <xTaskIncrementTick>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <xPortSysTickHandler+0x40>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <vPortSetupTimerInterrupt+0x38>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <vPortSetupTimerInterrupt+0x3c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <vPortSetupTimerInterrupt+0x40>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	099b      	lsrs	r3, r3, #6
 8007c08:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <vPortSetupTimerInterrupt+0x44>)
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <vPortSetupTimerInterrupt+0x34>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010
 8007c24:	e000e018 	.word	0xe000e018
 8007c28:	20000018 	.word	0x20000018
 8007c2c:	10624dd3 	.word	0x10624dd3
 8007c30:	e000e014 	.word	0xe000e014

08007c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c44 <vPortEnableVFP+0x10>
 8007c38:	6801      	ldr	r1, [r0, #0]
 8007c3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c3e:	6001      	str	r1, [r0, #0]
 8007c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c42:	bf00      	nop
 8007c44:	e000ed88 	.word	0xe000ed88

08007c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d914      	bls.n	8007c84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c5a:	4a17      	ldr	r2, [pc, #92]	; (8007cb8 <vPortValidateInterruptPriority+0x70>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <vPortValidateInterruptPriority+0x74>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7afa      	ldrb	r2, [r7, #11]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20a      	bcs.n	8007c84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c84:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <vPortValidateInterruptPriority+0x78>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <vPortValidateInterruptPriority+0x7c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d90a      	bls.n	8007caa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	603b      	str	r3, [r7, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <vPortValidateInterruptPriority+0x60>
	}
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	e000e3f0 	.word	0xe000e3f0
 8007cbc:	200013e4 	.word	0x200013e4
 8007cc0:	e000ed0c 	.word	0xe000ed0c
 8007cc4:	200013e8 	.word	0x200013e8

08007cc8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8007ce8:	f7fe fd86 	bl	80067f8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <pvPortMalloc+0x80>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <pvPortMalloc+0x84>)
 8007cf6:	f023 0307 	bic.w	r3, r3, #7
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <pvPortMalloc+0x80>)
 8007cfe:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <pvPortMalloc+0x88>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d813      	bhi.n	8007d38 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007d10:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <pvPortMalloc+0x88>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	441a      	add	r2, r3
 8007d18:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <pvPortMalloc+0x88>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d90b      	bls.n	8007d38 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <pvPortMalloc+0x80>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <pvPortMalloc+0x88>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4413      	add	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8007d2c:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <pvPortMalloc+0x88>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	4a06      	ldr	r2, [pc, #24]	; (8007d50 <pvPortMalloc+0x88>)
 8007d36:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d38:	f7fe fd6c 	bl	8006814 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200033f0 	.word	0x200033f0
 8007d4c:	200013f4 	.word	0x200013f4
 8007d50:	200033ec 	.word	0x200033ec

08007d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <vPortFree+0x24>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	60fb      	str	r3, [r7, #12]
}
 8007d74:	bf00      	nop
 8007d76:	e7fe      	b.n	8007d76 <vPortFree+0x22>
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <sniprintf>:
 8007d84:	b40c      	push	{r2, r3}
 8007d86:	b530      	push	{r4, r5, lr}
 8007d88:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <sniprintf+0x64>)
 8007d8a:	1e0c      	subs	r4, r1, #0
 8007d8c:	681d      	ldr	r5, [r3, #0]
 8007d8e:	b09d      	sub	sp, #116	; 0x74
 8007d90:	da08      	bge.n	8007da4 <sniprintf+0x20>
 8007d92:	238b      	movs	r3, #139	; 0x8b
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	b01d      	add	sp, #116	; 0x74
 8007d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007da0:	b002      	add	sp, #8
 8007da2:	4770      	bx	lr
 8007da4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007da8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dac:	bf14      	ite	ne
 8007dae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007db2:	4623      	moveq	r3, r4
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dbc:	9002      	str	r0, [sp, #8]
 8007dbe:	9006      	str	r0, [sp, #24]
 8007dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dc6:	ab21      	add	r3, sp, #132	; 0x84
 8007dc8:	a902      	add	r1, sp, #8
 8007dca:	4628      	mov	r0, r5
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f000 f9f7 	bl	80081c0 <_svfiprintf_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	bfbc      	itt	lt
 8007dd6:	238b      	movlt	r3, #139	; 0x8b
 8007dd8:	602b      	strlt	r3, [r5, #0]
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d0dd      	beq.n	8007d9a <sniprintf+0x16>
 8007dde:	9b02      	ldr	r3, [sp, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e7d9      	b.n	8007d9a <sniprintf+0x16>
 8007de6:	bf00      	nop
 8007de8:	2000007c 	.word	0x2000007c

08007dec <memset>:
 8007dec:	4402      	add	r2, r0
 8007dee:	4603      	mov	r3, r0
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memset+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfa:	e7f9      	b.n	8007df0 <memset+0x4>

08007dfc <_reclaim_reent>:
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <_reclaim_reent+0xa8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4283      	cmp	r3, r0
 8007e02:	b570      	push	{r4, r5, r6, lr}
 8007e04:	4604      	mov	r4, r0
 8007e06:	d04b      	beq.n	8007ea0 <_reclaim_reent+0xa4>
 8007e08:	69c3      	ldr	r3, [r0, #28]
 8007e0a:	b143      	cbz	r3, 8007e1e <_reclaim_reent+0x22>
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d144      	bne.n	8007e9c <_reclaim_reent+0xa0>
 8007e12:	69e3      	ldr	r3, [r4, #28]
 8007e14:	6819      	ldr	r1, [r3, #0]
 8007e16:	b111      	cbz	r1, 8007e1e <_reclaim_reent+0x22>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 f87f 	bl	8007f1c <_free_r>
 8007e1e:	6961      	ldr	r1, [r4, #20]
 8007e20:	b111      	cbz	r1, 8007e28 <_reclaim_reent+0x2c>
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f87a 	bl	8007f1c <_free_r>
 8007e28:	69e1      	ldr	r1, [r4, #28]
 8007e2a:	b111      	cbz	r1, 8007e32 <_reclaim_reent+0x36>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 f875 	bl	8007f1c <_free_r>
 8007e32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e34:	b111      	cbz	r1, 8007e3c <_reclaim_reent+0x40>
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f870 	bl	8007f1c <_free_r>
 8007e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e3e:	b111      	cbz	r1, 8007e46 <_reclaim_reent+0x4a>
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 f86b 	bl	8007f1c <_free_r>
 8007e46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e48:	b111      	cbz	r1, 8007e50 <_reclaim_reent+0x54>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f866 	bl	8007f1c <_free_r>
 8007e50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e52:	b111      	cbz	r1, 8007e5a <_reclaim_reent+0x5e>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f861 	bl	8007f1c <_free_r>
 8007e5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e5c:	b111      	cbz	r1, 8007e64 <_reclaim_reent+0x68>
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f85c 	bl	8007f1c <_free_r>
 8007e64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e66:	b111      	cbz	r1, 8007e6e <_reclaim_reent+0x72>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f857 	bl	8007f1c <_free_r>
 8007e6e:	6a23      	ldr	r3, [r4, #32]
 8007e70:	b1b3      	cbz	r3, 8007ea0 <_reclaim_reent+0xa4>
 8007e72:	4620      	mov	r0, r4
 8007e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e78:	4718      	bx	r3
 8007e7a:	5949      	ldr	r1, [r1, r5]
 8007e7c:	b941      	cbnz	r1, 8007e90 <_reclaim_reent+0x94>
 8007e7e:	3504      	adds	r5, #4
 8007e80:	69e3      	ldr	r3, [r4, #28]
 8007e82:	2d80      	cmp	r5, #128	; 0x80
 8007e84:	68d9      	ldr	r1, [r3, #12]
 8007e86:	d1f8      	bne.n	8007e7a <_reclaim_reent+0x7e>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 f847 	bl	8007f1c <_free_r>
 8007e8e:	e7c0      	b.n	8007e12 <_reclaim_reent+0x16>
 8007e90:	680e      	ldr	r6, [r1, #0]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f842 	bl	8007f1c <_free_r>
 8007e98:	4631      	mov	r1, r6
 8007e9a:	e7ef      	b.n	8007e7c <_reclaim_reent+0x80>
 8007e9c:	2500      	movs	r5, #0
 8007e9e:	e7ef      	b.n	8007e80 <_reclaim_reent+0x84>
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	bf00      	nop
 8007ea4:	2000007c 	.word	0x2000007c

08007ea8 <__errno>:
 8007ea8:	4b01      	ldr	r3, [pc, #4]	; (8007eb0 <__errno+0x8>)
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	2000007c 	.word	0x2000007c

08007eb4 <__libc_init_array>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4d0d      	ldr	r5, [pc, #52]	; (8007eec <__libc_init_array+0x38>)
 8007eb8:	4c0d      	ldr	r4, [pc, #52]	; (8007ef0 <__libc_init_array+0x3c>)
 8007eba:	1b64      	subs	r4, r4, r5
 8007ebc:	10a4      	asrs	r4, r4, #2
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	42a6      	cmp	r6, r4
 8007ec2:	d109      	bne.n	8007ed8 <__libc_init_array+0x24>
 8007ec4:	4d0b      	ldr	r5, [pc, #44]	; (8007ef4 <__libc_init_array+0x40>)
 8007ec6:	4c0c      	ldr	r4, [pc, #48]	; (8007ef8 <__libc_init_array+0x44>)
 8007ec8:	f000 fc6a 	bl	80087a0 <_init>
 8007ecc:	1b64      	subs	r4, r4, r5
 8007ece:	10a4      	asrs	r4, r4, #2
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	42a6      	cmp	r6, r4
 8007ed4:	d105      	bne.n	8007ee2 <__libc_init_array+0x2e>
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007edc:	4798      	blx	r3
 8007ede:	3601      	adds	r6, #1
 8007ee0:	e7ee      	b.n	8007ec0 <__libc_init_array+0xc>
 8007ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee6:	4798      	blx	r3
 8007ee8:	3601      	adds	r6, #1
 8007eea:	e7f2      	b.n	8007ed2 <__libc_init_array+0x1e>
 8007eec:	08009110 	.word	0x08009110
 8007ef0:	08009110 	.word	0x08009110
 8007ef4:	08009110 	.word	0x08009110
 8007ef8:	08009114 	.word	0x08009114

08007efc <__retarget_lock_acquire_recursive>:
 8007efc:	4770      	bx	lr

08007efe <__retarget_lock_release_recursive>:
 8007efe:	4770      	bx	lr

08007f00 <memcpy>:
 8007f00:	440a      	add	r2, r1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f08:	d100      	bne.n	8007f0c <memcpy+0xc>
 8007f0a:	4770      	bx	lr
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f16:	4291      	cmp	r1, r2
 8007f18:	d1f9      	bne.n	8007f0e <memcpy+0xe>
 8007f1a:	bd10      	pop	{r4, pc}

08007f1c <_free_r>:
 8007f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d044      	beq.n	8007fac <_free_r+0x90>
 8007f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f2e:	bfb8      	it	lt
 8007f30:	18e4      	addlt	r4, r4, r3
 8007f32:	f000 f8df 	bl	80080f4 <__malloc_lock>
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <_free_r+0x94>)
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x30>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	b003      	add	sp, #12
 8007f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f48:	f000 b8da 	b.w	8008100 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x46>
 8007f50:	6825      	ldr	r5, [r4, #0]
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x22>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x50>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x46>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1855      	adds	r5, r2, r1
 8007f70:	42a5      	cmp	r5, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x70>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	4421      	add	r1, r4
 8007f78:	1854      	adds	r4, r2, r1
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x26>
 8007f80:	681c      	ldr	r4, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	440c      	add	r4, r1
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x26>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x78>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x26>
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1961      	adds	r1, r4, r5
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x26>
 8007fac:	b003      	add	sp, #12
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	20003534 	.word	0x20003534

08007fb4 <sbrk_aligned>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ff0 <sbrk_aligned+0x3c>)
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b911      	cbnz	r1, 8007fc6 <sbrk_aligned+0x12>
 8007fc0:	f000 fba6 	bl	8008710 <_sbrk_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 fba1 	bl	8008710 <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d00a      	beq.n	8007fe8 <sbrk_aligned+0x34>
 8007fd2:	1cc4      	adds	r4, r0, #3
 8007fd4:	f024 0403 	bic.w	r4, r4, #3
 8007fd8:	42a0      	cmp	r0, r4
 8007fda:	d007      	beq.n	8007fec <sbrk_aligned+0x38>
 8007fdc:	1a21      	subs	r1, r4, r0
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fb96 	bl	8008710 <_sbrk_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d101      	bne.n	8007fec <sbrk_aligned+0x38>
 8007fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	20003538 	.word	0x20003538

08007ff4 <_malloc_r>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	1ccd      	adds	r5, r1, #3
 8007ffa:	f025 0503 	bic.w	r5, r5, #3
 8007ffe:	3508      	adds	r5, #8
 8008000:	2d0c      	cmp	r5, #12
 8008002:	bf38      	it	cc
 8008004:	250c      	movcc	r5, #12
 8008006:	2d00      	cmp	r5, #0
 8008008:	4607      	mov	r7, r0
 800800a:	db01      	blt.n	8008010 <_malloc_r+0x1c>
 800800c:	42a9      	cmp	r1, r5
 800800e:	d905      	bls.n	800801c <_malloc_r+0x28>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	2600      	movs	r6, #0
 8008016:	4630      	mov	r0, r6
 8008018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080f0 <_malloc_r+0xfc>
 8008020:	f000 f868 	bl	80080f4 <__malloc_lock>
 8008024:	f8d8 3000 	ldr.w	r3, [r8]
 8008028:	461c      	mov	r4, r3
 800802a:	bb5c      	cbnz	r4, 8008084 <_malloc_r+0x90>
 800802c:	4629      	mov	r1, r5
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ffc0 	bl	8007fb4 <sbrk_aligned>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	4604      	mov	r4, r0
 8008038:	d155      	bne.n	80080e6 <_malloc_r+0xf2>
 800803a:	f8d8 4000 	ldr.w	r4, [r8]
 800803e:	4626      	mov	r6, r4
 8008040:	2e00      	cmp	r6, #0
 8008042:	d145      	bne.n	80080d0 <_malloc_r+0xdc>
 8008044:	2c00      	cmp	r4, #0
 8008046:	d048      	beq.n	80080da <_malloc_r+0xe6>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	4631      	mov	r1, r6
 800804c:	4638      	mov	r0, r7
 800804e:	eb04 0903 	add.w	r9, r4, r3
 8008052:	f000 fb5d 	bl	8008710 <_sbrk_r>
 8008056:	4581      	cmp	r9, r0
 8008058:	d13f      	bne.n	80080da <_malloc_r+0xe6>
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	1a6d      	subs	r5, r5, r1
 800805e:	4629      	mov	r1, r5
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ffa7 	bl	8007fb4 <sbrk_aligned>
 8008066:	3001      	adds	r0, #1
 8008068:	d037      	beq.n	80080da <_malloc_r+0xe6>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	442b      	add	r3, r5
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	f8d8 3000 	ldr.w	r3, [r8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d038      	beq.n	80080ea <_malloc_r+0xf6>
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	42a2      	cmp	r2, r4
 800807c:	d12b      	bne.n	80080d6 <_malloc_r+0xe2>
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	e00f      	b.n	80080a4 <_malloc_r+0xb0>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	1b52      	subs	r2, r2, r5
 8008088:	d41f      	bmi.n	80080ca <_malloc_r+0xd6>
 800808a:	2a0b      	cmp	r2, #11
 800808c:	d917      	bls.n	80080be <_malloc_r+0xca>
 800808e:	1961      	adds	r1, r4, r5
 8008090:	42a3      	cmp	r3, r4
 8008092:	6025      	str	r5, [r4, #0]
 8008094:	bf18      	it	ne
 8008096:	6059      	strne	r1, [r3, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	bf08      	it	eq
 800809c:	f8c8 1000 	streq.w	r1, [r8]
 80080a0:	5162      	str	r2, [r4, r5]
 80080a2:	604b      	str	r3, [r1, #4]
 80080a4:	4638      	mov	r0, r7
 80080a6:	f104 060b 	add.w	r6, r4, #11
 80080aa:	f000 f829 	bl	8008100 <__malloc_unlock>
 80080ae:	f026 0607 	bic.w	r6, r6, #7
 80080b2:	1d23      	adds	r3, r4, #4
 80080b4:	1af2      	subs	r2, r6, r3
 80080b6:	d0ae      	beq.n	8008016 <_malloc_r+0x22>
 80080b8:	1b9b      	subs	r3, r3, r6
 80080ba:	50a3      	str	r3, [r4, r2]
 80080bc:	e7ab      	b.n	8008016 <_malloc_r+0x22>
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	d1dd      	bne.n	8008080 <_malloc_r+0x8c>
 80080c4:	f8c8 2000 	str.w	r2, [r8]
 80080c8:	e7ec      	b.n	80080a4 <_malloc_r+0xb0>
 80080ca:	4623      	mov	r3, r4
 80080cc:	6864      	ldr	r4, [r4, #4]
 80080ce:	e7ac      	b.n	800802a <_malloc_r+0x36>
 80080d0:	4634      	mov	r4, r6
 80080d2:	6876      	ldr	r6, [r6, #4]
 80080d4:	e7b4      	b.n	8008040 <_malloc_r+0x4c>
 80080d6:	4613      	mov	r3, r2
 80080d8:	e7cc      	b.n	8008074 <_malloc_r+0x80>
 80080da:	230c      	movs	r3, #12
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 f80e 	bl	8008100 <__malloc_unlock>
 80080e4:	e797      	b.n	8008016 <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7dc      	b.n	80080a4 <_malloc_r+0xb0>
 80080ea:	605b      	str	r3, [r3, #4]
 80080ec:	deff      	udf	#255	; 0xff
 80080ee:	bf00      	nop
 80080f0:	20003534 	.word	0x20003534

080080f4 <__malloc_lock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	; (80080fc <__malloc_lock+0x8>)
 80080f6:	f7ff bf01 	b.w	8007efc <__retarget_lock_acquire_recursive>
 80080fa:	bf00      	nop
 80080fc:	20003530 	.word	0x20003530

08008100 <__malloc_unlock>:
 8008100:	4801      	ldr	r0, [pc, #4]	; (8008108 <__malloc_unlock+0x8>)
 8008102:	f7ff befc 	b.w	8007efe <__retarget_lock_release_recursive>
 8008106:	bf00      	nop
 8008108:	20003530 	.word	0x20003530

0800810c <__ssputs_r>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	688e      	ldr	r6, [r1, #8]
 8008112:	461f      	mov	r7, r3
 8008114:	42be      	cmp	r6, r7
 8008116:	680b      	ldr	r3, [r1, #0]
 8008118:	4682      	mov	sl, r0
 800811a:	460c      	mov	r4, r1
 800811c:	4690      	mov	r8, r2
 800811e:	d82c      	bhi.n	800817a <__ssputs_r+0x6e>
 8008120:	898a      	ldrh	r2, [r1, #12]
 8008122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008126:	d026      	beq.n	8008176 <__ssputs_r+0x6a>
 8008128:	6965      	ldr	r5, [r4, #20]
 800812a:	6909      	ldr	r1, [r1, #16]
 800812c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008130:	eba3 0901 	sub.w	r9, r3, r1
 8008134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008138:	1c7b      	adds	r3, r7, #1
 800813a:	444b      	add	r3, r9
 800813c:	106d      	asrs	r5, r5, #1
 800813e:	429d      	cmp	r5, r3
 8008140:	bf38      	it	cc
 8008142:	461d      	movcc	r5, r3
 8008144:	0553      	lsls	r3, r2, #21
 8008146:	d527      	bpl.n	8008198 <__ssputs_r+0x8c>
 8008148:	4629      	mov	r1, r5
 800814a:	f7ff ff53 	bl	8007ff4 <_malloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	b360      	cbz	r0, 80081ac <__ssputs_r+0xa0>
 8008152:	6921      	ldr	r1, [r4, #16]
 8008154:	464a      	mov	r2, r9
 8008156:	f7ff fed3 	bl	8007f00 <memcpy>
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	6126      	str	r6, [r4, #16]
 8008168:	6165      	str	r5, [r4, #20]
 800816a:	444e      	add	r6, r9
 800816c:	eba5 0509 	sub.w	r5, r5, r9
 8008170:	6026      	str	r6, [r4, #0]
 8008172:	60a5      	str	r5, [r4, #8]
 8008174:	463e      	mov	r6, r7
 8008176:	42be      	cmp	r6, r7
 8008178:	d900      	bls.n	800817c <__ssputs_r+0x70>
 800817a:	463e      	mov	r6, r7
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4632      	mov	r2, r6
 8008180:	4641      	mov	r1, r8
 8008182:	f000 faab 	bl	80086dc <memmove>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	1b9b      	subs	r3, r3, r6
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	4433      	add	r3, r6
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	2000      	movs	r0, #0
 8008194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008198:	462a      	mov	r2, r5
 800819a:	f000 fac9 	bl	8008730 <_realloc_r>
 800819e:	4606      	mov	r6, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1e0      	bne.n	8008166 <__ssputs_r+0x5a>
 80081a4:	6921      	ldr	r1, [r4, #16]
 80081a6:	4650      	mov	r0, sl
 80081a8:	f7ff feb8 	bl	8007f1c <_free_r>
 80081ac:	230c      	movs	r3, #12
 80081ae:	f8ca 3000 	str.w	r3, [sl]
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295
 80081be:	e7e9      	b.n	8008194 <__ssputs_r+0x88>

080081c0 <_svfiprintf_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	4698      	mov	r8, r3
 80081c6:	898b      	ldrh	r3, [r1, #12]
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	b09d      	sub	sp, #116	; 0x74
 80081cc:	4607      	mov	r7, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	4614      	mov	r4, r2
 80081d2:	d50e      	bpl.n	80081f2 <_svfiprintf_r+0x32>
 80081d4:	690b      	ldr	r3, [r1, #16]
 80081d6:	b963      	cbnz	r3, 80081f2 <_svfiprintf_r+0x32>
 80081d8:	2140      	movs	r1, #64	; 0x40
 80081da:	f7ff ff0b 	bl	8007ff4 <_malloc_r>
 80081de:	6028      	str	r0, [r5, #0]
 80081e0:	6128      	str	r0, [r5, #16]
 80081e2:	b920      	cbnz	r0, 80081ee <_svfiprintf_r+0x2e>
 80081e4:	230c      	movs	r3, #12
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e0d0      	b.n	8008390 <_svfiprintf_r+0x1d0>
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	616b      	str	r3, [r5, #20]
 80081f2:	2300      	movs	r3, #0
 80081f4:	9309      	str	r3, [sp, #36]	; 0x24
 80081f6:	2320      	movs	r3, #32
 80081f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008200:	2330      	movs	r3, #48	; 0x30
 8008202:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083a8 <_svfiprintf_r+0x1e8>
 8008206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	4623      	mov	r3, r4
 8008210:	469a      	mov	sl, r3
 8008212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008216:	b10a      	cbz	r2, 800821c <_svfiprintf_r+0x5c>
 8008218:	2a25      	cmp	r2, #37	; 0x25
 800821a:	d1f9      	bne.n	8008210 <_svfiprintf_r+0x50>
 800821c:	ebba 0b04 	subs.w	fp, sl, r4
 8008220:	d00b      	beq.n	800823a <_svfiprintf_r+0x7a>
 8008222:	465b      	mov	r3, fp
 8008224:	4622      	mov	r2, r4
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff6f 	bl	800810c <__ssputs_r>
 800822e:	3001      	adds	r0, #1
 8008230:	f000 80a9 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008236:	445a      	add	r2, fp
 8008238:	9209      	str	r2, [sp, #36]	; 0x24
 800823a:	f89a 3000 	ldrb.w	r3, [sl]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80a1 	beq.w	8008386 <_svfiprintf_r+0x1c6>
 8008244:	2300      	movs	r3, #0
 8008246:	f04f 32ff 	mov.w	r2, #4294967295
 800824a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824e:	f10a 0a01 	add.w	sl, sl, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	9307      	str	r3, [sp, #28]
 8008256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825a:	931a      	str	r3, [sp, #104]	; 0x68
 800825c:	4654      	mov	r4, sl
 800825e:	2205      	movs	r2, #5
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	4850      	ldr	r0, [pc, #320]	; (80083a8 <_svfiprintf_r+0x1e8>)
 8008266:	f7f7 ffb3 	bl	80001d0 <memchr>
 800826a:	9a04      	ldr	r2, [sp, #16]
 800826c:	b9d8      	cbnz	r0, 80082a6 <_svfiprintf_r+0xe6>
 800826e:	06d0      	lsls	r0, r2, #27
 8008270:	bf44      	itt	mi
 8008272:	2320      	movmi	r3, #32
 8008274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008278:	0711      	lsls	r1, r2, #28
 800827a:	bf44      	itt	mi
 800827c:	232b      	movmi	r3, #43	; 0x2b
 800827e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008282:	f89a 3000 	ldrb.w	r3, [sl]
 8008286:	2b2a      	cmp	r3, #42	; 0x2a
 8008288:	d015      	beq.n	80082b6 <_svfiprintf_r+0xf6>
 800828a:	9a07      	ldr	r2, [sp, #28]
 800828c:	4654      	mov	r4, sl
 800828e:	2000      	movs	r0, #0
 8008290:	f04f 0c0a 	mov.w	ip, #10
 8008294:	4621      	mov	r1, r4
 8008296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829a:	3b30      	subs	r3, #48	; 0x30
 800829c:	2b09      	cmp	r3, #9
 800829e:	d94d      	bls.n	800833c <_svfiprintf_r+0x17c>
 80082a0:	b1b0      	cbz	r0, 80082d0 <_svfiprintf_r+0x110>
 80082a2:	9207      	str	r2, [sp, #28]
 80082a4:	e014      	b.n	80082d0 <_svfiprintf_r+0x110>
 80082a6:	eba0 0308 	sub.w	r3, r0, r8
 80082aa:	fa09 f303 	lsl.w	r3, r9, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	46a2      	mov	sl, r4
 80082b4:	e7d2      	b.n	800825c <_svfiprintf_r+0x9c>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d19      	adds	r1, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9103      	str	r1, [sp, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfbb      	ittet	lt
 80082c2:	425b      	neglt	r3, r3
 80082c4:	f042 0202 	orrlt.w	r2, r2, #2
 80082c8:	9307      	strge	r3, [sp, #28]
 80082ca:	9307      	strlt	r3, [sp, #28]
 80082cc:	bfb8      	it	lt
 80082ce:	9204      	strlt	r2, [sp, #16]
 80082d0:	7823      	ldrb	r3, [r4, #0]
 80082d2:	2b2e      	cmp	r3, #46	; 0x2e
 80082d4:	d10c      	bne.n	80082f0 <_svfiprintf_r+0x130>
 80082d6:	7863      	ldrb	r3, [r4, #1]
 80082d8:	2b2a      	cmp	r3, #42	; 0x2a
 80082da:	d134      	bne.n	8008346 <_svfiprintf_r+0x186>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb8      	it	lt
 80082e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80082ec:	3402      	adds	r4, #2
 80082ee:	9305      	str	r3, [sp, #20]
 80082f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083b8 <_svfiprintf_r+0x1f8>
 80082f4:	7821      	ldrb	r1, [r4, #0]
 80082f6:	2203      	movs	r2, #3
 80082f8:	4650      	mov	r0, sl
 80082fa:	f7f7 ff69 	bl	80001d0 <memchr>
 80082fe:	b138      	cbz	r0, 8008310 <_svfiprintf_r+0x150>
 8008300:	9b04      	ldr	r3, [sp, #16]
 8008302:	eba0 000a 	sub.w	r0, r0, sl
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	4082      	lsls	r2, r0
 800830a:	4313      	orrs	r3, r2
 800830c:	3401      	adds	r4, #1
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	4825      	ldr	r0, [pc, #148]	; (80083ac <_svfiprintf_r+0x1ec>)
 8008316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831a:	2206      	movs	r2, #6
 800831c:	f7f7 ff58 	bl	80001d0 <memchr>
 8008320:	2800      	cmp	r0, #0
 8008322:	d038      	beq.n	8008396 <_svfiprintf_r+0x1d6>
 8008324:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <_svfiprintf_r+0x1f0>)
 8008326:	bb1b      	cbnz	r3, 8008370 <_svfiprintf_r+0x1b0>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	3307      	adds	r3, #7
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	3308      	adds	r3, #8
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	4433      	add	r3, r6
 8008338:	9309      	str	r3, [sp, #36]	; 0x24
 800833a:	e768      	b.n	800820e <_svfiprintf_r+0x4e>
 800833c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008340:	460c      	mov	r4, r1
 8008342:	2001      	movs	r0, #1
 8008344:	e7a6      	b.n	8008294 <_svfiprintf_r+0xd4>
 8008346:	2300      	movs	r3, #0
 8008348:	3401      	adds	r4, #1
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	4619      	mov	r1, r3
 800834e:	f04f 0c0a 	mov.w	ip, #10
 8008352:	4620      	mov	r0, r4
 8008354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008358:	3a30      	subs	r2, #48	; 0x30
 800835a:	2a09      	cmp	r2, #9
 800835c:	d903      	bls.n	8008366 <_svfiprintf_r+0x1a6>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0c6      	beq.n	80082f0 <_svfiprintf_r+0x130>
 8008362:	9105      	str	r1, [sp, #20]
 8008364:	e7c4      	b.n	80082f0 <_svfiprintf_r+0x130>
 8008366:	fb0c 2101 	mla	r1, ip, r1, r2
 800836a:	4604      	mov	r4, r0
 800836c:	2301      	movs	r3, #1
 800836e:	e7f0      	b.n	8008352 <_svfiprintf_r+0x192>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <_svfiprintf_r+0x1f4>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	4638      	mov	r0, r7
 800837c:	f3af 8000 	nop.w
 8008380:	1c42      	adds	r2, r0, #1
 8008382:	4606      	mov	r6, r0
 8008384:	d1d6      	bne.n	8008334 <_svfiprintf_r+0x174>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	065b      	lsls	r3, r3, #25
 800838a:	f53f af2d 	bmi.w	80081e8 <_svfiprintf_r+0x28>
 800838e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008390:	b01d      	add	sp, #116	; 0x74
 8008392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <_svfiprintf_r+0x1f4>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4638      	mov	r0, r7
 80083a2:	f000 f879 	bl	8008498 <_printf_i>
 80083a6:	e7eb      	b.n	8008380 <_svfiprintf_r+0x1c0>
 80083a8:	080090d4 	.word	0x080090d4
 80083ac:	080090de 	.word	0x080090de
 80083b0:	00000000 	.word	0x00000000
 80083b4:	0800810d 	.word	0x0800810d
 80083b8:	080090da 	.word	0x080090da

080083bc <_printf_common>:
 80083bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	4616      	mov	r6, r2
 80083c2:	4699      	mov	r9, r3
 80083c4:	688a      	ldr	r2, [r1, #8]
 80083c6:	690b      	ldr	r3, [r1, #16]
 80083c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	bfb8      	it	lt
 80083d0:	4613      	movlt	r3, r2
 80083d2:	6033      	str	r3, [r6, #0]
 80083d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083d8:	4607      	mov	r7, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	b10a      	cbz	r2, 80083e2 <_printf_common+0x26>
 80083de:	3301      	adds	r3, #1
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	0699      	lsls	r1, r3, #26
 80083e6:	bf42      	ittt	mi
 80083e8:	6833      	ldrmi	r3, [r6, #0]
 80083ea:	3302      	addmi	r3, #2
 80083ec:	6033      	strmi	r3, [r6, #0]
 80083ee:	6825      	ldr	r5, [r4, #0]
 80083f0:	f015 0506 	ands.w	r5, r5, #6
 80083f4:	d106      	bne.n	8008404 <_printf_common+0x48>
 80083f6:	f104 0a19 	add.w	sl, r4, #25
 80083fa:	68e3      	ldr	r3, [r4, #12]
 80083fc:	6832      	ldr	r2, [r6, #0]
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	42ab      	cmp	r3, r5
 8008402:	dc26      	bgt.n	8008452 <_printf_common+0x96>
 8008404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008408:	1e13      	subs	r3, r2, #0
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	bf18      	it	ne
 800840e:	2301      	movne	r3, #1
 8008410:	0692      	lsls	r2, r2, #26
 8008412:	d42b      	bmi.n	800846c <_printf_common+0xb0>
 8008414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008418:	4649      	mov	r1, r9
 800841a:	4638      	mov	r0, r7
 800841c:	47c0      	blx	r8
 800841e:	3001      	adds	r0, #1
 8008420:	d01e      	beq.n	8008460 <_printf_common+0xa4>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	6922      	ldr	r2, [r4, #16]
 8008426:	f003 0306 	and.w	r3, r3, #6
 800842a:	2b04      	cmp	r3, #4
 800842c:	bf02      	ittt	eq
 800842e:	68e5      	ldreq	r5, [r4, #12]
 8008430:	6833      	ldreq	r3, [r6, #0]
 8008432:	1aed      	subeq	r5, r5, r3
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	bf0c      	ite	eq
 8008438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800843c:	2500      	movne	r5, #0
 800843e:	4293      	cmp	r3, r2
 8008440:	bfc4      	itt	gt
 8008442:	1a9b      	subgt	r3, r3, r2
 8008444:	18ed      	addgt	r5, r5, r3
 8008446:	2600      	movs	r6, #0
 8008448:	341a      	adds	r4, #26
 800844a:	42b5      	cmp	r5, r6
 800844c:	d11a      	bne.n	8008484 <_printf_common+0xc8>
 800844e:	2000      	movs	r0, #0
 8008450:	e008      	b.n	8008464 <_printf_common+0xa8>
 8008452:	2301      	movs	r3, #1
 8008454:	4652      	mov	r2, sl
 8008456:	4649      	mov	r1, r9
 8008458:	4638      	mov	r0, r7
 800845a:	47c0      	blx	r8
 800845c:	3001      	adds	r0, #1
 800845e:	d103      	bne.n	8008468 <_printf_common+0xac>
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	3501      	adds	r5, #1
 800846a:	e7c6      	b.n	80083fa <_printf_common+0x3e>
 800846c:	18e1      	adds	r1, r4, r3
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	2030      	movs	r0, #48	; 0x30
 8008472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008476:	4422      	add	r2, r4
 8008478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800847c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008480:	3302      	adds	r3, #2
 8008482:	e7c7      	b.n	8008414 <_printf_common+0x58>
 8008484:	2301      	movs	r3, #1
 8008486:	4622      	mov	r2, r4
 8008488:	4649      	mov	r1, r9
 800848a:	4638      	mov	r0, r7
 800848c:	47c0      	blx	r8
 800848e:	3001      	adds	r0, #1
 8008490:	d0e6      	beq.n	8008460 <_printf_common+0xa4>
 8008492:	3601      	adds	r6, #1
 8008494:	e7d9      	b.n	800844a <_printf_common+0x8e>
	...

08008498 <_printf_i>:
 8008498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	7e0f      	ldrb	r7, [r1, #24]
 800849e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084a0:	2f78      	cmp	r7, #120	; 0x78
 80084a2:	4691      	mov	r9, r2
 80084a4:	4680      	mov	r8, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	469a      	mov	sl, r3
 80084aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ae:	d807      	bhi.n	80084c0 <_printf_i+0x28>
 80084b0:	2f62      	cmp	r7, #98	; 0x62
 80084b2:	d80a      	bhi.n	80084ca <_printf_i+0x32>
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	f000 80d4 	beq.w	8008662 <_printf_i+0x1ca>
 80084ba:	2f58      	cmp	r7, #88	; 0x58
 80084bc:	f000 80c0 	beq.w	8008640 <_printf_i+0x1a8>
 80084c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084c8:	e03a      	b.n	8008540 <_printf_i+0xa8>
 80084ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ce:	2b15      	cmp	r3, #21
 80084d0:	d8f6      	bhi.n	80084c0 <_printf_i+0x28>
 80084d2:	a101      	add	r1, pc, #4	; (adr r1, 80084d8 <_printf_i+0x40>)
 80084d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008545 	.word	0x08008545
 80084e0:	080084c1 	.word	0x080084c1
 80084e4:	080084c1 	.word	0x080084c1
 80084e8:	080084c1 	.word	0x080084c1
 80084ec:	080084c1 	.word	0x080084c1
 80084f0:	08008545 	.word	0x08008545
 80084f4:	080084c1 	.word	0x080084c1
 80084f8:	080084c1 	.word	0x080084c1
 80084fc:	080084c1 	.word	0x080084c1
 8008500:	080084c1 	.word	0x080084c1
 8008504:	08008649 	.word	0x08008649
 8008508:	08008571 	.word	0x08008571
 800850c:	08008603 	.word	0x08008603
 8008510:	080084c1 	.word	0x080084c1
 8008514:	080084c1 	.word	0x080084c1
 8008518:	0800866b 	.word	0x0800866b
 800851c:	080084c1 	.word	0x080084c1
 8008520:	08008571 	.word	0x08008571
 8008524:	080084c1 	.word	0x080084c1
 8008528:	080084c1 	.word	0x080084c1
 800852c:	0800860b 	.word	0x0800860b
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	602a      	str	r2, [r5, #0]
 8008538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800853c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008540:	2301      	movs	r3, #1
 8008542:	e09f      	b.n	8008684 <_printf_i+0x1ec>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	0607      	lsls	r7, r0, #24
 800854a:	f103 0104 	add.w	r1, r3, #4
 800854e:	6029      	str	r1, [r5, #0]
 8008550:	d501      	bpl.n	8008556 <_printf_i+0xbe>
 8008552:	681e      	ldr	r6, [r3, #0]
 8008554:	e003      	b.n	800855e <_printf_i+0xc6>
 8008556:	0646      	lsls	r6, r0, #25
 8008558:	d5fb      	bpl.n	8008552 <_printf_i+0xba>
 800855a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800855e:	2e00      	cmp	r6, #0
 8008560:	da03      	bge.n	800856a <_printf_i+0xd2>
 8008562:	232d      	movs	r3, #45	; 0x2d
 8008564:	4276      	negs	r6, r6
 8008566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800856a:	485a      	ldr	r0, [pc, #360]	; (80086d4 <_printf_i+0x23c>)
 800856c:	230a      	movs	r3, #10
 800856e:	e012      	b.n	8008596 <_printf_i+0xfe>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	1d19      	adds	r1, r3, #4
 8008576:	6029      	str	r1, [r5, #0]
 8008578:	0605      	lsls	r5, r0, #24
 800857a:	d501      	bpl.n	8008580 <_printf_i+0xe8>
 800857c:	681e      	ldr	r6, [r3, #0]
 800857e:	e002      	b.n	8008586 <_printf_i+0xee>
 8008580:	0641      	lsls	r1, r0, #25
 8008582:	d5fb      	bpl.n	800857c <_printf_i+0xe4>
 8008584:	881e      	ldrh	r6, [r3, #0]
 8008586:	4853      	ldr	r0, [pc, #332]	; (80086d4 <_printf_i+0x23c>)
 8008588:	2f6f      	cmp	r7, #111	; 0x6f
 800858a:	bf0c      	ite	eq
 800858c:	2308      	moveq	r3, #8
 800858e:	230a      	movne	r3, #10
 8008590:	2100      	movs	r1, #0
 8008592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008596:	6865      	ldr	r5, [r4, #4]
 8008598:	60a5      	str	r5, [r4, #8]
 800859a:	2d00      	cmp	r5, #0
 800859c:	bfa2      	ittt	ge
 800859e:	6821      	ldrge	r1, [r4, #0]
 80085a0:	f021 0104 	bicge.w	r1, r1, #4
 80085a4:	6021      	strge	r1, [r4, #0]
 80085a6:	b90e      	cbnz	r6, 80085ac <_printf_i+0x114>
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d04b      	beq.n	8008644 <_printf_i+0x1ac>
 80085ac:	4615      	mov	r5, r2
 80085ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80085b2:	fb03 6711 	mls	r7, r3, r1, r6
 80085b6:	5dc7      	ldrb	r7, [r0, r7]
 80085b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085bc:	4637      	mov	r7, r6
 80085be:	42bb      	cmp	r3, r7
 80085c0:	460e      	mov	r6, r1
 80085c2:	d9f4      	bls.n	80085ae <_printf_i+0x116>
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d10b      	bne.n	80085e0 <_printf_i+0x148>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	07de      	lsls	r6, r3, #31
 80085cc:	d508      	bpl.n	80085e0 <_printf_i+0x148>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	4299      	cmp	r1, r3
 80085d4:	bfde      	ittt	le
 80085d6:	2330      	movle	r3, #48	; 0x30
 80085d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085e0:	1b52      	subs	r2, r2, r5
 80085e2:	6122      	str	r2, [r4, #16]
 80085e4:	f8cd a000 	str.w	sl, [sp]
 80085e8:	464b      	mov	r3, r9
 80085ea:	aa03      	add	r2, sp, #12
 80085ec:	4621      	mov	r1, r4
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7ff fee4 	bl	80083bc <_printf_common>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d14a      	bne.n	800868e <_printf_i+0x1f6>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	b004      	add	sp, #16
 80085fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	f043 0320 	orr.w	r3, r3, #32
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	4833      	ldr	r0, [pc, #204]	; (80086d8 <_printf_i+0x240>)
 800860c:	2778      	movs	r7, #120	; 0x78
 800860e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	6829      	ldr	r1, [r5, #0]
 8008616:	061f      	lsls	r7, r3, #24
 8008618:	f851 6b04 	ldr.w	r6, [r1], #4
 800861c:	d402      	bmi.n	8008624 <_printf_i+0x18c>
 800861e:	065f      	lsls	r7, r3, #25
 8008620:	bf48      	it	mi
 8008622:	b2b6      	uxthmi	r6, r6
 8008624:	07df      	lsls	r7, r3, #31
 8008626:	bf48      	it	mi
 8008628:	f043 0320 	orrmi.w	r3, r3, #32
 800862c:	6029      	str	r1, [r5, #0]
 800862e:	bf48      	it	mi
 8008630:	6023      	strmi	r3, [r4, #0]
 8008632:	b91e      	cbnz	r6, 800863c <_printf_i+0x1a4>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	f023 0320 	bic.w	r3, r3, #32
 800863a:	6023      	str	r3, [r4, #0]
 800863c:	2310      	movs	r3, #16
 800863e:	e7a7      	b.n	8008590 <_printf_i+0xf8>
 8008640:	4824      	ldr	r0, [pc, #144]	; (80086d4 <_printf_i+0x23c>)
 8008642:	e7e4      	b.n	800860e <_printf_i+0x176>
 8008644:	4615      	mov	r5, r2
 8008646:	e7bd      	b.n	80085c4 <_printf_i+0x12c>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	6826      	ldr	r6, [r4, #0]
 800864c:	6961      	ldr	r1, [r4, #20]
 800864e:	1d18      	adds	r0, r3, #4
 8008650:	6028      	str	r0, [r5, #0]
 8008652:	0635      	lsls	r5, r6, #24
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	d501      	bpl.n	800865c <_printf_i+0x1c4>
 8008658:	6019      	str	r1, [r3, #0]
 800865a:	e002      	b.n	8008662 <_printf_i+0x1ca>
 800865c:	0670      	lsls	r0, r6, #25
 800865e:	d5fb      	bpl.n	8008658 <_printf_i+0x1c0>
 8008660:	8019      	strh	r1, [r3, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	6123      	str	r3, [r4, #16]
 8008666:	4615      	mov	r5, r2
 8008668:	e7bc      	b.n	80085e4 <_printf_i+0x14c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	602a      	str	r2, [r5, #0]
 8008670:	681d      	ldr	r5, [r3, #0]
 8008672:	6862      	ldr	r2, [r4, #4]
 8008674:	2100      	movs	r1, #0
 8008676:	4628      	mov	r0, r5
 8008678:	f7f7 fdaa 	bl	80001d0 <memchr>
 800867c:	b108      	cbz	r0, 8008682 <_printf_i+0x1ea>
 800867e:	1b40      	subs	r0, r0, r5
 8008680:	6060      	str	r0, [r4, #4]
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	2300      	movs	r3, #0
 8008688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800868c:	e7aa      	b.n	80085e4 <_printf_i+0x14c>
 800868e:	6923      	ldr	r3, [r4, #16]
 8008690:	462a      	mov	r2, r5
 8008692:	4649      	mov	r1, r9
 8008694:	4640      	mov	r0, r8
 8008696:	47d0      	blx	sl
 8008698:	3001      	adds	r0, #1
 800869a:	d0ad      	beq.n	80085f8 <_printf_i+0x160>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	079b      	lsls	r3, r3, #30
 80086a0:	d413      	bmi.n	80086ca <_printf_i+0x232>
 80086a2:	68e0      	ldr	r0, [r4, #12]
 80086a4:	9b03      	ldr	r3, [sp, #12]
 80086a6:	4298      	cmp	r0, r3
 80086a8:	bfb8      	it	lt
 80086aa:	4618      	movlt	r0, r3
 80086ac:	e7a6      	b.n	80085fc <_printf_i+0x164>
 80086ae:	2301      	movs	r3, #1
 80086b0:	4632      	mov	r2, r6
 80086b2:	4649      	mov	r1, r9
 80086b4:	4640      	mov	r0, r8
 80086b6:	47d0      	blx	sl
 80086b8:	3001      	adds	r0, #1
 80086ba:	d09d      	beq.n	80085f8 <_printf_i+0x160>
 80086bc:	3501      	adds	r5, #1
 80086be:	68e3      	ldr	r3, [r4, #12]
 80086c0:	9903      	ldr	r1, [sp, #12]
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	42ab      	cmp	r3, r5
 80086c6:	dcf2      	bgt.n	80086ae <_printf_i+0x216>
 80086c8:	e7eb      	b.n	80086a2 <_printf_i+0x20a>
 80086ca:	2500      	movs	r5, #0
 80086cc:	f104 0619 	add.w	r6, r4, #25
 80086d0:	e7f5      	b.n	80086be <_printf_i+0x226>
 80086d2:	bf00      	nop
 80086d4:	080090e5 	.word	0x080090e5
 80086d8:	080090f6 	.word	0x080090f6

080086dc <memmove>:
 80086dc:	4288      	cmp	r0, r1
 80086de:	b510      	push	{r4, lr}
 80086e0:	eb01 0402 	add.w	r4, r1, r2
 80086e4:	d902      	bls.n	80086ec <memmove+0x10>
 80086e6:	4284      	cmp	r4, r0
 80086e8:	4623      	mov	r3, r4
 80086ea:	d807      	bhi.n	80086fc <memmove+0x20>
 80086ec:	1e43      	subs	r3, r0, #1
 80086ee:	42a1      	cmp	r1, r4
 80086f0:	d008      	beq.n	8008704 <memmove+0x28>
 80086f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086fa:	e7f8      	b.n	80086ee <memmove+0x12>
 80086fc:	4402      	add	r2, r0
 80086fe:	4601      	mov	r1, r0
 8008700:	428a      	cmp	r2, r1
 8008702:	d100      	bne.n	8008706 <memmove+0x2a>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800870a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800870e:	e7f7      	b.n	8008700 <memmove+0x24>

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	; (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f8 fc40 	bl	8000fa0 <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	2000352c 	.word	0x2000352c

08008730 <_realloc_r>:
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	4680      	mov	r8, r0
 8008736:	4614      	mov	r4, r2
 8008738:	460e      	mov	r6, r1
 800873a:	b921      	cbnz	r1, 8008746 <_realloc_r+0x16>
 800873c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008740:	4611      	mov	r1, r2
 8008742:	f7ff bc57 	b.w	8007ff4 <_malloc_r>
 8008746:	b92a      	cbnz	r2, 8008754 <_realloc_r+0x24>
 8008748:	f7ff fbe8 	bl	8007f1c <_free_r>
 800874c:	4625      	mov	r5, r4
 800874e:	4628      	mov	r0, r5
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	f000 f81b 	bl	800878e <_malloc_usable_size_r>
 8008758:	4284      	cmp	r4, r0
 800875a:	4607      	mov	r7, r0
 800875c:	d802      	bhi.n	8008764 <_realloc_r+0x34>
 800875e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008762:	d812      	bhi.n	800878a <_realloc_r+0x5a>
 8008764:	4621      	mov	r1, r4
 8008766:	4640      	mov	r0, r8
 8008768:	f7ff fc44 	bl	8007ff4 <_malloc_r>
 800876c:	4605      	mov	r5, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d0ed      	beq.n	800874e <_realloc_r+0x1e>
 8008772:	42bc      	cmp	r4, r7
 8008774:	4622      	mov	r2, r4
 8008776:	4631      	mov	r1, r6
 8008778:	bf28      	it	cs
 800877a:	463a      	movcs	r2, r7
 800877c:	f7ff fbc0 	bl	8007f00 <memcpy>
 8008780:	4631      	mov	r1, r6
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff fbca 	bl	8007f1c <_free_r>
 8008788:	e7e1      	b.n	800874e <_realloc_r+0x1e>
 800878a:	4635      	mov	r5, r6
 800878c:	e7df      	b.n	800874e <_realloc_r+0x1e>

0800878e <_malloc_usable_size_r>:
 800878e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008792:	1f18      	subs	r0, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfbc      	itt	lt
 8008798:	580b      	ldrlt	r3, [r1, r0]
 800879a:	18c0      	addlt	r0, r0, r3
 800879c:	4770      	bx	lr
	...

080087a0 <_init>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr

080087ac <_fini>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	bf00      	nop
 80087b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b2:	bc08      	pop	{r3}
 80087b4:	469e      	mov	lr, r3
 80087b6:	4770      	bx	lr
