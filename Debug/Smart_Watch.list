
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f8  080092f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009300  08009300  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034fc  20000080  08009388  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000357c  08009388  0002357c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021b43  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042b6  00000000  00000000  00041c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  00045ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000164c  00000000  00000000  00047b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000047b4  00000000  00000000  000491dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000219bd  00000000  00000000  0004d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106cd3  00000000  00000000  0006f34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f4c  00000000  00000000  00176020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017df6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008960 	.word	0x08008960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008960 	.word	0x08008960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fff8 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f868 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f9ca 	bl	8000910 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f998 	bl	80008b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000580:	f000 f8f6 	bl	8000770 <MX_RTC_Init>
  MX_I2C1_Init();
 8000584:	f000 f8b4 	bl	80006f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000588:	f000 fdea 	bl	8001160 <ssd1306_Init>
  ssd1306_Fill(Black);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fe51 	bl	8001234 <ssd1306_Fill>
  ssd1306_SetCursor(0,0);
 8000592:	2100      	movs	r1, #0
 8000594:	2000      	movs	r0, #0
 8000596:	f000 ff9b 	bl	80014d0 <ssd1306_SetCursor>
  ssd1306_WriteString("BOOTING", Font_7x10 ,White);
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <main+0x98>)
 800059c:	2301      	movs	r3, #1
 800059e:	ca06      	ldmia	r2, {r1, r2}
 80005a0:	4819      	ldr	r0, [pc, #100]	; (8000608 <main+0x9c>)
 80005a2:	f000 ff6f 	bl	8001484 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80005a6:	f000 fe69 	bl	800127c <ssd1306_UpdateScreen>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f005 f8bd 	bl	8005728 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 80005ae:	4a17      	ldr	r2, [pc, #92]	; (800060c <main+0xa0>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <main+0xa4>)
 80005b4:	f005 f902 	bl	80057bc <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <main+0xa8>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <main+0xac>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <main+0xb0>)
 80005c4:	f005 f8fa 	bl	80057bc <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <main+0xb4>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <main+0xb8>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <main+0xbc>)
 80005d4:	f005 f8f2 	bl	80057bc <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <main+0xc0>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <main+0xc4>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <main+0xc8>)
 80005e4:	f005 f8ea 	bl	80057bc <osThreadNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <main+0xcc>)
 80005ec:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <main+0xd0>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0xd4>)
 80005f4:	f005 f8e2 	bl	80057bc <osThreadNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <main+0xd8>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fe:	f005 f8b7 	bl	8005770 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0x96>
 8000604:	2000001c 	.word	0x2000001c
 8000608:	080089c8 	.word	0x080089c8
 800060c:	08008a5c 	.word	0x08008a5c
 8000610:	080009dd 	.word	0x080009dd
 8000614:	200001b4 	.word	0x200001b4
 8000618:	08008a80 	.word	0x08008a80
 800061c:	080009ed 	.word	0x080009ed
 8000620:	200001b8 	.word	0x200001b8
 8000624:	08008aa4 	.word	0x08008aa4
 8000628:	08000afd 	.word	0x08000afd
 800062c:	200001bc 	.word	0x200001bc
 8000630:	08008ac8 	.word	0x08008ac8
 8000634:	08000b11 	.word	0x08000b11
 8000638:	200001c0 	.word	0x200001c0
 800063c:	08008aec 	.word	0x08008aec
 8000640:	08000b25 	.word	0x08000b25
 8000644:	200001c4 	.word	0x200001c4

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b096      	sub	sp, #88	; 0x58
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2244      	movs	r2, #68	; 0x44
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fca8 	bl	8007fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066e:	f001 ff33 	bl	80024d8 <HAL_PWREx_ControlVoltageScaling>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000678:	f000 fad6 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800067c:	230a      	movs	r3, #10
 800067e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000686:	2310      	movs	r3, #16
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800069a:	230a      	movs	r3, #10
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 ff68 	bl	8002584 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006ba:	f000 fab5 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	2104      	movs	r1, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fb30 	bl	8002d3c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 faa1 	bl	8000c28 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3758      	adds	r7, #88	; 0x58
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_I2C1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_I2C1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_I2C1_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_I2C1_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_I2C1_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_I2C1_Init+0x74>)
 800072c:	f001 fa1a 	bl	8001b64 <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000736:	f000 fa77 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_I2C1_Init+0x74>)
 800073e:	f001 fe25 	bl	800238c <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 fa6e 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2C1_Init+0x74>)
 8000750:	f001 fe67 	bl	8002422 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 fa65 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b4 	.word	0x200000b4
 8000768:	40005400 	.word	0x40005400
 800076c:	10909cec 	.word	0x10909cec

08000770 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b092      	sub	sp, #72	; 0x48
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	222c      	movs	r2, #44	; 0x2c
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fc0b 	bl	8007fac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_RTC_Init+0x138>)
 8000798:	4a44      	ldr	r2, [pc, #272]	; (80008ac <MX_RTC_Init+0x13c>)
 800079a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800079c:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_RTC_Init+0x138>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_RTC_Init+0x138>)
 80007a4:	227f      	movs	r2, #127	; 0x7f
 80007a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007a8:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_RTC_Init+0x138>)
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_RTC_Init+0x138>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 80007b4:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_RTC_Init+0x138>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_RTC_Init+0x138>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_RTC_Init+0x138>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c6:	4838      	ldr	r0, [pc, #224]	; (80008a8 <MX_RTC_Init+0x138>)
 80007c8:	f003 f9ca 	bl	8003b60 <HAL_RTC_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80007d2:	f000 fa29 	bl	8000c28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 80007d6:	2303      	movs	r3, #3
 80007d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <MX_RTC_Init+0x138>)
 80007fa:	f003 fa39 	bl	8003c70 <HAL_RTC_SetTime>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000804:	f000 fa10 	bl	8000c28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000808:	2303      	movs	r3, #3
 800080a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 800080e:	2312      	movs	r3, #18
 8000810:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 8000814:	2311      	movs	r3, #17
 8000816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000824:	2201      	movs	r2, #1
 8000826:	4619      	mov	r1, r3
 8000828:	481f      	ldr	r0, [pc, #124]	; (80008a8 <MX_RTC_Init+0x138>)
 800082a:	f003 fb1a 	bl	8003e62 <HAL_RTC_SetDate>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000834:	f000 f9f8 	bl	8000c28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8000838:	2303      	movs	r3, #3
 800083a:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x3;
 800083c:	2303      	movs	r3, #3
 800083e:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000840:	2300      	movs	r3, #0
 8000842:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2201      	movs	r2, #1
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MX_RTC_Init+0x138>)
 8000870:	f003 fbcc 	bl	800400c <HAL_RTC_SetAlarm_IT>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800087a:	f000 f9d5 	bl	8000c28 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_RTC_Init+0x138>)
 8000882:	f003 fe1f 	bl	80044c4 <HAL_RTCEx_SetCalibrationOutPut>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 800088c:	f000 f9cc 	bl	8000c28 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_RTC_Init+0x138>)
 8000892:	f003 fe5e 	bl	8004552 <HAL_RTCEx_SetRefClock>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 800089c:	f000 f9c4 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3748      	adds	r7, #72	; 0x48
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000108 	.word	0x20000108
 80008ac:	40002800 	.word	0x40002800

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART2_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART2_UART_Init+0x58>)
 80008f4:	f004 f92e 	bl	8004b54 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f993 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000012c 	.word	0x2000012c
 800090c:	40004400 	.word	0x40004400

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xc4>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 f8d1 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xc8>)
 80009aa:	f000 ff19 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 ff0a 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000800 	.word	0x48000800

080009dc <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f004 ff7b 	bl	80058e0 <osDelay>
 80009ea:	e7fb      	b.n	80009e4 <start_default_task+0x8>

080009ec <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b098      	sub	sp, #96	; 0x60
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {

	  ssd1306_Fill(Black);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fc1d 	bl	8001234 <ssd1306_Fill>
	  ssd1306_SetCursor(0,0);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 fd67 	bl	80014d0 <ssd1306_SetCursor>

	  char temp [4][19];
	  //"     hh-mm PM     ";
	  char *ampm = ((userData.am) ? "AM" : "PM");
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <start_wright_to_display_task+0x22>
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <start_wright_to_display_task+0xf4>)
 8000a0c:	e000      	b.n	8000a10 <start_wright_to_display_task+0x24>
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <start_wright_to_display_task+0xf8>)
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
	  snprintf(temp[0], 19, "     %02i-%02i %.2s     " ,userData.hour ,userData.min ,ampm);
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f107 0008 	add.w	r0, r7, #8
 8000a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <start_wright_to_display_task+0xfc>)
 8000a28:	2113      	movs	r1, #19
 8000a2a:	f007 fa6b 	bl	8007f04 <sniprintf>
	  ssd1306_WriteString(temp[0], Font_7x10 ,White);
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a30:	f107 0008 	add.w	r0, r7, #8
 8000a34:	2301      	movs	r3, #1
 8000a36:	ca06      	ldmia	r2, {r1, r2}
 8000a38:	f000 fd24 	bl	8001484 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,20);
 8000a3c:	2114      	movs	r1, #20
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fd46 	bl	80014d0 <ssd1306_SetCursor>
	  snprintf(temp[1], 19, "BPM: %i", userData.bpm);
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	f103 0013 	add.w	r0, r3, #19
 8000a50:	4613      	mov	r3, r2
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <start_wright_to_display_task+0x104>)
 8000a54:	2113      	movs	r1, #19
 8000a56:	f007 fa55 	bl	8007f04 <sniprintf>
	  ssd1306_WriteString(temp[1], Font_7x10, White);
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	f103 0013 	add.w	r0, r3, #19
 8000a64:	2301      	movs	r3, #1
 8000a66:	ca06      	ldmia	r2, {r1, r2}
 8000a68:	f000 fd0c 	bl	8001484 <ssd1306_WriteString>

	  ssd1306_SetCursor(0,30);
 8000a6c:	211e      	movs	r1, #30
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 fd2e 	bl	80014d0 <ssd1306_SetCursor>
	  snprintf(temp[2], 19, "BO2: %i%%", userData.bo2);
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8000a80:	4613      	mov	r3, r2
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <start_wright_to_display_task+0x108>)
 8000a84:	2113      	movs	r1, #19
 8000a86:	f007 fa3d 	bl	8007f04 <sniprintf>
	  ssd1306_WriteString(temp[2], Font_7x10, White);
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <start_wright_to_display_task+0x100>)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8000a94:	2301      	movs	r3, #1
 8000a96:	ca06      	ldmia	r2, {r1, r2}
 8000a98:	f000 fcf4 	bl	8001484 <ssd1306_WriteString>


	  ssd1306_SetCursor(0,40);
 8000a9c:	2128      	movs	r1, #40	; 0x28
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fd16 	bl	80014d0 <ssd1306_SetCursor>
	  snprintf(temp[3], 19, "Steps: %i", userData.steps);
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <start_wright_to_display_task+0xf0>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <start_wright_to_display_task+0x10c>)
 8000ab4:	2113      	movs	r1, #19
 8000ab6:	f007 fa25 	bl	8007f04 <sniprintf>
	  ssd1306_WriteString(temp[3], Font_7x10, White);
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <start_wright_to_display_task+0x100>)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	ca06      	ldmia	r2, {r1, r2}
 8000ac8:	f000 fcdc 	bl	8001484 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000acc:	f000 fbd6 	bl	800127c <ssd1306_UpdateScreen>

	  osDelay(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f004 ff04 	bl	80058e0 <osDelay>
  {
 8000ad8:	e78c      	b.n	80009f4 <start_wright_to_display_task+0x8>
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	080089d0 	.word	0x080089d0
 8000ae4:	080089d4 	.word	0x080089d4
 8000ae8:	080089d8 	.word	0x080089d8
 8000aec:	2000001c 	.word	0x2000001c
 8000af0:	080089f4 	.word	0x080089f4
 8000af4:	080089fc 	.word	0x080089fc
 8000af8:	08008a08 	.word	0x08008a08

08000afc <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_heart_rate_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 8000b04:	4801      	ldr	r0, [pc, #4]	; (8000b0c <start_read_heart_rate_task+0x10>)
 8000b06:	f004 feeb 	bl	80058e0 <osDelay>
 8000b0a:	e7fb      	b.n	8000b04 <start_read_heart_rate_task+0x8>
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(10000);
 8000b18:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b1c:	f004 fee0 	bl	80058e0 <osDelay>
 8000b20:	e7fa      	b.n	8000b18 <start_read_acceloromater_task+0x8>
	...

08000b24 <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af02      	add	r7, sp, #8
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	492c      	ldr	r1, [pc, #176]	; (8000be0 <start_date_and_time_task+0xbc>)
 8000b30:	482c      	ldr	r0, [pc, #176]	; (8000be4 <start_date_and_time_task+0xc0>)
 8000b32:	f003 fa1d 	bl	8003f70 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b36:	2200      	movs	r2, #0
 8000b38:	492b      	ldr	r1, [pc, #172]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b3a:	482a      	ldr	r0, [pc, #168]	; (8000be4 <start_date_and_time_task+0xc0>)
 8000b3c:	f003 f935 	bl	8003daa <HAL_RTC_GetTime>
	  if(sTime.Hours < 12){
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b0b      	cmp	r3, #11
 8000b46:	d810      	bhi.n	8000b6a <start_date_and_time_task+0x46>
		  userData.am = 0;
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	721a      	strb	r2, [r3, #8]
		  if(sTime.Hours == 0){
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <start_date_and_time_task+0x3a>
			  userData.hour = 12;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b58:	220c      	movs	r2, #12
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e00d      	b.n	8000b7a <start_date_and_time_task+0x56>
		  } else {
			  userData.hour = sTime.Hours;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <start_date_and_time_task+0x56>
		  }

	  } else {
		  userData.am = 1;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	721a      	strb	r2, [r3, #8]
		  userData.hour = sTime.Hours - 12;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b0c      	subs	r3, #12
 8000b76:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b78:	6013      	str	r3, [r2, #0]
	  }

	  userData.min = sTime.Minutes;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <start_date_and_time_task+0xc8>)
 8000b82:	605a      	str	r2, [r3, #4]
	  sprintf(date, "Date: %02d.%02d.%02d.\t", sDate.Date, sDate.Month, sDate.Year);
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <start_date_and_time_task+0xbc>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <start_date_and_time_task+0xbc>)
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <start_date_and_time_task+0xbc>)
 8000b92:	78db      	ldrb	r3, [r3, #3]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	460b      	mov	r3, r1
 8000b98:	4915      	ldr	r1, [pc, #84]	; (8000bf0 <start_date_and_time_task+0xcc>)
 8000b9a:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <start_date_and_time_task+0xd0>)
 8000b9c:	f007 f9e6 	bl	8007f6c <siprintf>
	  sprintf(time, "Date: %02d.%02d.%02d.\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <start_date_and_time_task+0xc4>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <start_date_and_time_task+0xd4>)
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <start_date_and_time_task+0xd8>)
 8000bb8:	f007 f9d8 	bl	8007f6c <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)date, sizeof(date), 300);
 8000bbc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000bc0:	221e      	movs	r2, #30
 8000bc2:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <start_date_and_time_task+0xd0>)
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <start_date_and_time_task+0xdc>)
 8000bc6:	f004 f813 	bl	8004bf0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)time, sizeof(time), 300);
 8000bca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000bce:	221e      	movs	r2, #30
 8000bd0:	490a      	ldr	r1, [pc, #40]	; (8000bfc <start_date_and_time_task+0xd8>)
 8000bd2:	480b      	ldr	r0, [pc, #44]	; (8000c00 <start_date_and_time_task+0xdc>)
 8000bd4:	f004 f80c 	bl	8004bf0 <HAL_UART_Transmit>
    osDelay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f004 fe81 	bl	80058e0 <osDelay>
  {
 8000bde:	e7a5      	b.n	8000b2c <start_date_and_time_task+0x8>
 8000be0:	200000b0 	.word	0x200000b0
 8000be4:	20000108 	.word	0x20000108
 8000be8:	2000009c 	.word	0x2000009c
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	08008a14 	.word	0x08008a14
 8000bf4:	200001e8 	.word	0x200001e8
 8000bf8:	08008a2c 	.word	0x08008a2c
 8000bfc:	200001c8 	.word	0x200001c8
 8000c00:	2000012c 	.word	0x2000012c

08000c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c16:	f000 fcbd 	bl	8001594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40001000 	.word	0x40001000

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6613      	str	r3, [r2, #96]	; 0x60
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	f06f 0001 	mvn.w	r0, #1
 8000c72:	f000 fd8b 	bl	800178c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ac      	sub	sp, #176	; 0xb0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2288      	movs	r2, #136	; 0x88
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f007 f981 	bl	8007fac <memset>
  if(hi2c->Instance==I2C1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <HAL_I2C_MspInit+0xb0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d13b      	bne.n	8000d2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fa91 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ccc:	f7ff ffac 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d02:	2304      	movs	r3, #4
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <HAL_I2C_MspInit+0xb8>)
 8000d10:	f000 fd66 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	37b0      	adds	r7, #176	; 0xb0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0aa      	sub	sp, #168	; 0xa8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2288      	movs	r2, #136	; 0x88
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 f923 	bl	8007fac <memset>
  if(hrtc->Instance==RTC)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <HAL_RTC_MspInit+0xc0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d142      	bne.n	8000df6 <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fa30 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000d8e:	f7ff ff4b 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_RTC_MspInit+0xc4>)
 8000d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <HAL_RTC_MspInit+0xc4>)
 8000d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_RTC_MspInit+0xc4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_RTC_MspInit+0xc4>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_RTC_MspInit+0xc4>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000dba:	f248 0304 	movw	r3, #32772	; 0x8004
 8000dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dde:	4619      	mov	r1, r3
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_RTC_MspInit+0xc8>)
 8000de2:	f000 fcfd 	bl	80017e0 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2029      	movs	r0, #41	; 0x29
 8000dec:	f000 fcce 	bl	800178c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000df0:	2029      	movs	r0, #41	; 0x29
 8000df2:	f000 fce7 	bl	80017c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	37a8      	adds	r7, #168	; 0xa8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40002800 	.word	0x40002800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ac      	sub	sp, #176	; 0xb0
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2288      	movs	r2, #136	; 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f8bd 	bl	8007fac <memset>
  if(huart->Instance==USART2)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_UART_MspInit+0xb0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13b      	bne.n	8000eb4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f9cd 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fee8 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f000 fc96 	bl	80017e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37b0      	adds	r7, #176	; 0xb0
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eea:	f107 0210 	add.w	r2, r7, #16
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 f8e5 	bl	80030c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f04:	f002 f8b2 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8000f08:	6378      	str	r0, [r7, #52]	; 0x34
 8000f0a:	e004      	b.n	8000f16 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f0c:	f002 f8ae 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8000f10:	4603      	mov	r3, r0
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	3b01      	subs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_InitTick+0xe8>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_InitTick+0xe8>)
 8000f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f32:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <HAL_InitTick+0xe8>)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_InitTick+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_InitTick+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_InitTick+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <HAL_InitTick+0xe8>)
 8000f4c:	f003 fb4f 	bl	80045ee <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11b      	bne.n	8000f96 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <HAL_InitTick+0xe8>)
 8000f60:	f003 fba6 	bl	80046b0 <HAL_TIM_Base_Start_IT>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d111      	bne.n	8000f96 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f72:	2036      	movs	r0, #54	; 0x36
 8000f74:	f000 fc26 	bl	80017c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d808      	bhi.n	8000f90 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	2036      	movs	r0, #54	; 0x36
 8000f84:	f000 fc02 	bl	800178c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e002      	b.n	8000f96 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3738      	adds	r7, #56	; 0x38
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	20000208 	.word	0x20000208
 8000fb0:	40001000 	.word	0x40001000
 8000fb4:	20000024 	.word	0x20000024

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <RTC_Alarm_IRQHandler+0x10>)
 8000fea:	f003 f94b 	bl	8004284 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000108 	.word	0x20000108

08000ff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM6_DAC_IRQHandler+0x10>)
 8000ffe:	f003 fbc7 	bl	8004790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000208 	.word	0x20000208

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f007 f814 	bl	8008068 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20018000 	.word	0x20018000
 800106c:	00000400 	.word	0x00000400
 8001070:	20000254 	.word	0x20000254
 8001074:	20003580 	.word	0x20003580

08001078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f006 ffd3 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ce:	f7ff fa4d 	bl	800056c <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010e0:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 80010e4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010e8:	2000357c 	.word	0x2000357c

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>

080010ee <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af04      	add	r7, sp, #16
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2200      	movs	r2, #0
 8001118:	2178      	movs	r1, #120	; 0x78
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <ssd1306_WriteCommand+0x2c>)
 800111c:	f000 fdbe 	bl	8001c9c <HAL_I2C_Mem_Write>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000b4 	.word	0x200000b4

0800112c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af04      	add	r7, sp, #16
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	9202      	str	r2, [sp, #8]
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2301      	movs	r3, #1
 8001148:	2240      	movs	r2, #64	; 0x40
 800114a:	2178      	movs	r1, #120	; 0x78
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <ssd1306_WriteData+0x30>)
 800114e:	f000 fda5 	bl	8001c9c <HAL_I2C_Mem_Write>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000b4 	.word	0x200000b4

08001160 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001164:	f7ff ffc3 	bl	80010ee <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f000 fa33 	bl	80015d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f9da 	bl	8001528 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001174:	2020      	movs	r0, #32
 8001176:	f7ff ffc1 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff ffbe 	bl	80010fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001180:	20b0      	movs	r0, #176	; 0xb0
 8001182:	f7ff ffbb 	bl	80010fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001186:	20c8      	movs	r0, #200	; 0xc8
 8001188:	f7ff ffb8 	bl	80010fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ffb5 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001192:	2010      	movs	r0, #16
 8001194:	f7ff ffb2 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001198:	2040      	movs	r0, #64	; 0x40
 800119a:	f7ff ffaf 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800119e:	20ff      	movs	r0, #255	; 0xff
 80011a0:	f000 f9ae 	bl	8001500 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80011a4:	20a1      	movs	r0, #161	; 0xa1
 80011a6:	f7ff ffa9 	bl	80010fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80011aa:	20a6      	movs	r0, #166	; 0xa6
 80011ac:	f7ff ffa6 	bl	80010fc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80011b0:	20a8      	movs	r0, #168	; 0xa8
 80011b2:	f7ff ffa3 	bl	80010fc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80011b6:	203f      	movs	r0, #63	; 0x3f
 80011b8:	f7ff ffa0 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011bc:	20a4      	movs	r0, #164	; 0xa4
 80011be:	f7ff ff9d 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011c2:	20d3      	movs	r0, #211	; 0xd3
 80011c4:	f7ff ff9a 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ff97 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011ce:	20d5      	movs	r0, #213	; 0xd5
 80011d0:	f7ff ff94 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011d4:	20f0      	movs	r0, #240	; 0xf0
 80011d6:	f7ff ff91 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011da:	20d9      	movs	r0, #217	; 0xd9
 80011dc:	f7ff ff8e 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011e0:	2022      	movs	r0, #34	; 0x22
 80011e2:	f7ff ff8b 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011e6:	20da      	movs	r0, #218	; 0xda
 80011e8:	f7ff ff88 	bl	80010fc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80011ec:	2012      	movs	r0, #18
 80011ee:	f7ff ff85 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011f2:	20db      	movs	r0, #219	; 0xdb
 80011f4:	f7ff ff82 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011f8:	2020      	movs	r0, #32
 80011fa:	f7ff ff7f 	bl	80010fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011fe:	208d      	movs	r0, #141	; 0x8d
 8001200:	f7ff ff7c 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001204:	2014      	movs	r0, #20
 8001206:	f7ff ff79 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800120a:	2001      	movs	r0, #1
 800120c:	f000 f98c 	bl	8001528 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001210:	2000      	movs	r0, #0
 8001212:	f000 f80f 	bl	8001234 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001216:	f000 f831 	bl	800127c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <ssd1306_Init+0xd0>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <ssd1306_Init+0xd0>)
 8001222:	2200      	movs	r2, #0
 8001224:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001226:	4b02      	ldr	r3, [pc, #8]	; (8001230 <ssd1306_Init+0xd0>)
 8001228:	2201      	movs	r2, #1
 800122a:	711a      	strb	r2, [r3, #4]
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000658 	.word	0x20000658

08001234 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e00d      	b.n	8001260 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <ssd1306_Fill+0x1a>
 800124a:	2100      	movs	r1, #0
 800124c:	e000      	b.n	8001250 <ssd1306_Fill+0x1c>
 800124e:	21ff      	movs	r1, #255	; 0xff
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <ssd1306_Fill+0x44>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	460a      	mov	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d3ed      	bcc.n	8001244 <ssd1306_Fill+0x10>
    }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000258 	.word	0x20000258

0800127c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e016      	b.n	80012b6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	3b50      	subs	r3, #80	; 0x50
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff34 	bl	80010fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff31 	bl	80010fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800129a:	2010      	movs	r0, #16
 800129c:	f7ff ff2e 	bl	80010fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <ssd1306_UpdateScreen+0x4c>)
 80012a6:	4413      	add	r3, r2
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff3e 	bl	800112c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	3301      	adds	r3, #1
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	d9e5      	bls.n	8001288 <ssd1306_UpdateScreen+0xc>
    }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000258 	.word	0x20000258

080012cc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	460b      	mov	r3, r1
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	4613      	mov	r3, r2
 80012dc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db3d      	blt.n	8001362 <ssd1306_DrawPixel+0x96>
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	2b3f      	cmp	r3, #63	; 0x3f
 80012ea:	d83a      	bhi.n	8001362 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d11a      	bne.n	8001328 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	08db      	lsrs	r3, r3, #3
 80012f8:	b2d8      	uxtb	r0, r3
 80012fa:	4603      	mov	r3, r0
 80012fc:	01db      	lsls	r3, r3, #7
 80012fe:	4413      	add	r3, r2
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <ssd1306_DrawPixel+0xa4>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	b25a      	sxtb	r2, r3
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b259      	sxtb	r1, r3
 8001318:	79fa      	ldrb	r2, [r7, #7]
 800131a:	4603      	mov	r3, r0
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	4413      	add	r3, r2
 8001320:	b2c9      	uxtb	r1, r1
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <ssd1306_DrawPixel+0xa4>)
 8001324:	54d1      	strb	r1, [r2, r3]
 8001326:	e01d      	b.n	8001364 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	b2d8      	uxtb	r0, r3
 8001330:	4603      	mov	r3, r0
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4413      	add	r3, r2
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <ssd1306_DrawPixel+0xa4>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	b25a      	sxtb	r2, r3
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	b25b      	sxtb	r3, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4013      	ands	r3, r2
 8001350:	b259      	sxtb	r1, r3
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	4603      	mov	r3, r0
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	4413      	add	r3, r2
 800135a:	b2c9      	uxtb	r1, r1
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <ssd1306_DrawPixel+0xa4>)
 800135e:	54d1      	strb	r1, [r2, r3]
 8001360:	e000      	b.n	8001364 <ssd1306_DrawPixel+0x98>
        return;
 8001362:	bf00      	nop
    }
}
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000258 	.word	0x20000258

08001374 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	4604      	mov	r4, r0
 800137c:	1d38      	adds	r0, r7, #4
 800137e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001382:	461a      	mov	r2, r3
 8001384:	4623      	mov	r3, r4
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	4613      	mov	r3, r2
 800138a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b1f      	cmp	r3, #31
 8001390:	d902      	bls.n	8001398 <ssd1306_WriteChar+0x24>
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b7e      	cmp	r3, #126	; 0x7e
 8001396:	d901      	bls.n	800139c <ssd1306_WriteChar+0x28>
        return 0;
 8001398:	2300      	movs	r3, #0
 800139a:	e06d      	b.n	8001478 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <ssd1306_WriteChar+0x10c>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	793b      	ldrb	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	2b80      	cmp	r3, #128	; 0x80
 80013a8:	dc06      	bgt.n	80013b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80013aa:	4b35      	ldr	r3, [pc, #212]	; (8001480 <ssd1306_WriteChar+0x10c>)
 80013ac:	885b      	ldrh	r3, [r3, #2]
 80013ae:	461a      	mov	r2, r3
 80013b0:	797b      	ldrb	r3, [r7, #5]
 80013b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013b4:	2b40      	cmp	r3, #64	; 0x40
 80013b6:	dd01      	ble.n	80013bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e05d      	b.n	8001478 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e04c      	b.n	800145c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3b20      	subs	r3, #32
 80013c8:	7979      	ldrb	r1, [r7, #5]
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	440b      	add	r3, r1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	e034      	b.n	800144c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d012      	beq.n	8001418 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <ssd1306_WriteChar+0x10c>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4413      	add	r3, r2
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <ssd1306_WriteChar+0x10c>)
 8001402:	885b      	ldrh	r3, [r3, #2]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4413      	add	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	7bba      	ldrb	r2, [r7, #14]
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff ff5b 	bl	80012cc <ssd1306_DrawPixel>
 8001416:	e016      	b.n	8001446 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <ssd1306_WriteChar+0x10c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b2d8      	uxtb	r0, r3
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <ssd1306_WriteChar+0x10c>)
 8001428:	885b      	ldrh	r3, [r3, #2]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b2d9      	uxtb	r1, r3
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	f7ff ff43 	bl	80012cc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	3301      	adds	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	793b      	ldrb	r3, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4293      	cmp	r3, r2
 8001454:	d3c5      	bcc.n	80013e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	461a      	mov	r2, r3
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	4293      	cmp	r3, r2
 8001464:	d3ad      	bcc.n	80013c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <ssd1306_WriteChar+0x10c>)
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	793b      	ldrb	r3, [r7, #4]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4413      	add	r3, r2
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b03      	ldr	r3, [pc, #12]	; (8001480 <ssd1306_WriteChar+0x10c>)
 8001474:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3724      	adds	r7, #36	; 0x24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000658 	.word	0x20000658

08001484 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	1d38      	adds	r0, r7, #4
 800148e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001492:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001494:	e012      	b.n	80014bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	7818      	ldrb	r0, [r3, #0]
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	1d3a      	adds	r2, r7, #4
 800149e:	ca06      	ldmia	r2, {r1, r2}
 80014a0:	f7ff ff68 	bl	8001374 <ssd1306_WriteChar>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d002      	beq.n	80014b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	e008      	b.n	80014c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e8      	bne.n	8001496 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	460a      	mov	r2, r1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	4613      	mov	r3, r2
 80014de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <ssd1306_SetCursor+0x2c>)
 80014e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <ssd1306_SetCursor+0x2c>)
 80014ee:	805a      	strh	r2, [r3, #2]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	20000658 	.word	0x20000658

08001500 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800150a:	2381      	movs	r3, #129	; 0x81
 800150c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fdf3 	bl	80010fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fdef 	bl	80010fc <ssd1306_WriteCommand>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001538:	23af      	movs	r3, #175	; 0xaf
 800153a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <ssd1306_SetDisplayOn+0x38>)
 800153e:	2201      	movs	r2, #1
 8001540:	715a      	strb	r2, [r3, #5]
 8001542:	e004      	b.n	800154e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001544:	23ae      	movs	r3, #174	; 0xae
 8001546:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <ssd1306_SetDisplayOn+0x38>)
 800154a:	2200      	movs	r2, #0
 800154c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fdd3 	bl	80010fc <ssd1306_WriteCommand>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000658 	.word	0x20000658

08001564 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156e:	2003      	movs	r0, #3
 8001570:	f000 f901 	bl	8001776 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001574:	200f      	movs	r0, #15
 8001576:	f7ff fca5 	bl	8000ec4 <HAL_InitTick>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	e001      	b.n	800158a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001586:	f7ff fb55 	bl	8000c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000028 	.word	0x20000028
 80015b8:	20000660 	.word	0x20000660

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000660 	.word	0x20000660

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000028 	.word	0x20000028

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff4c 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179e:	f7ff ff61 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	6978      	ldr	r0, [r7, #20]
 80017aa:	f7ff ffb1 	bl	8001710 <NVIC_EncodePriority>
 80017ae:	4602      	mov	r2, r0
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff80 	bl	80016bc <__NVIC_SetPriority>
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff54 	bl	8001680 <__NVIC_EnableIRQ>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e17f      	b.n	8001af0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2101      	movs	r1, #1
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8171 	beq.w	8001aea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d005      	beq.n	8001820 <HAL_GPIO_Init+0x40>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d118      	bne.n	80018c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	6939      	ldr	r1, [r7, #16]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80ac 	beq.w	8001aea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_GPIO_Init+0x330>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a5e      	ldr	r2, [pc, #376]	; (8001b10 <HAL_GPIO_Init+0x330>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_GPIO_Init+0x330>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019aa:	4a5a      	ldr	r2, [pc, #360]	; (8001b14 <HAL_GPIO_Init+0x334>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d4:	d025      	beq.n	8001a22 <HAL_GPIO_Init+0x242>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <HAL_GPIO_Init+0x338>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01f      	beq.n	8001a1e <HAL_GPIO_Init+0x23e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4e      	ldr	r2, [pc, #312]	; (8001b1c <HAL_GPIO_Init+0x33c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d019      	beq.n	8001a1a <HAL_GPIO_Init+0x23a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <HAL_GPIO_Init+0x340>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_GPIO_Init+0x236>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_GPIO_Init+0x344>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <HAL_GPIO_Init+0x232>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <HAL_GPIO_Init+0x348>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x22e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	; (8001b2c <HAL_GPIO_Init+0x34c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_GPIO_Init+0x22a>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00c      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00a      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e008      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a12:	2304      	movs	r3, #4
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a16:	2303      	movs	r3, #3
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x244>
 8001a22:	2300      	movs	r3, #0
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a34:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_GPIO_Init+0x334>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <HAL_GPIO_Init+0x350>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f ae78 	bne.w	80017f0 <HAL_GPIO_Init+0x10>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	48000800 	.word	0x48000800
 8001b20:	48000c00 	.word	0x48000c00
 8001b24:	48001000 	.word	0x48001000
 8001b28:	48001400 	.word	0x48001400
 8001b2c:	48001800 	.word	0x48001800
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e08d      	b.n	8001c92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff f87a 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2224      	movs	r2, #36	; 0x24
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d108      	bne.n	8001c06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	e007      	b.n	8001c16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69d9      	ldr	r1, [r3, #28]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1a      	ldr	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	f040 80f9 	bne.w	8001eb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_I2C_Mem_Write+0x34>
 8001cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0ed      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Mem_Write+0x4e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0e6      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fc63 	bl	80015bc <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f955 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d1      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f8b9 	bl	8001ec4 <I2C_RequestMemoryWrite>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0a9      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d90e      	bls.n	8001d8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 facf 	bl	8002328 <I2C_TransferConfig>
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fabe 	bl	8002328 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f94e 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07b      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d034      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d130      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8d1 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04d      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d90e      	bls.n	8001e44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fa73 	bl	8002328 <I2C_TransferConfig>
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa62 	bl	8002328 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d19e      	bne.n	8001dac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f934 	bl	80020e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e01a      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_I2C_Mem_Write+0x224>)
 8001e96:	400b      	ands	r3, r1
 8001e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <I2C_RequestMemoryWrite+0xa4>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fa1b 	bl	8002328 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	69b9      	ldr	r1, [r7, #24]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f8ab 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02c      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
 8001f16:	e015      	b.n	8001f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f18:	893b      	ldrh	r3, [r7, #8]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	69b9      	ldr	r1, [r7, #24]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f891 	bl	8002052 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e012      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f3a:	893b      	ldrh	r3, [r7, #8]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f830 	bl	8001fb4 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	80002000 	.word	0x80002000

08001f6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d007      	beq.n	8001fa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	619a      	str	r2, [r3, #24]
  }
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc4:	e031      	b.n	800202a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d02d      	beq.n	800202a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fce:	f7ff faf5 	bl	80015bc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d302      	bcc.n	8001fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d122      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4013      	ands	r3, r2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d113      	bne.n	800202a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	429a      	cmp	r2, r3
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	429a      	cmp	r2, r3
 8002046:	d0be      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800205e:	e033      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f87f 	bl	8002168 <I2C_IsErrorOccurred>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e031      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207a:	d025      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207c:	f7ff fa9e 	bl	80015bc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11a      	bne.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b02      	cmp	r3, #2
 800209e:	d013      	beq.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e007      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d1c4      	bne.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ec:	e02f      	b.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f838 	bl	8002168 <I2C_IsErrorOccurred>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e02d      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7ff fa5b 	bl	80015bc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11a      	bne.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b20      	cmp	r3, #32
 8002124:	d013      	beq.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d1c8      	bne.n	80020ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d068      	beq.n	8002266 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800219c:	e049      	b.n	8002232 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d045      	beq.n	8002232 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021a6:	f7ff fa09 	bl	80015bc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d302      	bcc.n	80021bc <I2C_IsErrorOccurred+0x54>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13a      	bne.n	8002232 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021de:	d121      	bne.n	8002224 <I2C_IsErrorOccurred+0xbc>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e6:	d01d      	beq.n	8002224 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d01a      	beq.n	8002224 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021fe:	f7ff f9dd 	bl	80015bc <HAL_GetTick>
 8002202:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002204:	e00e      	b.n	8002224 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002206:	f7ff f9d9 	bl	80015bc <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b19      	cmp	r3, #25
 8002212:	d907      	bls.n	8002224 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	f043 0320 	orr.w	r3, r3, #32
 800221a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002222:	e006      	b.n	8002232 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d1e9      	bne.n	8002206 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d003      	beq.n	8002248 <I2C_IsErrorOccurred+0xe0>
 8002240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0aa      	beq.n	800219e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01c      	beq.n	8002316 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fe45 	bl	8001f6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <I2C_IsErrorOccurred+0x1bc>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800231a:	4618      	mov	r0, r3
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	fe00e800 	.word	0xfe00e800

08002328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	4613      	mov	r3, r2
 8002338:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002340:	7a7b      	ldrb	r3, [r7, #9]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002348:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	4313      	orrs	r3, r2
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002356:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <I2C_TransferConfig+0x60>)
 8002368:	430b      	orrs	r3, r1
 800236a:	43db      	mvns	r3, r3
 800236c:	ea02 0103 	and.w	r1, r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	03ff63ff 	.word	0x03ff63ff

0800238c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d138      	bne.n	8002414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e032      	b.n	8002416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002422:	b480      	push	{r7}
 8002424:	b085      	sub	sp, #20
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	d139      	bne.n	80024ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002442:	2302      	movs	r3, #2
 8002444:	e033      	b.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2224      	movs	r2, #36	; 0x24
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40007000 	.word	0x40007000

080024d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e6:	d130      	bne.n	800254a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024e8:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d038      	beq.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002504:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2232      	movs	r2, #50	; 0x32
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	3301      	adds	r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800251c:	e002      	b.n	8002524 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002530:	d102      	bne.n	8002538 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f2      	bne.n	800251e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002544:	d110      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e00f      	b.n	800256a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	d007      	beq.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002560:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40007000 	.word	0x40007000
 800257c:	20000018 	.word	0x20000018
 8002580:	431bde83 	.word	0x431bde83

08002584 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e3ca      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002596:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a0:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80e4 	beq.w	8002780 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_RCC_OscConfig+0x4a>
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	f040 808b 	bne.w	80026dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 8087 	bne.w	80026dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ce:	4b89      	ldr	r3, [pc, #548]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e3a2      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_RCC_OscConfig+0x7c>
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fe:	e005      	b.n	800260c <HAL_RCC_OscConfig+0x88>
 8002600:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	091b      	lsrs	r3, r3, #4
 8002608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260c:	4293      	cmp	r3, r2
 800260e:	d223      	bcs.n	8002658 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fd87 	bl	8003128 <RCC_SetFlashLatencyFromMSIRange>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e383      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a72      	ldr	r2, [pc, #456]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b70      	ldr	r3, [pc, #448]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	496d      	ldr	r1, [pc, #436]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	4968      	ldr	r1, [pc, #416]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e025      	b.n	80026a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002658:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4960      	ldr	r1, [pc, #384]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	495b      	ldr	r1, [pc, #364]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fd47 	bl	8003128 <RCC_SetFlashLatencyFromMSIRange>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e343      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a4:	f000 fc4a 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	4950      	ldr	r1, [pc, #320]	; (80027f8 <HAL_RCC_OscConfig+0x274>)
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	4a4e      	ldr	r2, [pc, #312]	; (80027fc <HAL_RCC_OscConfig+0x278>)
 80026c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026c4:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <HAL_RCC_OscConfig+0x27c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fbfb 	bl	8000ec4 <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d052      	beq.n	800277e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	e327      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d032      	beq.n	800274a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f0:	f7fe ff64 	bl	80015bc <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f8:	f7fe ff60 	bl	80015bc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e310      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270a:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002716:	4b37      	ldr	r3, [pc, #220]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a36      	ldr	r2, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b34      	ldr	r3, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4931      	ldr	r1, [pc, #196]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	492c      	ldr	r1, [pc, #176]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e01a      	b.n	8002780 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002756:	f7fe ff31 	bl	80015bc <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800275e:	f7fe ff2d 	bl	80015bc <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e2dd      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x1da>
 800277c:	e000      	b.n	8002780 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800277e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d074      	beq.n	8002876 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b08      	cmp	r3, #8
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x21a>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d10e      	bne.n	80027b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d10b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d064      	beq.n	8002874 <HAL_RCC_OscConfig+0x2f0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d160      	bne.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e2ba      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x24a>
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e026      	b.n	800281c <HAL_RCC_OscConfig+0x298>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d6:	d115      	bne.n	8002804 <HAL_RCC_OscConfig+0x280>
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a02      	ldr	r2, [pc, #8]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x298>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08008b10 	.word	0x08008b10
 80027fc:	20000018 	.word	0x20000018
 8002800:	20000024 	.word	0x20000024
 8002804:	4ba0      	ldr	r3, [pc, #640]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a9f      	ldr	r2, [pc, #636]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b9d      	ldr	r3, [pc, #628]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a9c      	ldr	r2, [pc, #624]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe feca 	bl	80015bc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7fe fec6 	bl	80015bc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e276      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283e:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x2a8>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe feb6 	bl	80015bc <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe feb2 	bl	80015bc <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e262      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x2d0>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d060      	beq.n	8002944 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b04      	cmp	r3, #4
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x310>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d116      	bne.n	80028c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	4b7c      	ldr	r3, [pc, #496]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x328>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e23f      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	061b      	lsls	r3, r3, #24
 80028ba:	4973      	ldr	r1, [pc, #460]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c0:	e040      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d023      	beq.n	8002912 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fe71 	bl	80015bc <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fe6d 	bl	80015bc <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e21d      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	495f      	ldr	r1, [pc, #380]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e018      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a5c      	ldr	r2, [pc, #368]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fe4d 	bl	80015bc <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fe49 	bl	80015bc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1f9      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03c      	beq.n	80029ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01c      	beq.n	8002992 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 800295a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295e:	4a4a      	ldr	r2, [pc, #296]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fe28 	bl	80015bc <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fe24 	bl	80015bc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1d4      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ef      	beq.n	8002970 <HAL_RCC_OscConfig+0x3ec>
 8002990:	e01b      	b.n	80029ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	4a3b      	ldr	r2, [pc, #236]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fe0b 	bl	80015bc <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fe07 	bl	80015bc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1b7      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ef      	bne.n	80029aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80a6 	beq.w	8002b24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10d      	bne.n	8002a04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6593      	str	r3, [r2, #88]	; 0x58
 80029f4:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCC_OscConfig+0x508>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d118      	bne.n	8002a42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_OscConfig+0x508>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_RCC_OscConfig+0x508>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fdce 	bl	80015bc <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7fe fdca 	bl	80015bc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e17a      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x508>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4d8>
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a5a:	e029      	b.n	8002ab0 <HAL_RCC_OscConfig+0x52c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d115      	bne.n	8002a90 <HAL_RCC_OscConfig+0x50c>
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x52c>
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	4b9c      	ldr	r3, [pc, #624]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	4a9b      	ldr	r2, [pc, #620]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aa0:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a97      	ldr	r2, [pc, #604]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d016      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fd80 	bl	80015bc <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fd7c 	bl	80015bc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e12a      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad6:	4b8b      	ldr	r3, [pc, #556]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ed      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x53c>
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fd69 	bl	80015bc <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fd65 	bl	80015bc <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e113      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b04:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ed      	bne.n	8002aee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b12:	7ffb      	ldrb	r3, [r7, #31]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a79      	ldr	r2, [pc, #484]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80fe 	beq.w	8002d2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	f040 80d0 	bne.w	8002cd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b38:	4b72      	ldr	r3, [pc, #456]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0203 	and.w	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d130      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	3b01      	subs	r3, #1
 8002b58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d127      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11f      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b78:	2a07      	cmp	r2, #7
 8002b7a:	bf14      	ite	ne
 8002b7c:	2201      	movne	r2, #1
 8002b7e:	2200      	moveq	r2, #0
 8002b80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d06e      	beq.n	8002c8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d069      	beq.n	8002c88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0ad      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bdc:	f7fe fcee 	bl	80015bc <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fcea 	bl	80015bc <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e09a      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf6:	4b43      	ldr	r3, [pc, #268]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_RCC_OscConfig+0x784>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	4311      	orrs	r1, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1c:	0212      	lsls	r2, r2, #8
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0552      	lsls	r2, r2, #21
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c30:	0852      	lsrs	r2, r2, #1
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0652      	lsls	r2, r2, #25
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3c:	0912      	lsrs	r2, r2, #4
 8002c3e:	0452      	lsls	r2, r2, #17
 8002c40:	430a      	orrs	r2, r1
 8002c42:	4930      	ldr	r1, [pc, #192]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c48:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2d      	ldr	r2, [pc, #180]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c60:	f7fe fcac 	bl	80015bc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fca8 	bl	80015bc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e058      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c86:	e050      	b.n	8002d2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04f      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d148      	bne.n	8002d2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb0:	f7fe fc84 	bl	80015bc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fc80 	bl	80015bc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e030      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x734>
 8002cd6:	e028      	b.n	8002d2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d023      	beq.n	8002d26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x780>)
 8002ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe fc67 	bl	80015bc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	e00c      	b.n	8002d0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe fc63 	bl	80015bc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d905      	bls.n	8002d0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e013      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_OscConfig+0x7b0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ec      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_OscConfig+0x7b0>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4905      	ldr	r1, [pc, #20]	; (8002d34 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x7b4>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	60cb      	str	r3, [r1, #12]
 8002d24:	e001      	b.n	8002d2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	feeefffc 	.word	0xfeeefffc

08002d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0e7      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d50:	4b75      	ldr	r3, [pc, #468]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d910      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4970      	ldr	r1, [pc, #448]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b6e      	ldr	r3, [pc, #440]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cf      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d908      	bls.n	8002dae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4960      	ldr	r1, [pc, #384]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d04c      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d121      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0a6      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e09a      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b4e      	ldr	r3, [pc, #312]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e08e      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e086      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4943      	ldr	r1, [pc, #268]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe fbca 	bl	80015bc <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fbc6 	bl	80015bc <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e06e      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d208      	bcs.n	8002e82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	492b      	ldr	r1, [pc, #172]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d210      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 0207 	bic.w	r2, r3, #7
 8002e98:	4923      	ldr	r1, [pc, #140]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea0:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e036      	b.n	8002f20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4918      	ldr	r1, [pc, #96]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4910      	ldr	r1, [pc, #64]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef0:	f000 f824 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	490b      	ldr	r1, [pc, #44]	; (8002f30 <HAL_RCC_ClockConfig+0x1f4>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1f8>)
 8002f0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1fc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd ffd5 	bl	8000ec4 <HAL_InitTick>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08008b10 	.word	0x08008b10
 8002f34:	20000018 	.word	0x20000018
 8002f38:	20000024 	.word	0x20000024

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x34>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d121      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d11e      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f70:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f7c:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	0a1b      	lsrs	r3, r3, #8
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e005      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e004      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d134      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xac>
 8002fe0:	e005      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fea:	617b      	str	r3, [r7, #20]
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	617b      	str	r3, [r7, #20]
      break;
 8002ff2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	fb03 f202 	mul.w	r2, r3, r2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_RCC_GetSysClockFreq+0x108>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	0e5b      	lsrs	r3, r3, #25
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	3301      	adds	r3, #1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003034:	69bb      	ldr	r3, [r7, #24]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	08008b28 	.word	0x08008b28
 800304c:	00f42400 	.word	0x00f42400
 8003050:	007a1200 	.word	0x007a1200

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000018 	.word	0x20000018

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08008b20 	.word	0x08008b20

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800309c:	f7ff ffda 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08008b20 	.word	0x08008b20

080030c4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	220f      	movs	r2, #15
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_GetClockConfig+0x60>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0207 	and.w	r2, r3, #7
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	601a      	str	r2, [r3, #0]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003140:	f7ff f9bc 	bl	80024bc <HAL_PWREx_GetVoltageRange>
 8003144:	6178      	str	r0, [r7, #20]
 8003146:	e014      	b.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003160:	f7ff f9ac 	bl	80024bc <HAL_PWREx_GetVoltageRange>
 8003164:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003170:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d10b      	bne.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d919      	bls.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2ba0      	cmp	r3, #160	; 0xa0
 8003184:	d902      	bls.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003186:	2302      	movs	r3, #2
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e013      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800318c:	2301      	movs	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e010      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d902      	bls.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003198:	2303      	movs	r3, #3
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e00a      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	d102      	bne.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a4:	2302      	movs	r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e004      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d101      	bne.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 0207 	bic.w	r2, r3, #7
 80031bc:	4909      	ldr	r1, [pc, #36]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40022000 	.word	0x40022000

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003200:	2b00      	cmp	r3, #0
 8003202:	d041      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320c:	d02a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800320e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003212:	d824      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003218:	d008      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800321a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321e:	d81e      	bhi.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003228:	d010      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800322a:	e018      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800322c:	4b86      	ldr	r3, [pc, #536]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a85      	ldr	r2, [pc, #532]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003238:	e015      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fabb 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324a:	e00c      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3320      	adds	r3, #32
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fba6 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	74fb      	strb	r3, [r7, #19]
      break;
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800326c:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327a:	4973      	ldr	r1, [pc, #460]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003282:	e001      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d041      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003298:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800329c:	d02a      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800329e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032a2:	d824      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a8:	d008      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ae:	d81e      	bhi.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b8:	d010      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ba:	e018      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032bc:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a61      	ldr	r2, [pc, #388]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c8:	e015      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa73 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032da:	e00c      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3320      	adds	r3, #32
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fb5e 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ec:	e003      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	74fb      	strb	r3, [r7, #19]
      break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032fc:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800330a:	494f      	ldr	r1, [pc, #316]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003312:	e001      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80a0 	beq.w	8003466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003326:	2300      	movs	r3, #0
 8003328:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a40      	ldr	r2, [pc, #256]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003358:	2301      	movs	r3, #1
 800335a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3a      	ldr	r2, [pc, #232]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003368:	f7fe f928 	bl	80015bc <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336e:	e009      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003370:	f7fe f924 	bl	80015bc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d902      	bls.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	74fb      	strb	r3, [r7, #19]
        break;
 8003382:	e005      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ef      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d15c      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d019      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033e0:	4a19      	ldr	r2, [pc, #100]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f8e3 	bl	80015bc <HAL_GetTick>
 80033f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f8:	e00b      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe f8df 	bl	80015bc <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d902      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	74fb      	strb	r3, [r7, #19]
            break;
 8003410:	e006      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ec      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003436:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800343e:	e009      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003454:	7c7b      	ldrb	r3, [r7, #17]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d105      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4b9e      	ldr	r3, [pc, #632]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	4a9d      	ldr	r2, [pc, #628]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003472:	4b98      	ldr	r3, [pc, #608]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f023 0203 	bic.w	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	4994      	ldr	r1, [pc, #592]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003494:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 020c 	bic.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	498c      	ldr	r1, [pc, #560]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b6:	4b87      	ldr	r3, [pc, #540]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4983      	ldr	r1, [pc, #524]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d8:	4b7e      	ldr	r3, [pc, #504]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	497b      	ldr	r1, [pc, #492]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003508:	4972      	ldr	r1, [pc, #456]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800351c:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	496a      	ldr	r1, [pc, #424]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	4961      	ldr	r1, [pc, #388]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003560:	4b5c      	ldr	r3, [pc, #368]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	4959      	ldr	r1, [pc, #356]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003582:	4b54      	ldr	r3, [pc, #336]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	4950      	ldr	r1, [pc, #320]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	4948      	ldr	r1, [pc, #288]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c6:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	493f      	ldr	r1, [pc, #252]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d028      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	4937      	ldr	r1, [pc, #220]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003606:	d106      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003608:	4b32      	ldr	r3, [pc, #200]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a31      	ldr	r2, [pc, #196]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e011      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800361e:	d10c      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f8c8 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	491f      	ldr	r1, [pc, #124]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003664:	d106      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003670:	60d3      	str	r3, [r2, #12]
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367c:	d10c      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2101      	movs	r1, #1
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f899 	bl	80037bc <RCCEx_PLLSAI1_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02b      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d109      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e014      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2101      	movs	r1, #1
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f867 	bl	80037bc <RCCEx_PLLSAI1_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02f      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	4928      	ldr	r1, [pc, #160]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003726:	d10d      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f844 	bl	80037bc <RCCEx_PLLSAI1_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	74bb      	strb	r3, [r7, #18]
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3320      	adds	r3, #32
 8003752:	2102      	movs	r1, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f925 	bl	80039a4 <RCCEx_PLLSAI2_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003782:	490d      	ldr	r1, [pc, #52]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a6:	4904      	ldr	r1, [pc, #16]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b75      	ldr	r3, [pc, #468]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037d6:	4b72      	ldr	r3, [pc, #456]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ee:	4b6c      	ldr	r3, [pc, #432]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d047      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e044      	b.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d018      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x86>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d825      	bhi.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x62>
 8003818:	2b02      	cmp	r3, #2
 800381a:	d009      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x74>
 800381c:	e020      	b.n	8003860 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381e:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382e:	e01a      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e013      	b.n	800386a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003842:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384e:	4b54      	ldr	r3, [pc, #336]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385e:	e006      	b.n	800386e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e004      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	430b      	orrs	r3, r1
 800388c:	4944      	ldr	r1, [pc, #272]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d17d      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003898:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fd fe8a 	bl	80015bc <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ac:	f7fd fe86 	bl	80015bc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
        break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c0:	4b37      	ldr	r3, [pc, #220]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d160      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	0211      	lsls	r1, r2, #8
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0912      	lsrs	r2, r2, #4
 80038f0:	0452      	lsls	r2, r2, #17
 80038f2:	430a      	orrs	r2, r1
 80038f4:	492a      	ldr	r1, [pc, #168]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e027      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d112      	bne.n	8003928 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800390a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	0211      	lsls	r1, r2, #8
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6912      	ldr	r2, [r2, #16]
 8003918:	0852      	lsrs	r2, r2, #1
 800391a:	3a01      	subs	r2, #1
 800391c:	0552      	lsls	r2, r2, #21
 800391e:	430a      	orrs	r2, r1
 8003920:	491f      	ldr	r1, [pc, #124]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	4313      	orrs	r3, r2
 8003924:	610b      	str	r3, [r1, #16]
 8003926:	e011      	b.n	800394c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6952      	ldr	r2, [r2, #20]
 800393e:	0852      	lsrs	r2, r2, #1
 8003940:	3a01      	subs	r2, #1
 8003942:	0652      	lsls	r2, r2, #25
 8003944:	430a      	orrs	r2, r1
 8003946:	4916      	ldr	r1, [pc, #88]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	4313      	orrs	r3, r2
 800394a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fd fe30 	bl	80015bc <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800395e:	e009      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003960:	f7fd fe2c 	bl	80015bc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d902      	bls.n	8003974 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	73fb      	strb	r3, [r7, #15]
          break;
 8003972:	e005      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ef      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	4313      	orrs	r3, r2
 8003992:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b2:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d018      	beq.n	80039f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039be:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0203 	and.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10d      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
       ||
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039d6:	4b61      	ldr	r3, [pc, #388]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
       ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d047      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
 80039ee:	e044      	b.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d018      	beq.n	8003a2a <RCCEx_PLLSAI2_Config+0x86>
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d825      	bhi.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d002      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x62>
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d009      	beq.n	8003a18 <RCCEx_PLLSAI2_Config+0x74>
 8003a04:	e020      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a06:	4b55      	ldr	r3, [pc, #340]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11d      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a16:	e01a      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d116      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e013      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a36:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a46:	e006      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e004      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e002      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	430b      	orrs	r3, r1
 8003a74:	4939      	ldr	r1, [pc, #228]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d167      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a80:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fd96 	bl	80015bc <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a92:	e009      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a94:	f7fd fd92 	bl	80015bc <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d902      	bls.n	8003aa8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa6:	e005      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d14a      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d111      	bne.n	8003ae4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	0912      	lsrs	r2, r2, #4
 8003ad8:	0452      	lsls	r2, r2, #17
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	614b      	str	r3, [r1, #20]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6912      	ldr	r2, [r2, #16]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fd52 	bl	80015bc <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b1c:	f7fd fd4e 	bl	80015bc <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d079      	beq.n	8003c66 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd f8da 	bl	8000d40 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d058      	beq.n	8003c54 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	22ca      	movs	r2, #202	; 0xca
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2253      	movs	r2, #83	; 0x53
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fbda 	bl	800436c <RTC_EnterInitMode>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d127      	bne.n	8003c12 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68d2      	ldr	r2, [r2, #12]
 8003bfc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6919      	ldr	r1, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fbde 	bl	80043d4 <RTC_ExitInitMode>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d113      	bne.n	8003c4a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0203 	bic.w	r2, r2, #3
 8003c30:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22ff      	movs	r2, #255	; 0xff
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
 8003c52:	e001      	b.n	8003c58 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_RTC_SetTime+0x1a>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e08b      	b.n	8003da2 <HAL_RTC_SetTime+0x132>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	22ca      	movs	r2, #202	; 0xca
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2253      	movs	r2, #83	; 0x53
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb5e 	bl	800436c <RTC_EnterInitMode>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d163      	bne.n	8003d82 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d126      	bne.n	8003d0e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fbb9 	bl	8004450 <RTC_ByteToBcd2>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbb2 	bl	8004450 <RTC_ByteToBcd2>
 8003cec:	4603      	mov	r3, r0
 8003cee:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003cf0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	789b      	ldrb	r3, [r3, #2]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fbaa 	bl	8004450 <RTC_ByteToBcd2>
 8003cfc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003cfe:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e018      	b.n	8003d40 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d2e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d34:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	78db      	ldrb	r3, [r3, #3]
 8003d3a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d4e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6899      	ldr	r1, [r3, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fb2b 	bl	80043d4 <RTC_ExitInitMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd90      	pop	{r4, r7, pc}

08003daa <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003dd8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	0d9b      	lsrs	r3, r3, #22
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d11a      	bne.n	8003e58 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb32 	bl	8004490 <RTC_Bcd2ToByte>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fb29 	bl	8004490 <RTC_Bcd2ToByte>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	789b      	ldrb	r3, [r3, #2]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb20 	bl	8004490 <RTC_Bcd2ToByte>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e62:	b590      	push	{r4, r7, lr}
 8003e64:	b087      	sub	sp, #28
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_RTC_SetDate+0x1a>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e075      	b.n	8003f68 <HAL_RTC_SetDate+0x106>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10e      	bne.n	8003eb0 <HAL_RTC_SetDate+0x4e>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	785b      	ldrb	r3, [r3, #1]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	f023 0310 	bic.w	r3, r3, #16
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	330a      	adds	r3, #10
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	78db      	ldrb	r3, [r3, #3]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fac8 	bl	8004450 <RTC_ByteToBcd2>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fac1 	bl	8004450 <RTC_ByteToBcd2>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ed2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	789b      	ldrb	r3, [r3, #2]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fab9 	bl	8004450 <RTC_ByteToBcd2>
 8003ede:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003ee0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e00e      	b.n	8003f0e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	78db      	ldrb	r3, [r3, #3]
 8003ef4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	785b      	ldrb	r3, [r3, #1]
 8003efa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003efc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003f02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	22ca      	movs	r2, #202	; 0xca
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2253      	movs	r2, #83	; 0x53
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 fa24 	bl	800436c <RTC_EnterInitMode>
 8003f24:	4603      	mov	r3, r0
 8003f26:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fa48 	bl	80043d4 <RTC_ExitInitMode>
 8003f44:	4603      	mov	r3, r0
 8003f46:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd90      	pop	{r4, r7, pc}

08003f70 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003f86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	0b5b      	lsrs	r3, r3, #13
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11a      	bne.n	8004000 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	78db      	ldrb	r3, [r3, #3]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fa5e 	bl	8004490 <RTC_Bcd2ToByte>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fa55 	bl	8004490 <RTC_Bcd2ToByte>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	789b      	ldrb	r3, [r3, #2]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fa4c 	bl	8004490 <RTC_Bcd2ToByte>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RTC_SetAlarm_IT+0x1a>
 8004022:	2302      	movs	r3, #2
 8004024:	e127      	b.n	8004276 <HAL_RTC_SetAlarm_IT+0x26a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d137      	bne.n	80040ac <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d102      	bne.n	8004050 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f9fb 	bl	8004450 <RTC_ByteToBcd2>
 800405a:	4603      	mov	r3, r0
 800405c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f9f4 	bl	8004450 <RTC_ByteToBcd2>
 8004068:	4603      	mov	r3, r0
 800406a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800406c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	789b      	ldrb	r3, [r3, #2]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f9ec 	bl	8004450 <RTC_ByteToBcd2>
 8004078:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800407a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004084:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f9de 	bl	8004450 <RTC_ByteToBcd2>
 8004094:	4603      	mov	r3, r0
 8004096:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004098:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e023      	b.n	80040f4 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040cc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	78db      	ldrb	r3, [r3, #3]
 80040d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	22ca      	movs	r2, #202	; 0xca
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2253      	movs	r2, #83	; 0x53
 800410e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004118:	d14a      	bne.n	80041b0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004128:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800413a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800413c:	f7fd fa3e 	bl	80015bc <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004142:	e015      	b.n	8004170 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004144:	f7fd fa3a 	bl	80015bc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004152:	d90d      	bls.n	8004170 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e082      	b.n	8004276 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0e2      	beq.n	8004144 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	e049      	b.n	8004244 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041be:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f462 7220 	orn	r2, r2, #640	; 0x280
 80041d0:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80041d2:	f7fd f9f3 	bl	80015bc <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80041d8:	e015      	b.n	8004206 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041da:	f7fd f9ef 	bl	80015bc <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041e8:	d90d      	bls.n	8004206 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	22ff      	movs	r2, #255	; 0xff
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e037      	b.n	8004276 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0e2      	beq.n	80041da <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004232:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <HAL_RTC_SetAlarm_IT+0x274>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <HAL_RTC_SetAlarm_IT+0x274>)
 800424a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RTC_SetAlarm_IT+0x274>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <HAL_RTC_SetAlarm_IT+0x274>)
 8004256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	22ff      	movs	r2, #255	; 0xff
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	bf00      	nop
 8004280:	40010400 	.word	0x40010400

08004284 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800428c:	4b1f      	ldr	r3, [pc, #124]	; (800430c <HAL_RTC_AlarmIRQHandler+0x88>)
 800428e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004292:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80042c0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f824 	bl	8004310 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f462 7220 	orn	r2, r2, #640	; 0x280
 80042f4:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f96f 	bl	80045da <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40010400 	.word	0x40010400

08004310 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <HAL_RTC_WaitForSynchro+0x44>)
 8004332:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004334:	f7fd f942 	bl	80015bc <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800433a:	e009      	b.n	8004350 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800433c:	f7fd f93e 	bl	80015bc <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800434a:	d901      	bls.n	8004350 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e007      	b.n	8004360 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ee      	beq.n	800433c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	0003ff5f 	.word	0x0003ff5f

0800436c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d120      	bne.n	80043c8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004390:	f7fd f914 	bl	80015bc <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004396:	e00d      	b.n	80043b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004398:	f7fd f910 	bl	80015bc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a6:	d905      	bls.n	80043b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <RTC_EnterInitMode+0x5c>
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d1e7      	bne.n	8004398 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <RTC_ExitInitMode+0x78>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <RTC_ExitInitMode+0x78>)
 80043e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <RTC_ExitInitMode+0x78>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10c      	bne.n	8004412 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff93 	bl	8004324 <HAL_RTC_WaitForSynchro>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01e      	beq.n	8004442 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2203      	movs	r2, #3
 8004408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	73fb      	strb	r3, [r7, #15]
 8004410:	e017      	b.n	8004442 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <RTC_ExitInitMode+0x78>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <RTC_ExitInitMode+0x78>)
 8004418:	f023 0320 	bic.w	r3, r3, #32
 800441c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff80 	bl	8004324 <HAL_RTC_WaitForSynchro>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <RTC_ExitInitMode+0x78>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4a04      	ldr	r2, [pc, #16]	; (800444c <RTC_ExitInitMode+0x78>)
 800443c:	f043 0320 	orr.w	r3, r3, #32
 8004440:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40002800 	.word	0x40002800

08004450 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004462:	e005      	b.n	8004470 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800446a:	7afb      	ldrb	r3, [r7, #11]
 800446c:	3b0a      	subs	r3, #10
 800446e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	2b09      	cmp	r3, #9
 8004474:	d8f6      	bhi.n	8004464 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	b2da      	uxtb	r2, r3
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	4313      	orrs	r3, r2
 8004482:	b2db      	uxtb	r3, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4413      	add	r3, r2
 80044b6:	b2db      	uxtb	r3, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e034      	b.n	8004546 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	22ca      	movs	r2, #202	; 0xca
 80044f2:	625a      	str	r2, [r3, #36]	; 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2253      	movs	r2, #83	; 0x53
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800450a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800452a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	22ff      	movs	r2, #255	; 0xff
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_RTCEx_SetRefClock+0x16>
 8004564:	2302      	movs	r3, #2
 8004566:	e034      	b.n	80045d2 <HAL_RTCEx_SetRefClock+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	22ca      	movs	r2, #202	; 0xca
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2253      	movs	r2, #83	; 0x53
 8004586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff feef 	bl	800436c <RTC_EnterInitMode>
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10c      	bne.n	80045b2 <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0210 	orr.w	r2, r2, #16
 80045a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff13 	bl	80043d4 <RTC_ExitInitMode>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	22ff      	movs	r2, #255	; 0xff
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e049      	b.n	8004694 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f841 	bl	800469c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f000 f9d9 	bl	80049e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e04f      	b.n	8004768 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <HAL_TIM_Base_Start_IT+0xc4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d018      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_TIM_Base_Start_IT+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <HAL_TIM_Base_Start_IT+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_TIM_Base_Start_IT+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_TIM_Base_Start_IT+0xd4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIM_Base_Start_IT+0x76>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_TIM_Base_Start_IT+0xd8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d115      	bne.n	8004752 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <HAL_TIM_Base_Start_IT+0xdc>)
 800472e:	4013      	ands	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b06      	cmp	r3, #6
 8004736:	d015      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d011      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	e008      	b.n	8004764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e000      	b.n	8004766 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40000400 	.word	0x40000400
 800477c:	40000800 	.word	0x40000800
 8004780:	40000c00 	.word	0x40000c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40014000 	.word	0x40014000
 800478c:	00010007 	.word	0x00010007

08004790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0202 	mvn.w	r2, #2
 80047c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8e4 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8d6 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f8e7 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d020      	beq.n	8004840 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0204 	mvn.w	r2, #4
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f8be 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8b0 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8c1 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d020      	beq.n	800488c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0208 	mvn.w	r2, #8
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2204      	movs	r2, #4
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f898 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f88a 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f89b 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0210 	mvn.w	r2, #16
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2208      	movs	r2, #8
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f872 	bl	80049a8 <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f864 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f875 	bl	80049bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0201 	mvn.w	r2, #1
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc f984 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00c      	beq.n	8004920 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f906 	bl	8004b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800493c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8fe 	bl	8004b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00c      	beq.n	8004968 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d007      	beq.n	8004968 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f834 	bl	80049d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0220 	mvn.w	r2, #32
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f8c6 	bl	8004b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3a      	ldr	r2, [pc, #232]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d01b      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <TIM_Base_SetConfig+0x118>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <TIM_Base_SetConfig+0x11c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <TIM_Base_SetConfig+0x120>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <TIM_Base_SetConfig+0x128>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a27      	ldr	r2, [pc, #156]	; (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0x9a>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a26      	ldr	r2, [pc, #152]	; (8004b14 <TIM_Base_SetConfig+0x130>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <TIM_Base_SetConfig+0x128>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <TIM_Base_SetConfig+0x12c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0xf8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0f      	ldr	r2, [pc, #60]	; (8004b14 <TIM_Base_SetConfig+0x130>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d103      	bne.n	8004ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	615a      	str	r2, [r3, #20]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e040      	b.n	8004be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc f948 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2224      	movs	r2, #36	; 0x24
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fb6a 	bl	8005274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8af 	bl	8004d04 <UART_SetConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e01b      	b.n	8004be8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fbe9 	bl	80053b8 <UART_CheckIdleState>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d178      	bne.n	8004cfa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Transmit+0x24>
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e071      	b.n	8004cfc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	; 0x21
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c26:	f7fc fcc9 	bl	80015bc <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	d108      	bne.n	8004c58 <HAL_UART_Transmit+0x68>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d104      	bne.n	8004c58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e003      	b.n	8004c60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c60:	e030      	b.n	8004cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fc4b 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e03c      	b.n	8004cfc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	881a      	ldrh	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c94:	b292      	uxth	r2, r2
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	e008      	b.n	8004cb2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	781a      	ldrb	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1c8      	bne.n	8004c62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fc14 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e005      	b.n	8004cfc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4ba4      	ldr	r3, [pc, #656]	; (8004fc4 <UART_SetConfig+0x2c0>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a99      	ldr	r2, [pc, #612]	; (8004fc8 <UART_SetConfig+0x2c4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a90      	ldr	r2, [pc, #576]	; (8004fcc <UART_SetConfig+0x2c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d126      	bne.n	8004ddc <UART_SetConfig+0xd8>
 8004d8e:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d81b      	bhi.n	8004dd4 <UART_SetConfig+0xd0>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0xa0>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e116      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e112      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e10e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd2:	e10a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e106      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7c      	ldr	r2, [pc, #496]	; (8004fd4 <UART_SetConfig+0x2d0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d138      	bne.n	8004e58 <UART_SetConfig+0x154>
 8004de6:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	d82d      	bhi.n	8004e50 <UART_SetConfig+0x14c>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0xf8>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e51 	.word	0x08004e51
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e51 	.word	0x08004e51
 8004e0c:	08004e41 	.word	0x08004e41
 8004e10:	08004e51 	.word	0x08004e51
 8004e14:	08004e51 	.word	0x08004e51
 8004e18:	08004e51 	.word	0x08004e51
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	08004e51 	.word	0x08004e51
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e49 	.word	0x08004e49
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e0d8      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e0d4      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e0d0      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4e:	e0cc      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e0c8      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5e      	ldr	r2, [pc, #376]	; (8004fd8 <UART_SetConfig+0x2d4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d125      	bne.n	8004eae <UART_SetConfig+0x1aa>
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d016      	beq.n	8004e9e <UART_SetConfig+0x19a>
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d818      	bhi.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d00a      	beq.n	8004e8e <UART_SetConfig+0x18a>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d814      	bhi.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <UART_SetConfig+0x182>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d008      	beq.n	8004e96 <UART_SetConfig+0x192>
 8004e84:	e00f      	b.n	8004ea6 <UART_SetConfig+0x1a2>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8c:	e0ad      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e94:	e0a9      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e96:	2304      	movs	r3, #4
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9c:	e0a5      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea4:	e0a1      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eac:	e09d      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4a      	ldr	r2, [pc, #296]	; (8004fdc <UART_SetConfig+0x2d8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d125      	bne.n	8004f04 <UART_SetConfig+0x200>
 8004eb8:	4b45      	ldr	r3, [pc, #276]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec4:	d016      	beq.n	8004ef4 <UART_SetConfig+0x1f0>
 8004ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ec8:	d818      	bhi.n	8004efc <UART_SetConfig+0x1f8>
 8004eca:	2b80      	cmp	r3, #128	; 0x80
 8004ecc:	d00a      	beq.n	8004ee4 <UART_SetConfig+0x1e0>
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d814      	bhi.n	8004efc <UART_SetConfig+0x1f8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <UART_SetConfig+0x1d8>
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x1e8>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x1f8>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee2:	e082      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e07e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e07a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e076      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e072      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <UART_SetConfig+0x2dc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d12a      	bne.n	8004f64 <UART_SetConfig+0x260>
 8004f0e:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1c:	d01a      	beq.n	8004f54 <UART_SetConfig+0x250>
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0x258>
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f28:	d00c      	beq.n	8004f44 <UART_SetConfig+0x240>
 8004f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2e:	d815      	bhi.n	8004f5c <UART_SetConfig+0x258>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <UART_SetConfig+0x238>
 8004f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f38:	d008      	beq.n	8004f4c <UART_SetConfig+0x248>
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x258>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e052      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e04e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e04a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e046      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e042      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <UART_SetConfig+0x2c4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d13a      	bne.n	8004fe4 <UART_SetConfig+0x2e0>
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f7c:	d01a      	beq.n	8004fb4 <UART_SetConfig+0x2b0>
 8004f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f82:	d81b      	bhi.n	8004fbc <UART_SetConfig+0x2b8>
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	d00c      	beq.n	8004fa4 <UART_SetConfig+0x2a0>
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8e:	d815      	bhi.n	8004fbc <UART_SetConfig+0x2b8>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <UART_SetConfig+0x298>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d008      	beq.n	8004fac <UART_SetConfig+0x2a8>
 8004f9a:	e00f      	b.n	8004fbc <UART_SetConfig+0x2b8>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e022      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004faa:	e01e      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fac:	2304      	movs	r3, #4
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb2:	e01a      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fba:	e016      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e012      	b.n	8004fea <UART_SetConfig+0x2e6>
 8004fc4:	efff69f3 	.word	0xefff69f3
 8004fc8:	40008000 	.word	0x40008000
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	40004800 	.word	0x40004800
 8004fdc:	40004c00 	.word	0x40004c00
 8004fe0:	40005000 	.word	0x40005000
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a9f      	ldr	r2, [pc, #636]	; (800526c <UART_SetConfig+0x568>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d17a      	bne.n	80050ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d824      	bhi.n	8005046 <UART_SetConfig+0x342>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <UART_SetConfig+0x300>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005029 	.word	0x08005029
 8005008:	08005047 	.word	0x08005047
 800500c:	08005031 	.word	0x08005031
 8005010:	08005047 	.word	0x08005047
 8005014:	08005037 	.word	0x08005037
 8005018:	08005047 	.word	0x08005047
 800501c:	08005047 	.word	0x08005047
 8005020:	08005047 	.word	0x08005047
 8005024:	0800503f 	.word	0x0800503f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005028:	f7fe f820 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 800502c:	61f8      	str	r0, [r7, #28]
        break;
 800502e:	e010      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005030:	4b8f      	ldr	r3, [pc, #572]	; (8005270 <UART_SetConfig+0x56c>)
 8005032:	61fb      	str	r3, [r7, #28]
        break;
 8005034:	e00d      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005036:	f7fd ff81 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800503a:	61f8      	str	r0, [r7, #28]
        break;
 800503c:	e009      	b.n	8005052 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005042:	61fb      	str	r3, [r7, #28]
        break;
 8005044:	e005      	b.n	8005052 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80fb 	beq.w	8005250 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	429a      	cmp	r2, r3
 8005068:	d305      	bcc.n	8005076 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800507c:	e0e8      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2200      	movs	r2, #0
 8005082:	461c      	mov	r4, r3
 8005084:	4615      	mov	r5, r2
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	022b      	lsls	r3, r5, #8
 8005090:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005094:	0222      	lsls	r2, r4, #8
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	6849      	ldr	r1, [r1, #4]
 800509a:	0849      	lsrs	r1, r1, #1
 800509c:	2000      	movs	r0, #0
 800509e:	4688      	mov	r8, r1
 80050a0:	4681      	mov	r9, r0
 80050a2:	eb12 0a08 	adds.w	sl, r2, r8
 80050a6:	eb43 0b09 	adc.w	fp, r3, r9
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	f7fb f8d8 	bl	8000270 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ce:	d308      	bcc.n	80050e2 <UART_SetConfig+0x3de>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050d6:	d204      	bcs.n	80050e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e0b6      	b.n	8005250 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050e8:	e0b2      	b.n	8005250 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f2:	d15e      	bne.n	80051b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80050f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d828      	bhi.n	800514e <UART_SetConfig+0x44a>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x400>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	0800514f 	.word	0x0800514f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800514f 	.word	0x0800514f
 800511c:	0800514f 	.word	0x0800514f
 8005120:	0800514f 	.word	0x0800514f
 8005124:	08005147 	.word	0x08005147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fd ffa0 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 800512c:	61f8      	str	r0, [r7, #28]
        break;
 800512e:	e014      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fd ffb2 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005134:	61f8      	str	r0, [r7, #28]
        break;
 8005136:	e010      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005138:	4b4d      	ldr	r3, [pc, #308]	; (8005270 <UART_SetConfig+0x56c>)
 800513a:	61fb      	str	r3, [r7, #28]
        break;
 800513c:	e00d      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fd fefd 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8005142:	61f8      	str	r0, [r7, #28]
        break;
 8005144:	e009      	b.n	800515a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	61fb      	str	r3, [r7, #28]
        break;
 800514c:	e005      	b.n	800515a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d077      	beq.n	8005250 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	005a      	lsls	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b0f      	cmp	r3, #15
 800517a:	d916      	bls.n	80051aa <UART_SetConfig+0x4a6>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d212      	bcs.n	80051aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f023 030f 	bic.w	r3, r3, #15
 800518c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	b29a      	uxth	r2, r3
 800519a:	8afb      	ldrh	r3, [r7, #22]
 800519c:	4313      	orrs	r3, r2
 800519e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	8afa      	ldrh	r2, [r7, #22]
 80051a6:	60da      	str	r2, [r3, #12]
 80051a8:	e052      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051b0:	e04e      	b.n	8005250 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d827      	bhi.n	800520a <UART_SetConfig+0x506>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x4bc>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051f5 	.word	0x080051f5
 80051cc:	0800520b 	.word	0x0800520b
 80051d0:	080051fb 	.word	0x080051fb
 80051d4:	0800520b 	.word	0x0800520b
 80051d8:	0800520b 	.word	0x0800520b
 80051dc:	0800520b 	.word	0x0800520b
 80051e0:	08005203 	.word	0x08005203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fd ff42 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 80051e8:	61f8      	str	r0, [r7, #28]
        break;
 80051ea:	e014      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ec:	f7fd ff54 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 80051f0:	61f8      	str	r0, [r7, #28]
        break;
 80051f2:	e010      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <UART_SetConfig+0x56c>)
 80051f6:	61fb      	str	r3, [r7, #28]
        break;
 80051f8:	e00d      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fa:	f7fd fe9f 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 80051fe:	61f8      	str	r0, [r7, #28]
        break;
 8005200:	e009      	b.n	8005216 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005206:	61fb      	str	r3, [r7, #28]
        break;
 8005208:	e005      	b.n	8005216 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005214:	bf00      	nop
    }

    if (pclk != 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d019      	beq.n	8005250 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	085a      	lsrs	r2, r3, #1
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	d909      	bls.n	800524a <UART_SetConfig+0x546>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d205      	bcs.n	800524a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	e002      	b.n	8005250 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800525c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	40008000 	.word	0x40008000
 8005270:	00f42400 	.word	0x00f42400

08005274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01a      	beq.n	800538a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005372:	d10a      	bne.n	800538a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b098      	sub	sp, #96	; 0x60
 80053bc:	af02      	add	r7, sp, #8
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c8:	f7fc f8f8 	bl	80015bc <HAL_GetTick>
 80053cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d12e      	bne.n	800543a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e4:	2200      	movs	r2, #0
 80053e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f88c 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d021      	beq.n	800543a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800540a:	653b      	str	r3, [r7, #80]	; 0x50
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005414:	647b      	str	r3, [r7, #68]	; 0x44
 8005416:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800541a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e6      	bne.n	80053f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e062      	b.n	8005500 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d149      	bne.n	80054dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005450:	2200      	movs	r2, #0
 8005452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f856 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03c      	beq.n	80054dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	623b      	str	r3, [r7, #32]
   return(result);
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
 8005482:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	61fa      	str	r2, [r7, #28]
 80054b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	617b      	str	r3, [r7, #20]
   return(result);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e011      	b.n	8005500 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3758      	adds	r7, #88	; 0x58
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	e049      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d045      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fc f84b 	bl	80015bc <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <UART_WaitOnFlagUntilTimeout+0x30>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e048      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d031      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d110      	bne.n	800557a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2208      	movs	r2, #8
 800555e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f838 	bl	80055d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2208      	movs	r2, #8
 800556a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e029      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005588:	d111      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f81e 	bl	80055d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e00f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0a6      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b095      	sub	sp, #84	; 0x54
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
 80055fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e6      	bne.n	80055de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	64bb      	str	r3, [r7, #72]	; 0x48
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005630:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2b01      	cmp	r3, #1
 800564a:	d118      	bne.n	800567e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	60bb      	str	r3, [r7, #8]
   return(result);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0310 	bic.w	r3, r3, #16
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800566a:	61bb      	str	r3, [r7, #24]
 800566c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6979      	ldr	r1, [r7, #20]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	613b      	str	r3, [r7, #16]
   return(result);
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e6      	bne.n	800564c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005692:	bf00      	nop
 8005694:	3754      	adds	r7, #84	; 0x54
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <__NVIC_SetPriority>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db0a      	blt.n	80056ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	490c      	ldr	r1, [pc, #48]	; (80056ec <__NVIC_SetPriority+0x4c>)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	0112      	lsls	r2, r2, #4
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	440b      	add	r3, r1
 80056c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056c8:	e00a      	b.n	80056e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4908      	ldr	r1, [pc, #32]	; (80056f0 <__NVIC_SetPriority+0x50>)
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	3b04      	subs	r3, #4
 80056d8:	0112      	lsls	r2, r2, #4
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	440b      	add	r3, r1
 80056de:	761a      	strb	r2, [r3, #24]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000e100 	.word	0xe000e100
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <SysTick_Handler+0x1c>)
 80056fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056fc:	f001 fd28 	bl	8007150 <xTaskGetSchedulerState>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005706:	f002 fb0f 	bl	8007d28 <xPortSysTickHandler>
  }
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010

08005714 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005718:	2100      	movs	r1, #0
 800571a:	f06f 0004 	mvn.w	r0, #4
 800571e:	f7ff ffbf 	bl	80056a0 <__NVIC_SetPriority>
#endif
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572e:	f3ef 8305 	mrs	r3, IPSR
 8005732:	603b      	str	r3, [r7, #0]
  return(result);
 8005734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800573a:	f06f 0305 	mvn.w	r3, #5
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	e00c      	b.n	800575c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005742:	4b0a      	ldr	r3, [pc, #40]	; (800576c <osKernelInitialize+0x44>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d105      	bne.n	8005756 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800574a:	4b08      	ldr	r3, [pc, #32]	; (800576c <osKernelInitialize+0x44>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005750:	2300      	movs	r3, #0
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	e002      	b.n	800575c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800575c:	687b      	ldr	r3, [r7, #4]
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000664 	.word	0x20000664

08005770 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005776:	f3ef 8305 	mrs	r3, IPSR
 800577a:	603b      	str	r3, [r7, #0]
  return(result);
 800577c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005782:	f06f 0305 	mvn.w	r3, #5
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	e010      	b.n	80057ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <osKernelStart+0x48>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d109      	bne.n	80057a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005792:	f7ff ffbf 	bl	8005714 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <osKernelStart+0x48>)
 8005798:	2202      	movs	r2, #2
 800579a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800579c:	f001 f87c 	bl	8006898 <vTaskStartScheduler>
      stat = osOK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	e002      	b.n	80057ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057ac:	687b      	ldr	r3, [r7, #4]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000664 	.word	0x20000664

080057bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08e      	sub	sp, #56	; 0x38
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057cc:	f3ef 8305 	mrs	r3, IPSR
 80057d0:	617b      	str	r3, [r7, #20]
  return(result);
 80057d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d17e      	bne.n	80058d6 <osThreadNew+0x11a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d07b      	beq.n	80058d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057e2:	2318      	movs	r3, #24
 80057e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d045      	beq.n	8005882 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <osThreadNew+0x48>
        name = attr->name;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d008      	beq.n	800582a <osThreadNew+0x6e>
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b38      	cmp	r3, #56	; 0x38
 800581c:	d805      	bhi.n	800582a <osThreadNew+0x6e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <osThreadNew+0x72>
        return (NULL);
 800582a:	2300      	movs	r3, #0
 800582c:	e054      	b.n	80058d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	089b      	lsrs	r3, r3, #2
 800583c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00e      	beq.n	8005864 <osThreadNew+0xa8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2ba7      	cmp	r3, #167	; 0xa7
 800584c:	d90a      	bls.n	8005864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <osThreadNew+0xa8>
        mem = 1;
 800585e:	2301      	movs	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e010      	b.n	8005886 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10c      	bne.n	8005886 <osThreadNew+0xca>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d108      	bne.n	8005886 <osThreadNew+0xca>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <osThreadNew+0xca>
          mem = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e001      	b.n	8005886 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d110      	bne.n	80058ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005894:	9202      	str	r2, [sp, #8]
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fe0c 	bl	80064c0 <xTaskCreateStatic>
 80058a8:	4603      	mov	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e013      	b.n	80058d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d110      	bne.n	80058d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fe57 	bl	800657a <xTaskCreate>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <osThreadNew+0x11a>
            hTask = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058d6:	693b      	ldr	r3, [r7, #16]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e8:	f3ef 8305 	mrs	r3, IPSR
 80058ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <osDelay+0x1c>
    stat = osErrorISR;
 80058f4:	f06f 0305 	mvn.w	r3, #5
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e007      	b.n	800590c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 ff92 	bl	8006830 <vTaskDelay>
    }
  }

  return (stat);
 800590c:	68fb      	ldr	r3, [r7, #12]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <vApplicationGetIdleTaskMemory+0x2c>)
 8005928:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a06      	ldr	r2, [pc, #24]	; (8005948 <vApplicationGetIdleTaskMemory+0x30>)
 800592e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000668 	.word	0x20000668
 8005948:	20000710 	.word	0x20000710

0800594c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a07      	ldr	r2, [pc, #28]	; (8005978 <vApplicationGetTimerTaskMemory+0x2c>)
 800595c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4a06      	ldr	r2, [pc, #24]	; (800597c <vApplicationGetTimerTaskMemory+0x30>)
 8005962:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800596a:	601a      	str	r2, [r3, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	20000910 	.word	0x20000910
 800597c:	200009b8 	.word	0x200009b8

08005980 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f103 0208 	add.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f103 0208 	add.w	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d103      	bne.n	8005a42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e00c      	b.n	8005a5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3308      	adds	r3, #8
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e002      	b.n	8005a50 <vListInsert+0x2e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d2f6      	bcs.n	8005a4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6892      	ldr	r2, [r2, #8]
 8005aaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d103      	bne.n	8005ac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b12:	f002 f877 	bl	8007c04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	3b01      	subs	r3, #1
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d114      	bne.n	8005b92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01a      	beq.n	8005ba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3310      	adds	r3, #16
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 f929 	bl	8006dcc <xTaskRemoveFromEventList>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <xQueueGenericReset+0xcc>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	e009      	b.n	8005ba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fef2 	bl	8005980 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff feed 	bl	8005980 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ba6:	f002 f85d 	bl	8007c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005baa:	2301      	movs	r3, #1
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <xQueueGenericCreateStatic+0x52>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <xQueueGenericCreateStatic+0x56>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <xQueueGenericCreateStatic+0x58>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	623b      	str	r3, [r7, #32]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <xQueueGenericCreateStatic+0x7e>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <xQueueGenericCreateStatic+0x82>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericCreateStatic+0x84>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	61fb      	str	r3, [r7, #28]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c56:	2350      	movs	r3, #80	; 0x50
 8005c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d00a      	beq.n	8005c76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61bb      	str	r3, [r7, #24]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f805 	bl	8005ca8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3730      	adds	r7, #48	; 0x30
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	69b8      	ldr	r0, [r7, #24]
 8005cda:	f7ff ff05 	bl	8005ae8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	; 0x38
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xQueueGenericSend+0x32>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <xQueueGenericSend+0x40>
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <xQueueGenericSend+0x44>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <xQueueGenericSend+0x46>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <xQueueGenericSend+0x60>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSend+0x6e>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <xQueueGenericSend+0x72>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueGenericSend+0x74>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericSend+0x8e>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d7e:	f001 f9e7 	bl	8007150 <xTaskGetSchedulerState>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <xQueueGenericSend+0x9e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <xQueueGenericSend+0xa2>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueGenericSend+0xa4>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueGenericSend+0xbe>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	61fb      	str	r3, [r7, #28]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dae:	f001 ff29 	bl	8007c04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <xQueueGenericSend+0xd4>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d129      	bne.n	8005e18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dca:	f000 fa0b 	bl	80061e4 <prvCopyDataToQueue>
 8005dce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	3324      	adds	r3, #36	; 0x24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fff5 	bl	8006dcc <xTaskRemoveFromEventList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005de8:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <xQueueGenericSend+0x1f8>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	e00a      	b.n	8005e10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e00:	4b39      	ldr	r3, [pc, #228]	; (8005ee8 <xQueueGenericSend+0x1f8>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e10:	f001 ff28 	bl	8007c64 <vPortExitCritical>
				return pdPASS;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e063      	b.n	8005ee0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d103      	bne.n	8005e26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e1e:	f001 ff21 	bl	8007c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e05c      	b.n	8005ee0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 f82f 	bl	8006e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e3a:	f001 ff13 	bl	8007c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e3e:	f000 fd9b 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e42:	f001 fedf 	bl	8007c04 <vPortEnterCritical>
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e4c:	b25b      	sxtb	r3, r3
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d103      	bne.n	8005e5c <xQueueGenericSend+0x16c>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e62:	b25b      	sxtb	r3, r3
 8005e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e68:	d103      	bne.n	8005e72 <xQueueGenericSend+0x182>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e72:	f001 fef7 	bl	8007c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e76:	1d3a      	adds	r2, r7, #4
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 f81e 	bl	8006ec0 <xTaskCheckForTimeOut>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d124      	bne.n	8005ed4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e8c:	f000 faa2 	bl	80063d4 <prvIsQueueFull>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d018      	beq.n	8005ec8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	3310      	adds	r3, #16
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 ff44 	bl	8006d2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea6:	f000 fa2d 	bl	8006304 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005eaa:	f000 fd73 	bl	8006994 <xTaskResumeAll>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f47f af7c 	bne.w	8005dae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <xQueueGenericSend+0x1f8>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	e772      	b.n	8005dae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eca:	f000 fa1b 	bl	8006304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ece:	f000 fd61 	bl	8006994 <xTaskResumeAll>
 8005ed2:	e76c      	b.n	8005dae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ed6:	f000 fa15 	bl	8006304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005eda:	f000 fd5b 	bl	8006994 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3738      	adds	r7, #56	; 0x38
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b090      	sub	sp, #64	; 0x40
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <xQueueGenericSendFromISR+0x3c>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <xQueueGenericSendFromISR+0x40>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e000      	b.n	8005f2e <xQueueGenericSendFromISR+0x42>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d103      	bne.n	8005f56 <xQueueGenericSendFromISR+0x6a>
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <xQueueGenericSendFromISR+0x6e>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <xQueueGenericSendFromISR+0x70>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	623b      	str	r3, [r7, #32]
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f76:	f001 ff27 	bl	8007dc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	61fa      	str	r2, [r7, #28]
 8005f90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <xQueueGenericSendFromISR+0xbc>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d12f      	bne.n	8006008 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fbe:	f000 f911 	bl	80061e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d112      	bne.n	8005ff2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d016      	beq.n	8006002 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fef7 	bl	8006dcc <xTaskRemoveFromEventList>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00e      	beq.n	8006002 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e007      	b.n	8006002 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	b25a      	sxtb	r2, r3
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006002:	2301      	movs	r3, #1
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006006:	e001      	b.n	800600c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006008:	2300      	movs	r3, #0
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006016:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800601a:	4618      	mov	r0, r3
 800601c:	3740      	adds	r7, #64	; 0x40
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006030:	2300      	movs	r3, #0
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <xQueueReceive+0x30>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	623b      	str	r3, [r7, #32]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <xQueueReceive+0x3e>
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <xQueueReceive+0x42>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <xQueueReceive+0x44>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xQueueReceive+0x5e>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	61fb      	str	r3, [r7, #28]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006082:	f001 f865 	bl	8007150 <xTaskGetSchedulerState>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d102      	bne.n	8006092 <xQueueReceive+0x6e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueReceive+0x72>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueReceive+0x74>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueReceive+0x8e>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	61bb      	str	r3, [r7, #24]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060b2:	f001 fda7 	bl	8007c04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01f      	beq.n	8006102 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c6:	f000 f8f7 	bl	80062b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00f      	beq.n	80060fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	3310      	adds	r3, #16
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fe74 	bl	8006dcc <xTaskRemoveFromEventList>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060ea:	4b3d      	ldr	r3, [pc, #244]	; (80061e0 <xQueueReceive+0x1bc>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060fa:	f001 fdb3 	bl	8007c64 <vPortExitCritical>
				return pdPASS;
 80060fe:	2301      	movs	r3, #1
 8006100:	e069      	b.n	80061d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006108:	f001 fdac 	bl	8007c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
 800610e:	e062      	b.n	80061d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006116:	f107 0310 	add.w	r3, r7, #16
 800611a:	4618      	mov	r0, r3
 800611c:	f000 feba 	bl	8006e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006124:	f001 fd9e 	bl	8007c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006128:	f000 fc26 	bl	8006978 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612c:	f001 fd6a 	bl	8007c04 <vPortEnterCritical>
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006136:	b25b      	sxtb	r3, r3
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d103      	bne.n	8006146 <xQueueReceive+0x122>
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800614c:	b25b      	sxtb	r3, r3
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d103      	bne.n	800615c <xQueueReceive+0x138>
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800615c:	f001 fd82 	bl	8007c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006160:	1d3a      	adds	r2, r7, #4
 8006162:	f107 0310 	add.w	r3, r7, #16
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fea9 	bl	8006ec0 <xTaskCheckForTimeOut>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d123      	bne.n	80061bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f000 f917 	bl	80063a8 <prvIsQueueEmpty>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fdcf 	bl	8006d2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800618e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006190:	f000 f8b8 	bl	8006304 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006194:	f000 fbfe 	bl	8006994 <xTaskResumeAll>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d189      	bne.n	80060b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800619e:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xQueueReceive+0x1bc>)
 80061a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	e780      	b.n	80060b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b2:	f000 f8a7 	bl	8006304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061b6:	f000 fbed 	bl	8006994 <xTaskResumeAll>
 80061ba:	e77a      	b.n	80060b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061be:	f000 f8a1 	bl	8006304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061c2:	f000 fbe7 	bl	8006994 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c8:	f000 f8ee 	bl	80063a8 <prvIsQueueEmpty>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f43f af6f 	beq.w	80060b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	; 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000ed04 	.word	0xe000ed04

080061e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10d      	bne.n	800621e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d14d      	bne.n	80062a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 ffbc 	bl	800718c <xTaskPriorityDisinherit>
 8006214:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	e043      	b.n	80062a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d119      	bne.n	8006258 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6858      	ldr	r0, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	461a      	mov	r2, r3
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	f001 ff46 	bl	80080c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	441a      	add	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	d32b      	bcc.n	80062a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	e026      	b.n	80062a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68d8      	ldr	r0, [r3, #12]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	461a      	mov	r2, r3
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	f001 ff2c 	bl	80080c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	425b      	negs	r3, r3
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d207      	bcs.n	8006294 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	425b      	negs	r3, r3
 800628e:	441a      	add	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d105      	bne.n	80062a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062ae:	697b      	ldr	r3, [r7, #20]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	441a      	add	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d303      	bcc.n	80062ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68d9      	ldr	r1, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	461a      	mov	r2, r3
 80062f6:	6838      	ldr	r0, [r7, #0]
 80062f8:	f001 fee2 	bl	80080c0 <memcpy>
	}
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800630c:	f001 fc7a 	bl	8007c04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006316:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006318:	e011      	b.n	800633e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d012      	beq.n	8006348 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fd50 	bl	8006dcc <xTaskRemoveFromEventList>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006332:	f000 fe27 	bl	8006f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	3b01      	subs	r3, #1
 800633a:	b2db      	uxtb	r3, r3
 800633c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006342:	2b00      	cmp	r3, #0
 8006344:	dce9      	bgt.n	800631a <prvUnlockQueue+0x16>
 8006346:	e000      	b.n	800634a <prvUnlockQueue+0x46>
					break;
 8006348:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	22ff      	movs	r2, #255	; 0xff
 800634e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006352:	f001 fc87 	bl	8007c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006356:	f001 fc55 	bl	8007c04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006360:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006362:	e011      	b.n	8006388 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3310      	adds	r3, #16
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fd2b 	bl	8006dcc <xTaskRemoveFromEventList>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800637c:	f000 fe02 	bl	8006f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	3b01      	subs	r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800638c:	2b00      	cmp	r3, #0
 800638e:	dce9      	bgt.n	8006364 <prvUnlockQueue+0x60>
 8006390:	e000      	b.n	8006394 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006392:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	22ff      	movs	r2, #255	; 0xff
 8006398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800639c:	f001 fc62 	bl	8007c64 <vPortExitCritical>
}
 80063a0:	bf00      	nop
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063b0:	f001 fc28 	bl	8007c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	e001      	b.n	80063c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063c6:	f001 fc4d 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 80063ca:	68fb      	ldr	r3, [r7, #12]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063dc:	f001 fc12 	bl	8007c04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d102      	bne.n	80063f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e001      	b.n	80063f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063f6:	f001 fc35 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	e014      	b.n	800643e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006414:	4a0f      	ldr	r2, [pc, #60]	; (8006454 <vQueueAddToRegistry+0x50>)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006420:	490c      	ldr	r1, [pc, #48]	; (8006454 <vQueueAddToRegistry+0x50>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800642a:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <vQueueAddToRegistry+0x50>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	4413      	add	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006436:	e006      	b.n	8006446 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b07      	cmp	r3, #7
 8006442:	d9e7      	bls.n	8006414 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000db8 	.word	0x20000db8

08006458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006468:	f001 fbcc 	bl	8007c04 <vPortEnterCritical>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006472:	b25b      	sxtb	r3, r3
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d103      	bne.n	8006482 <vQueueWaitForMessageRestricted+0x2a>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006488:	b25b      	sxtb	r3, r3
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d103      	bne.n	8006498 <vQueueWaitForMessageRestricted+0x40>
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006498:	f001 fbe4 	bl	8007c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d106      	bne.n	80064b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fc61 	bl	8006d74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064b2:	6978      	ldr	r0, [r7, #20]
 80064b4:	f7ff ff26 	bl	8006304 <prvUnlockQueue>
	}
 80064b8:	bf00      	nop
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08e      	sub	sp, #56	; 0x38
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	623b      	str	r3, [r7, #32]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xTaskCreateStatic+0x46>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61fb      	str	r3, [r7, #28]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006506:	23a8      	movs	r3, #168	; 0xa8
 8006508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2ba8      	cmp	r3, #168	; 0xa8
 800650e:	d00a      	beq.n	8006526 <xTaskCreateStatic+0x66>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61bb      	str	r3, [r7, #24]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006526:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d01e      	beq.n	800656c <xTaskCreateStatic+0xac>
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800653c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2202      	movs	r2, #2
 8006542:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006546:	2300      	movs	r3, #0
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	9302      	str	r3, [sp, #8]
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f850 	bl	8006604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006566:	f000 f8f3 	bl	8006750 <prvAddNewTaskToReadyList>
 800656a:	e001      	b.n	8006570 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006570:	697b      	ldr	r3, [r7, #20]
	}
 8006572:	4618      	mov	r0, r3
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08c      	sub	sp, #48	; 0x30
 800657e:	af04      	add	r7, sp, #16
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fc5a 	bl	8007e48 <pvPortMalloc>
 8006594:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00e      	beq.n	80065ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800659c:	20a8      	movs	r0, #168	; 0xa8
 800659e:	f001 fc53 	bl	8007e48 <pvPortMalloc>
 80065a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
 80065b0:	e005      	b.n	80065be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065b2:	6978      	ldr	r0, [r7, #20]
 80065b4:	f001 fc8e 	bl	8007ed4 <vPortFree>
 80065b8:	e001      	b.n	80065be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9303      	str	r3, [sp, #12]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	9302      	str	r3, [sp, #8]
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f80e 	bl	8006604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065e8:	69f8      	ldr	r0, [r7, #28]
 80065ea:	f000 f8b1 	bl	8006750 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065ee:	2301      	movs	r3, #1
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	e002      	b.n	80065fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065f4:	f04f 33ff 	mov.w	r3, #4294967295
 80065f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065fa:	69bb      	ldr	r3, [r7, #24]
	}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	461a      	mov	r2, r3
 800661c:	21a5      	movs	r1, #165	; 0xa5
 800661e:	f001 fcc5 	bl	8007fac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800662c:	3b01      	subs	r3, #1
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	617b      	str	r3, [r7, #20]
}
 8006658:	bf00      	nop
 800665a:	e7fe      	b.n	800665a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01f      	beq.n	80066a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e012      	b.n	800668e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	7819      	ldrb	r1, [r3, #0]
 8006670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	3334      	adds	r3, #52	; 0x34
 8006678:	460a      	mov	r2, r1
 800667a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	3301      	adds	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b0f      	cmp	r3, #15
 8006692:	d9e9      	bls.n	8006668 <prvInitialiseNewTask+0x64>
 8006694:	e000      	b.n	8006698 <prvInitialiseNewTask+0x94>
			{
				break;
 8006696:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066a0:	e003      	b.n	80066aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	2b37      	cmp	r3, #55	; 0x37
 80066ae:	d901      	bls.n	80066b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066b0:	2337      	movs	r3, #55	; 0x37
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f978 	bl	80059c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	3318      	adds	r3, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff f973 	bl	80059c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	3354      	adds	r3, #84	; 0x54
 8006704:	224c      	movs	r2, #76	; 0x4c
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fc4f 	bl	8007fac <memset>
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	4a0c      	ldr	r2, [pc, #48]	; (8006744 <prvInitialiseNewTask+0x140>)
 8006712:	659a      	str	r2, [r3, #88]	; 0x58
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <prvInitialiseNewTask+0x144>)
 8006718:	65da      	str	r2, [r3, #92]	; 0x5c
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	4a0b      	ldr	r2, [pc, #44]	; (800674c <prvInitialiseNewTask+0x148>)
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	69b8      	ldr	r0, [r7, #24]
 8006726:	f001 f941 	bl	80079ac <pxPortInitialiseStack>
 800672a:	4602      	mov	r2, r0
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673c:	bf00      	nop
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20003434 	.word	0x20003434
 8006748:	2000349c 	.word	0x2000349c
 800674c:	20003504 	.word	0x20003504

08006750 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006758:	f001 fa54 	bl	8007c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800675c:	4b2d      	ldr	r3, [pc, #180]	; (8006814 <prvAddNewTaskToReadyList+0xc4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a2c      	ldr	r2, [pc, #176]	; (8006814 <prvAddNewTaskToReadyList+0xc4>)
 8006764:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006766:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800676e:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006774:	4b27      	ldr	r3, [pc, #156]	; (8006814 <prvAddNewTaskToReadyList+0xc4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d110      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800677c:	f000 fc26 	bl	8006fcc <prvInitialiseTaskLists>
 8006780:	e00d      	b.n	800679e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006782:	4b26      	ldr	r3, [pc, #152]	; (800681c <prvAddNewTaskToReadyList+0xcc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800678a:	4b23      	ldr	r3, [pc, #140]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	429a      	cmp	r2, r3
 8006796:	d802      	bhi.n	800679e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006798:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800679e:	4b20      	ldr	r3, [pc, #128]	; (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <prvAddNewTaskToReadyList+0xd0>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <prvAddNewTaskToReadyList+0xd4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <prvAddNewTaskToReadyList+0x74>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4a18      	ldr	r2, [pc, #96]	; (8006824 <prvAddNewTaskToReadyList+0xd4>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <prvAddNewTaskToReadyList+0xd8>)
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7ff f8fd 	bl	80059da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067e0:	f001 fa40 	bl	8007c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <prvAddNewTaskToReadyList+0xcc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <prvAddNewTaskToReadyList+0xc8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d207      	bcs.n	800680a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <prvAddNewTaskToReadyList+0xdc>)
 80067fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	200012cc 	.word	0x200012cc
 8006818:	20000df8 	.word	0x20000df8
 800681c:	200012d8 	.word	0x200012d8
 8006820:	200012e8 	.word	0x200012e8
 8006824:	200012d4 	.word	0x200012d4
 8006828:	20000dfc 	.word	0x20000dfc
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006842:	4b13      	ldr	r3, [pc, #76]	; (8006890 <vTaskDelay+0x60>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <vTaskDelay+0x30>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60bb      	str	r3, [r7, #8]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006860:	f000 f88a 	bl	8006978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fcfe 	bl	8007268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800686c:	f000 f892 	bl	8006994 <xTaskResumeAll>
 8006870:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006878:	4b06      	ldr	r3, [pc, #24]	; (8006894 <vTaskDelay+0x64>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200012f4 	.word	0x200012f4
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	; 0x28
 800689c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068a6:	463a      	mov	r2, r7
 80068a8:	1d39      	adds	r1, r7, #4
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff f832 	bl	8005918 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	9202      	str	r2, [sp, #8]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	460a      	mov	r2, r1
 80068c6:	4924      	ldr	r1, [pc, #144]	; (8006958 <vTaskStartScheduler+0xc0>)
 80068c8:	4824      	ldr	r0, [pc, #144]	; (800695c <vTaskStartScheduler+0xc4>)
 80068ca:	f7ff fdf9 	bl	80064c0 <xTaskCreateStatic>
 80068ce:	4603      	mov	r3, r0
 80068d0:	4a23      	ldr	r2, [pc, #140]	; (8006960 <vTaskStartScheduler+0xc8>)
 80068d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068d4:	4b22      	ldr	r3, [pc, #136]	; (8006960 <vTaskStartScheduler+0xc8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068dc:	2301      	movs	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e001      	b.n	80068e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d102      	bne.n	80068f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068ec:	f000 fd10 	bl	8007310 <xTimerCreateTimerTask>
 80068f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d11b      	bne.n	8006930 <vTaskStartScheduler+0x98>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	613b      	str	r3, [r7, #16]
}
 800690a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800690c:	4b15      	ldr	r3, [pc, #84]	; (8006964 <vTaskStartScheduler+0xcc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3354      	adds	r3, #84	; 0x54
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <vTaskStartScheduler+0xd0>)
 8006914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <vTaskStartScheduler+0xd4>)
 8006918:	f04f 32ff 	mov.w	r2, #4294967295
 800691c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800691e:	4b14      	ldr	r3, [pc, #80]	; (8006970 <vTaskStartScheduler+0xd8>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006924:	4b13      	ldr	r3, [pc, #76]	; (8006974 <vTaskStartScheduler+0xdc>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800692a:	f001 f8c9 	bl	8007ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800692e:	e00e      	b.n	800694e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d10a      	bne.n	800694e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <vTaskStartScheduler+0xb4>
}
 800694e:	bf00      	nop
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	08008a44 	.word	0x08008a44
 800695c:	08006f9d 	.word	0x08006f9d
 8006960:	200012f0 	.word	0x200012f0
 8006964:	20000df8 	.word	0x20000df8
 8006968:	2000007c 	.word	0x2000007c
 800696c:	200012ec 	.word	0x200012ec
 8006970:	200012d8 	.word	0x200012d8
 8006974:	200012d0 	.word	0x200012d0

08006978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <vTaskSuspendAll+0x18>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3301      	adds	r3, #1
 8006982:	4a03      	ldr	r2, [pc, #12]	; (8006990 <vTaskSuspendAll+0x18>)
 8006984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006986:	bf00      	nop
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	200012f4 	.word	0x200012f4

08006994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069a2:	4b42      	ldr	r3, [pc, #264]	; (8006aac <xTaskResumeAll+0x118>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	603b      	str	r3, [r7, #0]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069c0:	f001 f920 	bl	8007c04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069c4:	4b39      	ldr	r3, [pc, #228]	; (8006aac <xTaskResumeAll+0x118>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	4a38      	ldr	r2, [pc, #224]	; (8006aac <xTaskResumeAll+0x118>)
 80069cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069ce:	4b37      	ldr	r3, [pc, #220]	; (8006aac <xTaskResumeAll+0x118>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d162      	bne.n	8006a9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069d6:	4b36      	ldr	r3, [pc, #216]	; (8006ab0 <xTaskResumeAll+0x11c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d05e      	beq.n	8006a9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069de:	e02f      	b.n	8006a40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b34      	ldr	r3, [pc, #208]	; (8006ab4 <xTaskResumeAll+0x120>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3318      	adds	r3, #24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff f851 	bl	8005a94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff f84c 	bl	8005a94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a00:	4b2d      	ldr	r3, [pc, #180]	; (8006ab8 <xTaskResumeAll+0x124>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d903      	bls.n	8006a10 <xTaskResumeAll+0x7c>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	4a2a      	ldr	r2, [pc, #168]	; (8006ab8 <xTaskResumeAll+0x124>)
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4a27      	ldr	r2, [pc, #156]	; (8006abc <xTaskResumeAll+0x128>)
 8006a1e:	441a      	add	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fe ffd7 	bl	80059da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	4b23      	ldr	r3, [pc, #140]	; (8006ac0 <xTaskResumeAll+0x12c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d302      	bcc.n	8006a40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a3a:	4b22      	ldr	r3, [pc, #136]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a40:	4b1c      	ldr	r3, [pc, #112]	; (8006ab4 <xTaskResumeAll+0x120>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1cb      	bne.n	80069e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a4e:	f000 fb5f 	bl	8007110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a52:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <xTaskResumeAll+0x134>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a5e:	f000 f847 	bl	8006af0 <xTaskIncrementTick>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a68:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f1      	bne.n	8006a5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a7a:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <xTaskResumeAll+0x134>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a80:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <xTaskResumeAll+0x130>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTaskResumeAll+0x138>)
 8006a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a9c:	f001 f8e2 	bl	8007c64 <vPortExitCritical>

	return xAlreadyYielded;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200012f4 	.word	0x200012f4
 8006ab0:	200012cc 	.word	0x200012cc
 8006ab4:	2000128c 	.word	0x2000128c
 8006ab8:	200012d4 	.word	0x200012d4
 8006abc:	20000dfc 	.word	0x20000dfc
 8006ac0:	20000df8 	.word	0x20000df8
 8006ac4:	200012e0 	.word	0x200012e0
 8006ac8:	200012dc 	.word	0x200012dc
 8006acc:	e000ed04 	.word	0xe000ed04

08006ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <xTaskGetTickCount+0x1c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006adc:	687b      	ldr	r3, [r7, #4]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	200012d0 	.word	0x200012d0

08006af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afa:	4b4f      	ldr	r3, [pc, #316]	; (8006c38 <xTaskIncrementTick+0x148>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 808f 	bne.w	8006c22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b04:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <xTaskIncrementTick+0x14c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b0c:	4a4b      	ldr	r2, [pc, #300]	; (8006c3c <xTaskIncrementTick+0x14c>)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d120      	bne.n	8006b5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <xTaskIncrementTick+0x150>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	603b      	str	r3, [r7, #0]
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xTaskIncrementTick+0x46>
 8006b38:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <xTaskIncrementTick+0x150>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	4b41      	ldr	r3, [pc, #260]	; (8006c44 <xTaskIncrementTick+0x154>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3f      	ldr	r2, [pc, #252]	; (8006c40 <xTaskIncrementTick+0x150>)
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	4a3f      	ldr	r2, [pc, #252]	; (8006c44 <xTaskIncrementTick+0x154>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4b3e      	ldr	r3, [pc, #248]	; (8006c48 <xTaskIncrementTick+0x158>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	4a3d      	ldr	r2, [pc, #244]	; (8006c48 <xTaskIncrementTick+0x158>)
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	f000 fadb 	bl	8007110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b5a:	4b3c      	ldr	r3, [pc, #240]	; (8006c4c <xTaskIncrementTick+0x15c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d349      	bcc.n	8006bf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b64:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <xTaskIncrementTick+0x150>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b6e:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <xTaskIncrementTick+0x15c>)
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	601a      	str	r2, [r3, #0]
					break;
 8006b76:	e03f      	b.n	8006bf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b78:	4b31      	ldr	r3, [pc, #196]	; (8006c40 <xTaskIncrementTick+0x150>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d203      	bcs.n	8006b98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b90:	4a2e      	ldr	r2, [pc, #184]	; (8006c4c <xTaskIncrementTick+0x15c>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b96:	e02f      	b.n	8006bf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe ff79 	bl	8005a94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	3318      	adds	r3, #24
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe ff70 	bl	8005a94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <xTaskIncrementTick+0x160>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <xTaskIncrementTick+0xd8>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <xTaskIncrementTick+0x160>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <xTaskIncrementTick+0x164>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fefb 	bl	80059da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <xTaskIncrementTick+0x168>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d3b8      	bcc.n	8006b64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf6:	e7b5      	b.n	8006b64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bf8:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <xTaskIncrementTick+0x168>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4915      	ldr	r1, [pc, #84]	; (8006c54 <xTaskIncrementTick+0x164>)
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d901      	bls.n	8006c14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c10:	2301      	movs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <xTaskIncrementTick+0x16c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e004      	b.n	8006c2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <xTaskIncrementTick+0x170>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a0d      	ldr	r2, [pc, #52]	; (8006c60 <xTaskIncrementTick+0x170>)
 8006c2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c2c:	697b      	ldr	r3, [r7, #20]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200012f4 	.word	0x200012f4
 8006c3c:	200012d0 	.word	0x200012d0
 8006c40:	20001284 	.word	0x20001284
 8006c44:	20001288 	.word	0x20001288
 8006c48:	200012e4 	.word	0x200012e4
 8006c4c:	200012ec 	.word	0x200012ec
 8006c50:	200012d4 	.word	0x200012d4
 8006c54:	20000dfc 	.word	0x20000dfc
 8006c58:	20000df8 	.word	0x20000df8
 8006c5c:	200012e0 	.word	0x200012e0
 8006c60:	200012dc 	.word	0x200012dc

08006c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6a:	4b2a      	ldr	r3, [pc, #168]	; (8006d14 <vTaskSwitchContext+0xb0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c72:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <vTaskSwitchContext+0xb4>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c78:	e046      	b.n	8006d08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006c7a:	4b27      	ldr	r3, [pc, #156]	; (8006d18 <vTaskSwitchContext+0xb4>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c80:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <vTaskSwitchContext+0xb8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e010      	b.n	8006caa <vTaskSwitchContext+0x46>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <vTaskSwitchContext+0x3e>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	491d      	ldr	r1, [pc, #116]	; (8006d20 <vTaskSwitchContext+0xbc>)
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0e4      	beq.n	8006c88 <vTaskSwitchContext+0x24>
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <vTaskSwitchContext+0xbc>)
 8006cca:	4413      	add	r3, r2
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	605a      	str	r2, [r3, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d104      	bne.n	8006cee <vTaskSwitchContext+0x8a>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	4a0b      	ldr	r2, [pc, #44]	; (8006d24 <vTaskSwitchContext+0xc0>)
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <vTaskSwitchContext+0xb8>)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <vTaskSwitchContext+0xc0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3354      	adds	r3, #84	; 0x54
 8006d04:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <vTaskSwitchContext+0xc4>)
 8006d06:	6013      	str	r3, [r2, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	200012f4 	.word	0x200012f4
 8006d18:	200012e0 	.word	0x200012e0
 8006d1c:	200012d4 	.word	0x200012d4
 8006d20:	20000dfc 	.word	0x20000dfc
 8006d24:	20000df8 	.word	0x20000df8
 8006d28:	2000007c 	.word	0x2000007c

08006d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	60fb      	str	r3, [r7, #12]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <vTaskPlaceOnEventList+0x44>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3318      	adds	r3, #24
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fe fe61 	bl	8005a22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d60:	2101      	movs	r1, #1
 8006d62:	6838      	ldr	r0, [r7, #0]
 8006d64:	f000 fa80 	bl	8007268 <prvAddCurrentTaskToDelayedList>
}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000df8 	.word	0x20000df8

08006d74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	617b      	str	r3, [r7, #20]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3318      	adds	r3, #24
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7fe fe18 	bl	80059da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	68b8      	ldr	r0, [r7, #8]
 8006dba:	f000 fa55 	bl	8007268 <prvAddCurrentTaskToDelayedList>
	}
 8006dbe:	bf00      	nop
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000df8 	.word	0x20000df8

08006dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60fb      	str	r3, [r7, #12]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3318      	adds	r3, #24
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fe49 	bl	8005a94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <xTaskRemoveFromEventList+0xb0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d11d      	bne.n	8006e46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe fe40 	bl	8005a94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	4b19      	ldr	r3, [pc, #100]	; (8006e80 <xTaskRemoveFromEventList+0xb4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d903      	bls.n	8006e28 <xTaskRemoveFromEventList+0x5c>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <xTaskRemoveFromEventList+0xb4>)
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <xTaskRemoveFromEventList+0xb8>)
 8006e36:	441a      	add	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f7fe fdcb 	bl	80059da <vListInsertEnd>
 8006e44:	e005      	b.n	8006e52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3318      	adds	r3, #24
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	480e      	ldr	r0, [pc, #56]	; (8006e88 <xTaskRemoveFromEventList+0xbc>)
 8006e4e:	f7fe fdc4 	bl	80059da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <xTaskRemoveFromEventList+0xc0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d905      	bls.n	8006e6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e64:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <xTaskRemoveFromEventList+0xc4>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e001      	b.n	8006e70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e70:	697b      	ldr	r3, [r7, #20]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200012f4 	.word	0x200012f4
 8006e80:	200012d4 	.word	0x200012d4
 8006e84:	20000dfc 	.word	0x20000dfc
 8006e88:	2000128c 	.word	0x2000128c
 8006e8c:	20000df8 	.word	0x20000df8
 8006e90:	200012e0 	.word	0x200012e0

08006e94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <vTaskInternalSetTimeOutState+0x24>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <vTaskInternalSetTimeOutState+0x28>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	605a      	str	r2, [r3, #4]
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	200012e4 	.word	0x200012e4
 8006ebc:	200012d0 	.word	0x200012d0

08006ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	613b      	str	r3, [r7, #16]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f02:	f000 fe7f 	bl	8007c04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <xTaskCheckForTimeOut+0xbc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d102      	bne.n	8006f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61fb      	str	r3, [r7, #28]
 8006f24:	e023      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <xTaskCheckForTimeOut+0xc0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d007      	beq.n	8006f42 <xTaskCheckForTimeOut+0x82>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e015      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d20b      	bcs.n	8006f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff9b 	bl	8006e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	e004      	b.n	8006f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f000 fe79 	bl	8007c64 <vPortExitCritical>

	return xReturn;
 8006f72:	69fb      	ldr	r3, [r7, #28]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200012d0 	.word	0x200012d0
 8006f80:	200012e4 	.word	0x200012e4

08006f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f88:	4b03      	ldr	r3, [pc, #12]	; (8006f98 <vTaskMissedYield+0x14>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	200012e0 	.word	0x200012e0

08006f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fa4:	f000 f852 	bl	800704c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <prvIdleTask+0x28>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d9f9      	bls.n	8006fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <prvIdleTask+0x2c>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fc0:	e7f0      	b.n	8006fa4 <prvIdleTask+0x8>
 8006fc2:	bf00      	nop
 8006fc4:	20000dfc 	.word	0x20000dfc
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	e00c      	b.n	8006ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4a12      	ldr	r2, [pc, #72]	; (800702c <prvInitialiseTaskLists+0x60>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe fcca 	bl	8005980 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b37      	cmp	r3, #55	; 0x37
 8006ff6:	d9ef      	bls.n	8006fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ff8:	480d      	ldr	r0, [pc, #52]	; (8007030 <prvInitialiseTaskLists+0x64>)
 8006ffa:	f7fe fcc1 	bl	8005980 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ffe:	480d      	ldr	r0, [pc, #52]	; (8007034 <prvInitialiseTaskLists+0x68>)
 8007000:	f7fe fcbe 	bl	8005980 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007004:	480c      	ldr	r0, [pc, #48]	; (8007038 <prvInitialiseTaskLists+0x6c>)
 8007006:	f7fe fcbb 	bl	8005980 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800700a:	480c      	ldr	r0, [pc, #48]	; (800703c <prvInitialiseTaskLists+0x70>)
 800700c:	f7fe fcb8 	bl	8005980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007010:	480b      	ldr	r0, [pc, #44]	; (8007040 <prvInitialiseTaskLists+0x74>)
 8007012:	f7fe fcb5 	bl	8005980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007016:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <prvInitialiseTaskLists+0x78>)
 8007018:	4a05      	ldr	r2, [pc, #20]	; (8007030 <prvInitialiseTaskLists+0x64>)
 800701a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <prvInitialiseTaskLists+0x7c>)
 800701e:	4a05      	ldr	r2, [pc, #20]	; (8007034 <prvInitialiseTaskLists+0x68>)
 8007020:	601a      	str	r2, [r3, #0]
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000dfc 	.word	0x20000dfc
 8007030:	2000125c 	.word	0x2000125c
 8007034:	20001270 	.word	0x20001270
 8007038:	2000128c 	.word	0x2000128c
 800703c:	200012a0 	.word	0x200012a0
 8007040:	200012b8 	.word	0x200012b8
 8007044:	20001284 	.word	0x20001284
 8007048:	20001288 	.word	0x20001288

0800704c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007052:	e019      	b.n	8007088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007054:	f000 fdd6 	bl	8007c04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007058:	4b10      	ldr	r3, [pc, #64]	; (800709c <prvCheckTasksWaitingTermination+0x50>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fd15 	bl	8005a94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800706a:	4b0d      	ldr	r3, [pc, #52]	; (80070a0 <prvCheckTasksWaitingTermination+0x54>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3b01      	subs	r3, #1
 8007070:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <prvCheckTasksWaitingTermination+0x54>)
 8007072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 800707c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800707e:	f000 fdf1 	bl	8007c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f810 	bl	80070a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <prvCheckTasksWaitingTermination+0x58>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e1      	bne.n	8007054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200012a0 	.word	0x200012a0
 80070a0:	200012cc 	.word	0x200012cc
 80070a4:	200012b4 	.word	0x200012b4

080070a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3354      	adds	r3, #84	; 0x54
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 ff81 	bl	8007fbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d108      	bne.n	80070d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff03 	bl	8007ed4 <vPortFree>
				vPortFree( pxTCB );
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 ff00 	bl	8007ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070d4:	e018      	b.n	8007108 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d103      	bne.n	80070e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fef7 	bl	8007ed4 <vPortFree>
	}
 80070e6:	e00f      	b.n	8007108 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d00a      	beq.n	8007108 <prvDeleteTCB+0x60>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	60fb      	str	r3, [r7, #12]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <prvDeleteTCB+0x5e>
	}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <prvResetNextTaskUnblockTime+0x38>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <prvResetNextTaskUnblockTime+0x3c>)
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007128:	e008      	b.n	800713c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712a:	4b07      	ldr	r3, [pc, #28]	; (8007148 <prvResetNextTaskUnblockTime+0x38>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4a04      	ldr	r2, [pc, #16]	; (800714c <prvResetNextTaskUnblockTime+0x3c>)
 800713a:	6013      	str	r3, [r2, #0]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20001284 	.word	0x20001284
 800714c:	200012ec 	.word	0x200012ec

08007150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <xTaskGetSchedulerState+0x34>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d102      	bne.n	8007164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800715e:	2301      	movs	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	e008      	b.n	8007176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007164:	4b08      	ldr	r3, [pc, #32]	; (8007188 <xTaskGetSchedulerState+0x38>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800716c:	2302      	movs	r3, #2
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e001      	b.n	8007176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007172:	2300      	movs	r3, #0
 8007174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007176:	687b      	ldr	r3, [r7, #4]
	}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	200012d8 	.word	0x200012d8
 8007188:	200012f4 	.word	0x200012f4

0800718c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d056      	beq.n	8007250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a2:	4b2e      	ldr	r3, [pc, #184]	; (800725c <xTaskPriorityDisinherit+0xd0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d00a      	beq.n	80071c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60bb      	str	r3, [r7, #8]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d02c      	beq.n	8007250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d128      	bne.n	8007250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fc46 	bl	8005a94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <xTaskPriorityDisinherit+0xd4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d903      	bls.n	8007230 <xTaskPriorityDisinherit+0xa4>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a0c      	ldr	r2, [pc, #48]	; (8007260 <xTaskPriorityDisinherit+0xd4>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <xTaskPriorityDisinherit+0xd8>)
 800723e:	441a      	add	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fbc7 	bl	80059da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007250:	697b      	ldr	r3, [r7, #20]
	}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000df8 	.word	0x20000df8
 8007260:	200012d4 	.word	0x200012d4
 8007264:	20000dfc 	.word	0x20000dfc

08007268 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007278:	4b20      	ldr	r3, [pc, #128]	; (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3304      	adds	r3, #4
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fc08 	bl	8005a94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d10a      	bne.n	80072a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007292:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4819      	ldr	r0, [pc, #100]	; (8007300 <prvAddCurrentTaskToDelayedList+0x98>)
 800729c:	f7fe fb9d 	bl	80059da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072a0:	e026      	b.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d209      	bcs.n	80072ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fbab 	bl	8005a22 <vListInsert>
}
 80072cc:	e010      	b.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ce:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <prvAddCurrentTaskToDelayedList+0x94>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe fba1 	bl	8005a22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d202      	bcs.n	80072f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072ea:	4a08      	ldr	r2, [pc, #32]	; (800730c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	6013      	str	r3, [r2, #0]
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200012d0 	.word	0x200012d0
 80072fc:	20000df8 	.word	0x20000df8
 8007300:	200012b8 	.word	0x200012b8
 8007304:	20001288 	.word	0x20001288
 8007308:	20001284 	.word	0x20001284
 800730c:	200012ec 	.word	0x200012ec

08007310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800731a:	f000 fb07 	bl	800792c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800731e:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <xTimerCreateTimerTask+0x80>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d021      	beq.n	800736a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800732e:	1d3a      	adds	r2, r7, #4
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fb07 	bl	800594c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	9202      	str	r2, [sp, #8]
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	2302      	movs	r3, #2
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	2300      	movs	r3, #0
 800734e:	460a      	mov	r2, r1
 8007350:	4910      	ldr	r1, [pc, #64]	; (8007394 <xTimerCreateTimerTask+0x84>)
 8007352:	4811      	ldr	r0, [pc, #68]	; (8007398 <xTimerCreateTimerTask+0x88>)
 8007354:	f7ff f8b4 	bl	80064c0 <xTaskCreateStatic>
 8007358:	4603      	mov	r3, r0
 800735a:	4a10      	ldr	r2, [pc, #64]	; (800739c <xTimerCreateTimerTask+0x8c>)
 800735c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <xTimerCreateTimerTask+0x8c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007366:	2301      	movs	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	613b      	str	r3, [r7, #16]
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007386:	697b      	ldr	r3, [r7, #20]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20001328 	.word	0x20001328
 8007394:	08008a4c 	.word	0x08008a4c
 8007398:	080074d5 	.word	0x080074d5
 800739c:	2000132c 	.word	0x2000132c

080073a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	623b      	str	r3, [r7, #32]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073ce:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <xTimerGenericCommand+0x98>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d02a      	beq.n	800742c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	dc18      	bgt.n	800741a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073e8:	f7ff feb2 	bl	8007150 <xTaskGetSchedulerState>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d109      	bne.n	8007406 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073f2:	4b11      	ldr	r3, [pc, #68]	; (8007438 <xTimerGenericCommand+0x98>)
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f107 0110 	add.w	r1, r7, #16
 80073fa:	2300      	movs	r3, #0
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	f7fe fc77 	bl	8005cf0 <xQueueGenericSend>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24
 8007404:	e012      	b.n	800742c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <xTimerGenericCommand+0x98>)
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	f107 0110 	add.w	r1, r7, #16
 800740e:	2300      	movs	r3, #0
 8007410:	2200      	movs	r2, #0
 8007412:	f7fe fc6d 	bl	8005cf0 <xQueueGenericSend>
 8007416:	6278      	str	r0, [r7, #36]	; 0x24
 8007418:	e008      	b.n	800742c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <xTimerGenericCommand+0x98>)
 800741c:	6818      	ldr	r0, [r3, #0]
 800741e:	f107 0110 	add.w	r1, r7, #16
 8007422:	2300      	movs	r3, #0
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	f7fe fd61 	bl	8005eec <xQueueGenericSendFromISR>
 800742a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800742e:	4618      	mov	r0, r3
 8007430:	3728      	adds	r7, #40	; 0x28
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20001328 	.word	0x20001328

0800743c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af02      	add	r7, sp, #8
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <prvProcessExpiredTimer+0x94>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	3304      	adds	r3, #4
 8007454:	4618      	mov	r0, r3
 8007456:	f7fe fb1d 	bl	8005a94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d022      	beq.n	80074ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	699a      	ldr	r2, [r3, #24]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	18d1      	adds	r1, r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	6978      	ldr	r0, [r7, #20]
 8007476:	f000 f8d1 	bl	800761c <prvInsertTimerInActiveList>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01f      	beq.n	80074c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007480:	2300      	movs	r3, #0
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	2100      	movs	r1, #0
 800748a:	6978      	ldr	r0, [r7, #20]
 800748c:	f7ff ff88 	bl	80073a0 <xTimerGenericCommand>
 8007490:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d113      	bne.n	80074c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	60fb      	str	r3, [r7, #12]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	6978      	ldr	r0, [r7, #20]
 80074c6:	4798      	blx	r3
}
 80074c8:	bf00      	nop
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20001320 	.word	0x20001320

080074d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f857 	bl	8007594 <prvGetNextExpireTime>
 80074e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f803 	bl	80074f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074f2:	f000 f8d5 	bl	80076a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074f6:	e7f1      	b.n	80074dc <prvTimerTask+0x8>

080074f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007502:	f7ff fa39 	bl	8006978 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f866 	bl	80075dc <prvSampleTimeNow>
 8007510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d130      	bne.n	800757a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <prvProcessTimerOrBlockTask+0x3c>
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	429a      	cmp	r2, r3
 8007524:	d806      	bhi.n	8007534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007526:	f7ff fa35 	bl	8006994 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff85 	bl	800743c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007532:	e024      	b.n	800757e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800753a:	4b13      	ldr	r3, [pc, #76]	; (8007588 <prvProcessTimerOrBlockTask+0x90>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <prvProcessTimerOrBlockTask+0x50>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <prvProcessTimerOrBlockTask+0x52>
 8007548:	2300      	movs	r3, #0
 800754a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800754c:	4b0f      	ldr	r3, [pc, #60]	; (800758c <prvProcessTimerOrBlockTask+0x94>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	f7fe ff7d 	bl	8006458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800755e:	f7ff fa19 	bl	8006994 <xTaskResumeAll>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <prvProcessTimerOrBlockTask+0x98>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
}
 8007578:	e001      	b.n	800757e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800757a:	f7ff fa0b 	bl	8006994 <xTaskResumeAll>
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20001324 	.word	0x20001324
 800758c:	20001328 	.word	0x20001328
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800759c:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <prvGetNextExpireTime+0x44>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <prvGetNextExpireTime+0x16>
 80075a6:	2201      	movs	r2, #1
 80075a8:	e000      	b.n	80075ac <prvGetNextExpireTime+0x18>
 80075aa:	2200      	movs	r2, #0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <prvGetNextExpireTime+0x44>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e001      	b.n	80075c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075c8:	68fb      	ldr	r3, [r7, #12]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20001320 	.word	0x20001320

080075dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075e4:	f7ff fa74 	bl	8006ad0 <xTaskGetTickCount>
 80075e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <prvSampleTimeNow+0x3c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d205      	bcs.n	8007600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075f4:	f000 f936 	bl	8007864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e002      	b.n	8007606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007606:	4a04      	ldr	r2, [pc, #16]	; (8007618 <prvSampleTimeNow+0x3c>)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20001330 	.word	0x20001330

0800761c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d812      	bhi.n	8007668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	d302      	bcc.n	8007656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e01b      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007656:	4b10      	ldr	r3, [pc, #64]	; (8007698 <prvInsertTimerInActiveList+0x7c>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fe f9de 	bl	8005a22 <vListInsert>
 8007666:	e012      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d206      	bcs.n	800767e <prvInsertTimerInActiveList+0x62>
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	e007      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <prvInsertTimerInActiveList+0x80>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fe f9ca 	bl	8005a22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800768e:	697b      	ldr	r3, [r7, #20]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20001324 	.word	0x20001324
 800769c:	20001320 	.word	0x20001320

080076a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08e      	sub	sp, #56	; 0x38
 80076a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076a6:	e0ca      	b.n	800783e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da18      	bge.n	80076e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	3304      	adds	r3, #4
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	61fb      	str	r3, [r7, #28]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d6:	6850      	ldr	r0, [r2, #4]
 80076d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076da:	6892      	ldr	r2, [r2, #8]
 80076dc:	4611      	mov	r1, r2
 80076de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f2c0 80ab 	blt.w	800783e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	3304      	adds	r3, #4
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe f9cb 	bl	8005a94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076fe:	463b      	mov	r3, r7
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff ff6b 	bl	80075dc <prvSampleTimeNow>
 8007706:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b09      	cmp	r3, #9
 800770c:	f200 8096 	bhi.w	800783c <prvProcessReceivedCommands+0x19c>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <prvProcessReceivedCommands+0x78>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007741 	.word	0x08007741
 800771c:	08007741 	.word	0x08007741
 8007720:	08007741 	.word	0x08007741
 8007724:	080077b5 	.word	0x080077b5
 8007728:	080077c9 	.word	0x080077c9
 800772c:	08007813 	.word	0x08007813
 8007730:	08007741 	.word	0x08007741
 8007734:	08007741 	.word	0x08007741
 8007738:	080077b5 	.word	0x080077b5
 800773c:	080077c9 	.word	0x080077c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	18d1      	adds	r1, r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007760:	f7ff ff5c 	bl	800761c <prvInsertTimerInActiveList>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d069      	beq.n	800783e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05e      	beq.n	800783e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	441a      	add	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	2300      	movs	r3, #0
 800778e:	2100      	movs	r1, #0
 8007790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007792:	f7ff fe05 	bl	80073a0 <xTimerGenericCommand>
 8007796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d14f      	bne.n	800783e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	61bb      	str	r3, [r7, #24]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ba:	f023 0301 	bic.w	r3, r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80077c6:	e03a      	b.n	800783e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	617b      	str	r3, [r7, #20]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	18d1      	adds	r1, r2, r3
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800780c:	f7ff ff06 	bl	800761c <prvInsertTimerInActiveList>
					break;
 8007810:	e015      	b.n	800783e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007822:	f000 fb57 	bl	8007ed4 <vPortFree>
 8007826:	e00a      	b.n	800783e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	b2da      	uxtb	r2, r3
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800783a:	e000      	b.n	800783e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800783c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800783e:	4b08      	ldr	r3, [pc, #32]	; (8007860 <prvProcessReceivedCommands+0x1c0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	1d39      	adds	r1, r7, #4
 8007844:	2200      	movs	r2, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fbec 	bl	8006024 <xQueueReceive>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f af2a 	bne.w	80076a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	3730      	adds	r7, #48	; 0x30
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20001328 	.word	0x20001328

08007864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800786a:	e048      	b.n	80078fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800786c:	4b2d      	ldr	r3, [pc, #180]	; (8007924 <prvSwitchTimerLists+0xc0>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007876:	4b2b      	ldr	r3, [pc, #172]	; (8007924 <prvSwitchTimerLists+0xc0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3304      	adds	r3, #4
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe f905 	bl	8005a94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d02e      	beq.n	80078fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4413      	add	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d90e      	bls.n	80078d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <prvSwitchTimerLists+0xc0>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7fe f8aa 	bl	8005a22 <vListInsert>
 80078ce:	e016      	b.n	80078fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078d0:	2300      	movs	r3, #0
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f7ff fd60 	bl	80073a0 <xTimerGenericCommand>
 80078e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	603b      	str	r3, [r7, #0]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078fe:	4b09      	ldr	r3, [pc, #36]	; (8007924 <prvSwitchTimerLists+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1b1      	bne.n	800786c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <prvSwitchTimerLists+0xc0>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <prvSwitchTimerLists+0xc4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a04      	ldr	r2, [pc, #16]	; (8007924 <prvSwitchTimerLists+0xc0>)
 8007914:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007916:	4a04      	ldr	r2, [pc, #16]	; (8007928 <prvSwitchTimerLists+0xc4>)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	6013      	str	r3, [r2, #0]
}
 800791c:	bf00      	nop
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20001320 	.word	0x20001320
 8007928:	20001324 	.word	0x20001324

0800792c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007932:	f000 f967 	bl	8007c04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007936:	4b15      	ldr	r3, [pc, #84]	; (800798c <prvCheckForValidListAndQueue+0x60>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d120      	bne.n	8007980 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800793e:	4814      	ldr	r0, [pc, #80]	; (8007990 <prvCheckForValidListAndQueue+0x64>)
 8007940:	f7fe f81e 	bl	8005980 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007944:	4813      	ldr	r0, [pc, #76]	; (8007994 <prvCheckForValidListAndQueue+0x68>)
 8007946:	f7fe f81b 	bl	8005980 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800794a:	4b13      	ldr	r3, [pc, #76]	; (8007998 <prvCheckForValidListAndQueue+0x6c>)
 800794c:	4a10      	ldr	r2, [pc, #64]	; (8007990 <prvCheckForValidListAndQueue+0x64>)
 800794e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007950:	4b12      	ldr	r3, [pc, #72]	; (800799c <prvCheckForValidListAndQueue+0x70>)
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <prvCheckForValidListAndQueue+0x68>)
 8007954:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007956:	2300      	movs	r3, #0
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <prvCheckForValidListAndQueue+0x74>)
 800795c:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <prvCheckForValidListAndQueue+0x78>)
 800795e:	2110      	movs	r1, #16
 8007960:	200a      	movs	r0, #10
 8007962:	f7fe f929 	bl	8005bb8 <xQueueGenericCreateStatic>
 8007966:	4603      	mov	r3, r0
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <prvCheckForValidListAndQueue+0x60>)
 800796a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <prvCheckForValidListAndQueue+0x60>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <prvCheckForValidListAndQueue+0x60>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	490b      	ldr	r1, [pc, #44]	; (80079a8 <prvCheckForValidListAndQueue+0x7c>)
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fd42 	bl	8006404 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007980:	f000 f970 	bl	8007c64 <vPortExitCritical>
}
 8007984:	bf00      	nop
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20001328 	.word	0x20001328
 8007990:	200012f8 	.word	0x200012f8
 8007994:	2000130c 	.word	0x2000130c
 8007998:	20001320 	.word	0x20001320
 800799c:	20001324 	.word	0x20001324
 80079a0:	200013d4 	.word	0x200013d4
 80079a4:	20001334 	.word	0x20001334
 80079a8:	08008a54 	.word	0x08008a54

080079ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3b04      	subs	r3, #4
 80079bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b04      	subs	r3, #4
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 0201 	bic.w	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3b04      	subs	r3, #4
 80079da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079dc:	4a0c      	ldr	r2, [pc, #48]	; (8007a10 <pxPortInitialiseStack+0x64>)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3b14      	subs	r3, #20
 80079e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3b04      	subs	r3, #4
 80079f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f06f 0202 	mvn.w	r2, #2
 80079fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3b20      	subs	r3, #32
 8007a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a02:	68fb      	ldr	r3, [r7, #12]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	08007a15 	.word	0x08007a15

08007a14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <prvTaskExitError+0x54>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d00a      	beq.n	8007a3e <prvTaskExitError+0x2a>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	60fb      	str	r3, [r7, #12]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <prvTaskExitError+0x28>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60bb      	str	r3, [r7, #8]
}
 8007a50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a52:	bf00      	nop
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0fc      	beq.n	8007a54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	2000002c 	.word	0x2000002c
 8007a6c:	00000000 	.word	0x00000000

08007a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <pxCurrentTCBConst2>)
 8007a72:	6819      	ldr	r1, [r3, #0]
 8007a74:	6808      	ldr	r0, [r1, #0]
 8007a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7a:	f380 8809 	msr	PSP, r0
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8811 	msr	BASEPRI, r0
 8007a8a:	4770      	bx	lr
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst2>:
 8007a90:	20000df8 	.word	0x20000df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a98:	4808      	ldr	r0, [pc, #32]	; (8007abc <prvPortStartFirstTask+0x24>)
 8007a9a:	6800      	ldr	r0, [r0, #0]
 8007a9c:	6800      	ldr	r0, [r0, #0]
 8007a9e:	f380 8808 	msr	MSP, r0
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8814 	msr	CONTROL, r0
 8007aaa:	b662      	cpsie	i
 8007aac:	b661      	cpsie	f
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	df00      	svc	0
 8007ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aba:	bf00      	nop
 8007abc:	e000ed08 	.word	0xe000ed08

08007ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ac6:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <xPortStartScheduler+0x120>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a46      	ldr	r2, [pc, #280]	; (8007be4 <xPortStartScheduler+0x124>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10a      	bne.n	8007ae6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	613b      	str	r3, [r7, #16]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ae6:	4b3e      	ldr	r3, [pc, #248]	; (8007be0 <xPortStartScheduler+0x120>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a3f      	ldr	r2, [pc, #252]	; (8007be8 <xPortStartScheduler+0x128>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10a      	bne.n	8007b06 <xPortStartScheduler+0x46>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	60fb      	str	r3, [r7, #12]
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b06:	4b39      	ldr	r3, [pc, #228]	; (8007bec <xPortStartScheduler+0x12c>)
 8007b08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	22ff      	movs	r2, #255	; 0xff
 8007b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	4b31      	ldr	r3, [pc, #196]	; (8007bf0 <xPortStartScheduler+0x130>)
 8007b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b2e:	4b31      	ldr	r3, [pc, #196]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b30:	2207      	movs	r2, #7
 8007b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b34:	e009      	b.n	8007b4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b36:	4b2f      	ldr	r3, [pc, #188]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	4a2d      	ldr	r2, [pc, #180]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b80      	cmp	r3, #128	; 0x80
 8007b54:	d0ef      	beq.n	8007b36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f1c3 0307 	rsb	r3, r3, #7
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d00a      	beq.n	8007b78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60bb      	str	r3, [r7, #8]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b78:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b82:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <xPortStartScheduler+0x134>)
 8007b8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b96:	4b18      	ldr	r3, [pc, #96]	; (8007bf8 <xPortStartScheduler+0x138>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <xPortStartScheduler+0x138>)
 8007b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ba2:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <xPortStartScheduler+0x138>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <xPortStartScheduler+0x138>)
 8007ba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bae:	f000 f8dd 	bl	8007d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bb2:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <xPortStartScheduler+0x13c>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bb8:	f000 f8fc 	bl	8007db4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bbc:	4b10      	ldr	r3, [pc, #64]	; (8007c00 <xPortStartScheduler+0x140>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a0f      	ldr	r2, [pc, #60]	; (8007c00 <xPortStartScheduler+0x140>)
 8007bc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bc8:	f7ff ff66 	bl	8007a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bcc:	f7ff f84a 	bl	8006c64 <vTaskSwitchContext>
	prvTaskExitError();
 8007bd0:	f7ff ff20 	bl	8007a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	e000ed00 	.word	0xe000ed00
 8007be4:	410fc271 	.word	0x410fc271
 8007be8:	410fc270 	.word	0x410fc270
 8007bec:	e000e400 	.word	0xe000e400
 8007bf0:	20001424 	.word	0x20001424
 8007bf4:	20001428 	.word	0x20001428
 8007bf8:	e000ed20 	.word	0xe000ed20
 8007bfc:	2000002c 	.word	0x2000002c
 8007c00:	e000ef34 	.word	0xe000ef34

08007c04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	607b      	str	r3, [r7, #4]
}
 8007c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <vPortEnterCritical+0x58>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	4a0d      	ldr	r2, [pc, #52]	; (8007c5c <vPortEnterCritical+0x58>)
 8007c26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <vPortEnterCritical+0x58>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10f      	bne.n	8007c50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <vPortEnterCritical+0x5c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	603b      	str	r3, [r7, #0]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <vPortEnterCritical+0x4a>
	}
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	2000002c 	.word	0x2000002c
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <vPortExitCritical+0x50>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10a      	bne.n	8007c88 <vPortExitCritical+0x24>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	607b      	str	r3, [r7, #4]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <vPortExitCritical+0x50>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4a09      	ldr	r2, [pc, #36]	; (8007cb4 <vPortExitCritical+0x50>)
 8007c90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c92:	4b08      	ldr	r3, [pc, #32]	; (8007cb4 <vPortExitCritical+0x50>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d105      	bne.n	8007ca6 <vPortExitCritical+0x42>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f383 8811 	msr	BASEPRI, r3
}
 8007ca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	2000002c 	.word	0x2000002c
	...

08007cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cc0:	f3ef 8009 	mrs	r0, PSP
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <pxCurrentTCBConst>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	f01e 0f10 	tst.w	lr, #16
 8007cd0:	bf08      	it	eq
 8007cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cda:	6010      	str	r0, [r2, #0]
 8007cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ce4:	f380 8811 	msr	BASEPRI, r0
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f7fe ffb8 	bl	8006c64 <vTaskSwitchContext>
 8007cf4:	f04f 0000 	mov.w	r0, #0
 8007cf8:	f380 8811 	msr	BASEPRI, r0
 8007cfc:	bc09      	pop	{r0, r3}
 8007cfe:	6819      	ldr	r1, [r3, #0]
 8007d00:	6808      	ldr	r0, [r1, #0]
 8007d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d06:	f01e 0f10 	tst.w	lr, #16
 8007d0a:	bf08      	it	eq
 8007d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d10:	f380 8809 	msr	PSP, r0
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w

08007d20 <pxCurrentTCBConst>:
 8007d20:	20000df8 	.word	0x20000df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d42:	f7fe fed5 	bl	8006af0 <xTaskIncrementTick>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <xPortSysTickHandler+0x40>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	f383 8811 	msr	BASEPRI, r3
}
 8007d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <vPortSetupTimerInterrupt+0x34>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d76:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <vPortSetupTimerInterrupt+0x38>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <vPortSetupTimerInterrupt+0x3c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <vPortSetupTimerInterrupt+0x40>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	4a09      	ldr	r2, [pc, #36]	; (8007db0 <vPortSetupTimerInterrupt+0x44>)
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <vPortSetupTimerInterrupt+0x34>)
 8007d90:	2207      	movs	r2, #7
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	e000e010 	.word	0xe000e010
 8007da4:	e000e018 	.word	0xe000e018
 8007da8:	20000018 	.word	0x20000018
 8007dac:	10624dd3 	.word	0x10624dd3
 8007db0:	e000e014 	.word	0xe000e014

08007db4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007db4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007dc4 <vPortEnableVFP+0x10>
 8007db8:	6801      	ldr	r1, [r0, #0]
 8007dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dbe:	6001      	str	r1, [r0, #0]
 8007dc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dc2:	bf00      	nop
 8007dc4:	e000ed88 	.word	0xe000ed88

08007dc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dce:	f3ef 8305 	mrs	r3, IPSR
 8007dd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b0f      	cmp	r3, #15
 8007dd8:	d914      	bls.n	8007e04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <vPortValidateInterruptPriority+0x70>)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007de4:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <vPortValidateInterruptPriority+0x74>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	7afa      	ldrb	r2, [r7, #11]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d20a      	bcs.n	8007e04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	607b      	str	r3, [r7, #4]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e04:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <vPortValidateInterruptPriority+0x78>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <vPortValidateInterruptPriority+0x7c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d90a      	bls.n	8007e2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	603b      	str	r3, [r7, #0]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <vPortValidateInterruptPriority+0x60>
	}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	e000e3f0 	.word	0xe000e3f0
 8007e3c:	20001424 	.word	0x20001424
 8007e40:	e000ed0c 	.word	0xe000ed0c
 8007e44:	20001428 	.word	0x20001428

08007e48 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d004      	beq.n	8007e68 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f023 0307 	bic.w	r3, r3, #7
 8007e64:	3308      	adds	r3, #8
 8007e66:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8007e68:	f7fe fd86 	bl	8006978 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8007e6c:	4b16      	ldr	r3, [pc, #88]	; (8007ec8 <pvPortMalloc+0x80>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d105      	bne.n	8007e80 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <pvPortMalloc+0x84>)
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <pvPortMalloc+0x80>)
 8007e7e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007e80:	4b13      	ldr	r3, [pc, #76]	; (8007ed0 <pvPortMalloc+0x88>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d813      	bhi.n	8007eb8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <pvPortMalloc+0x88>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	441a      	add	r2, r3
 8007e98:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <pvPortMalloc+0x88>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d90b      	bls.n	8007eb8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007ea0:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <pvPortMalloc+0x80>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <pvPortMalloc+0x88>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <pvPortMalloc+0x88>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	4a06      	ldr	r2, [pc, #24]	; (8007ed0 <pvPortMalloc+0x88>)
 8007eb6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eb8:	f7fe fd6c 	bl	8006994 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20003430 	.word	0x20003430
 8007ecc:	20001434 	.word	0x20001434
 8007ed0:	2000342c 	.word	0x2000342c

08007ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <vPortFree+0x24>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60fb      	str	r3, [r7, #12]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <vPortFree+0x22>
}
 8007ef8:	bf00      	nop
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <sniprintf>:
 8007f04:	b40c      	push	{r2, r3}
 8007f06:	b530      	push	{r4, r5, lr}
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <sniprintf+0x64>)
 8007f0a:	1e0c      	subs	r4, r1, #0
 8007f0c:	681d      	ldr	r5, [r3, #0]
 8007f0e:	b09d      	sub	sp, #116	; 0x74
 8007f10:	da08      	bge.n	8007f24 <sniprintf+0x20>
 8007f12:	238b      	movs	r3, #139	; 0x8b
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	b01d      	add	sp, #116	; 0x74
 8007f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f20:	b002      	add	sp, #8
 8007f22:	4770      	bx	lr
 8007f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f2c:	bf14      	ite	ne
 8007f2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f32:	4623      	moveq	r3, r4
 8007f34:	9304      	str	r3, [sp, #16]
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f3c:	9002      	str	r0, [sp, #8]
 8007f3e:	9006      	str	r0, [sp, #24]
 8007f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f46:	ab21      	add	r3, sp, #132	; 0x84
 8007f48:	a902      	add	r1, sp, #8
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	f000 fa17 	bl	8008380 <_svfiprintf_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	bfbc      	itt	lt
 8007f56:	238b      	movlt	r3, #139	; 0x8b
 8007f58:	602b      	strlt	r3, [r5, #0]
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	d0dd      	beq.n	8007f1a <sniprintf+0x16>
 8007f5e:	9b02      	ldr	r3, [sp, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e7d9      	b.n	8007f1a <sniprintf+0x16>
 8007f66:	bf00      	nop
 8007f68:	2000007c 	.word	0x2000007c

08007f6c <siprintf>:
 8007f6c:	b40e      	push	{r1, r2, r3}
 8007f6e:	b500      	push	{lr}
 8007f70:	b09c      	sub	sp, #112	; 0x70
 8007f72:	ab1d      	add	r3, sp, #116	; 0x74
 8007f74:	9002      	str	r0, [sp, #8]
 8007f76:	9006      	str	r0, [sp, #24]
 8007f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f7c:	4809      	ldr	r0, [pc, #36]	; (8007fa4 <siprintf+0x38>)
 8007f7e:	9107      	str	r1, [sp, #28]
 8007f80:	9104      	str	r1, [sp, #16]
 8007f82:	4909      	ldr	r1, [pc, #36]	; (8007fa8 <siprintf+0x3c>)
 8007f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f88:	9105      	str	r1, [sp, #20]
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	a902      	add	r1, sp, #8
 8007f90:	f000 f9f6 	bl	8008380 <_svfiprintf_r>
 8007f94:	9b02      	ldr	r3, [sp, #8]
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	b01c      	add	sp, #112	; 0x70
 8007f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fa0:	b003      	add	sp, #12
 8007fa2:	4770      	bx	lr
 8007fa4:	2000007c 	.word	0x2000007c
 8007fa8:	ffff0208 	.word	0xffff0208

08007fac <memset>:
 8007fac:	4402      	add	r2, r0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d100      	bne.n	8007fb6 <memset+0xa>
 8007fb4:	4770      	bx	lr
 8007fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fba:	e7f9      	b.n	8007fb0 <memset+0x4>

08007fbc <_reclaim_reent>:
 8007fbc:	4b29      	ldr	r3, [pc, #164]	; (8008064 <_reclaim_reent+0xa8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	b570      	push	{r4, r5, r6, lr}
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	d04b      	beq.n	8008060 <_reclaim_reent+0xa4>
 8007fc8:	69c3      	ldr	r3, [r0, #28]
 8007fca:	b143      	cbz	r3, 8007fde <_reclaim_reent+0x22>
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d144      	bne.n	800805c <_reclaim_reent+0xa0>
 8007fd2:	69e3      	ldr	r3, [r4, #28]
 8007fd4:	6819      	ldr	r1, [r3, #0]
 8007fd6:	b111      	cbz	r1, 8007fde <_reclaim_reent+0x22>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f87f 	bl	80080dc <_free_r>
 8007fde:	6961      	ldr	r1, [r4, #20]
 8007fe0:	b111      	cbz	r1, 8007fe8 <_reclaim_reent+0x2c>
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 f87a 	bl	80080dc <_free_r>
 8007fe8:	69e1      	ldr	r1, [r4, #28]
 8007fea:	b111      	cbz	r1, 8007ff2 <_reclaim_reent+0x36>
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f875 	bl	80080dc <_free_r>
 8007ff2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007ff4:	b111      	cbz	r1, 8007ffc <_reclaim_reent+0x40>
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 f870 	bl	80080dc <_free_r>
 8007ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ffe:	b111      	cbz	r1, 8008006 <_reclaim_reent+0x4a>
 8008000:	4620      	mov	r0, r4
 8008002:	f000 f86b 	bl	80080dc <_free_r>
 8008006:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008008:	b111      	cbz	r1, 8008010 <_reclaim_reent+0x54>
 800800a:	4620      	mov	r0, r4
 800800c:	f000 f866 	bl	80080dc <_free_r>
 8008010:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008012:	b111      	cbz	r1, 800801a <_reclaim_reent+0x5e>
 8008014:	4620      	mov	r0, r4
 8008016:	f000 f861 	bl	80080dc <_free_r>
 800801a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800801c:	b111      	cbz	r1, 8008024 <_reclaim_reent+0x68>
 800801e:	4620      	mov	r0, r4
 8008020:	f000 f85c 	bl	80080dc <_free_r>
 8008024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008026:	b111      	cbz	r1, 800802e <_reclaim_reent+0x72>
 8008028:	4620      	mov	r0, r4
 800802a:	f000 f857 	bl	80080dc <_free_r>
 800802e:	6a23      	ldr	r3, [r4, #32]
 8008030:	b1b3      	cbz	r3, 8008060 <_reclaim_reent+0xa4>
 8008032:	4620      	mov	r0, r4
 8008034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008038:	4718      	bx	r3
 800803a:	5949      	ldr	r1, [r1, r5]
 800803c:	b941      	cbnz	r1, 8008050 <_reclaim_reent+0x94>
 800803e:	3504      	adds	r5, #4
 8008040:	69e3      	ldr	r3, [r4, #28]
 8008042:	2d80      	cmp	r5, #128	; 0x80
 8008044:	68d9      	ldr	r1, [r3, #12]
 8008046:	d1f8      	bne.n	800803a <_reclaim_reent+0x7e>
 8008048:	4620      	mov	r0, r4
 800804a:	f000 f847 	bl	80080dc <_free_r>
 800804e:	e7c0      	b.n	8007fd2 <_reclaim_reent+0x16>
 8008050:	680e      	ldr	r6, [r1, #0]
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f842 	bl	80080dc <_free_r>
 8008058:	4631      	mov	r1, r6
 800805a:	e7ef      	b.n	800803c <_reclaim_reent+0x80>
 800805c:	2500      	movs	r5, #0
 800805e:	e7ef      	b.n	8008040 <_reclaim_reent+0x84>
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	bf00      	nop
 8008064:	2000007c 	.word	0x2000007c

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000007c 	.word	0x2000007c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 fc6a 	bl	8008960 <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	08009300 	.word	0x08009300
 80080b0:	08009300 	.word	0x08009300
 80080b4:	08009300 	.word	0x08009300
 80080b8:	08009304 	.word	0x08009304

080080bc <__retarget_lock_acquire_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_release_recursive>:
 80080be:	4770      	bx	lr

080080c0 <memcpy>:
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c8:	d100      	bne.n	80080cc <memcpy+0xc>
 80080ca:	4770      	bx	lr
 80080cc:	b510      	push	{r4, lr}
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d1f9      	bne.n	80080ce <memcpy+0xe>
 80080da:	bd10      	pop	{r4, pc}

080080dc <_free_r>:
 80080dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080de:	2900      	cmp	r1, #0
 80080e0:	d044      	beq.n	800816c <_free_r+0x90>
 80080e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e6:	9001      	str	r0, [sp, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f1a1 0404 	sub.w	r4, r1, #4
 80080ee:	bfb8      	it	lt
 80080f0:	18e4      	addlt	r4, r4, r3
 80080f2:	f000 f8df 	bl	80082b4 <__malloc_lock>
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <_free_r+0x94>)
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	b933      	cbnz	r3, 800810c <_free_r+0x30>
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	6014      	str	r4, [r2, #0]
 8008102:	b003      	add	sp, #12
 8008104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008108:	f000 b8da 	b.w	80082c0 <__malloc_unlock>
 800810c:	42a3      	cmp	r3, r4
 800810e:	d908      	bls.n	8008122 <_free_r+0x46>
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	1961      	adds	r1, r4, r5
 8008114:	428b      	cmp	r3, r1
 8008116:	bf01      	itttt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	1949      	addeq	r1, r1, r5
 800811e:	6021      	streq	r1, [r4, #0]
 8008120:	e7ed      	b.n	80080fe <_free_r+0x22>
 8008122:	461a      	mov	r2, r3
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	b10b      	cbz	r3, 800812c <_free_r+0x50>
 8008128:	42a3      	cmp	r3, r4
 800812a:	d9fa      	bls.n	8008122 <_free_r+0x46>
 800812c:	6811      	ldr	r1, [r2, #0]
 800812e:	1855      	adds	r5, r2, r1
 8008130:	42a5      	cmp	r5, r4
 8008132:	d10b      	bne.n	800814c <_free_r+0x70>
 8008134:	6824      	ldr	r4, [r4, #0]
 8008136:	4421      	add	r1, r4
 8008138:	1854      	adds	r4, r2, r1
 800813a:	42a3      	cmp	r3, r4
 800813c:	6011      	str	r1, [r2, #0]
 800813e:	d1e0      	bne.n	8008102 <_free_r+0x26>
 8008140:	681c      	ldr	r4, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	6053      	str	r3, [r2, #4]
 8008146:	440c      	add	r4, r1
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	e7da      	b.n	8008102 <_free_r+0x26>
 800814c:	d902      	bls.n	8008154 <_free_r+0x78>
 800814e:	230c      	movs	r3, #12
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	e7d6      	b.n	8008102 <_free_r+0x26>
 8008154:	6825      	ldr	r5, [r4, #0]
 8008156:	1961      	adds	r1, r4, r5
 8008158:	428b      	cmp	r3, r1
 800815a:	bf04      	itt	eq
 800815c:	6819      	ldreq	r1, [r3, #0]
 800815e:	685b      	ldreq	r3, [r3, #4]
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	bf04      	itt	eq
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	6054      	str	r4, [r2, #4]
 800816a:	e7ca      	b.n	8008102 <_free_r+0x26>
 800816c:	b003      	add	sp, #12
 800816e:	bd30      	pop	{r4, r5, pc}
 8008170:	20003574 	.word	0x20003574

08008174 <sbrk_aligned>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4e0e      	ldr	r6, [pc, #56]	; (80081b0 <sbrk_aligned+0x3c>)
 8008178:	460c      	mov	r4, r1
 800817a:	6831      	ldr	r1, [r6, #0]
 800817c:	4605      	mov	r5, r0
 800817e:	b911      	cbnz	r1, 8008186 <sbrk_aligned+0x12>
 8008180:	f000 fba6 	bl	80088d0 <_sbrk_r>
 8008184:	6030      	str	r0, [r6, #0]
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 fba1 	bl	80088d0 <_sbrk_r>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	d00a      	beq.n	80081a8 <sbrk_aligned+0x34>
 8008192:	1cc4      	adds	r4, r0, #3
 8008194:	f024 0403 	bic.w	r4, r4, #3
 8008198:	42a0      	cmp	r0, r4
 800819a:	d007      	beq.n	80081ac <sbrk_aligned+0x38>
 800819c:	1a21      	subs	r1, r4, r0
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 fb96 	bl	80088d0 <_sbrk_r>
 80081a4:	3001      	adds	r0, #1
 80081a6:	d101      	bne.n	80081ac <sbrk_aligned+0x38>
 80081a8:	f04f 34ff 	mov.w	r4, #4294967295
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	20003578 	.word	0x20003578

080081b4 <_malloc_r>:
 80081b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b8:	1ccd      	adds	r5, r1, #3
 80081ba:	f025 0503 	bic.w	r5, r5, #3
 80081be:	3508      	adds	r5, #8
 80081c0:	2d0c      	cmp	r5, #12
 80081c2:	bf38      	it	cc
 80081c4:	250c      	movcc	r5, #12
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	4607      	mov	r7, r0
 80081ca:	db01      	blt.n	80081d0 <_malloc_r+0x1c>
 80081cc:	42a9      	cmp	r1, r5
 80081ce:	d905      	bls.n	80081dc <_malloc_r+0x28>
 80081d0:	230c      	movs	r3, #12
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	2600      	movs	r6, #0
 80081d6:	4630      	mov	r0, r6
 80081d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082b0 <_malloc_r+0xfc>
 80081e0:	f000 f868 	bl	80082b4 <__malloc_lock>
 80081e4:	f8d8 3000 	ldr.w	r3, [r8]
 80081e8:	461c      	mov	r4, r3
 80081ea:	bb5c      	cbnz	r4, 8008244 <_malloc_r+0x90>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4638      	mov	r0, r7
 80081f0:	f7ff ffc0 	bl	8008174 <sbrk_aligned>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	4604      	mov	r4, r0
 80081f8:	d155      	bne.n	80082a6 <_malloc_r+0xf2>
 80081fa:	f8d8 4000 	ldr.w	r4, [r8]
 80081fe:	4626      	mov	r6, r4
 8008200:	2e00      	cmp	r6, #0
 8008202:	d145      	bne.n	8008290 <_malloc_r+0xdc>
 8008204:	2c00      	cmp	r4, #0
 8008206:	d048      	beq.n	800829a <_malloc_r+0xe6>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	4631      	mov	r1, r6
 800820c:	4638      	mov	r0, r7
 800820e:	eb04 0903 	add.w	r9, r4, r3
 8008212:	f000 fb5d 	bl	80088d0 <_sbrk_r>
 8008216:	4581      	cmp	r9, r0
 8008218:	d13f      	bne.n	800829a <_malloc_r+0xe6>
 800821a:	6821      	ldr	r1, [r4, #0]
 800821c:	1a6d      	subs	r5, r5, r1
 800821e:	4629      	mov	r1, r5
 8008220:	4638      	mov	r0, r7
 8008222:	f7ff ffa7 	bl	8008174 <sbrk_aligned>
 8008226:	3001      	adds	r0, #1
 8008228:	d037      	beq.n	800829a <_malloc_r+0xe6>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	442b      	add	r3, r5
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	f8d8 3000 	ldr.w	r3, [r8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d038      	beq.n	80082aa <_malloc_r+0xf6>
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	42a2      	cmp	r2, r4
 800823c:	d12b      	bne.n	8008296 <_malloc_r+0xe2>
 800823e:	2200      	movs	r2, #0
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	e00f      	b.n	8008264 <_malloc_r+0xb0>
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	1b52      	subs	r2, r2, r5
 8008248:	d41f      	bmi.n	800828a <_malloc_r+0xd6>
 800824a:	2a0b      	cmp	r2, #11
 800824c:	d917      	bls.n	800827e <_malloc_r+0xca>
 800824e:	1961      	adds	r1, r4, r5
 8008250:	42a3      	cmp	r3, r4
 8008252:	6025      	str	r5, [r4, #0]
 8008254:	bf18      	it	ne
 8008256:	6059      	strne	r1, [r3, #4]
 8008258:	6863      	ldr	r3, [r4, #4]
 800825a:	bf08      	it	eq
 800825c:	f8c8 1000 	streq.w	r1, [r8]
 8008260:	5162      	str	r2, [r4, r5]
 8008262:	604b      	str	r3, [r1, #4]
 8008264:	4638      	mov	r0, r7
 8008266:	f104 060b 	add.w	r6, r4, #11
 800826a:	f000 f829 	bl	80082c0 <__malloc_unlock>
 800826e:	f026 0607 	bic.w	r6, r6, #7
 8008272:	1d23      	adds	r3, r4, #4
 8008274:	1af2      	subs	r2, r6, r3
 8008276:	d0ae      	beq.n	80081d6 <_malloc_r+0x22>
 8008278:	1b9b      	subs	r3, r3, r6
 800827a:	50a3      	str	r3, [r4, r2]
 800827c:	e7ab      	b.n	80081d6 <_malloc_r+0x22>
 800827e:	42a3      	cmp	r3, r4
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	d1dd      	bne.n	8008240 <_malloc_r+0x8c>
 8008284:	f8c8 2000 	str.w	r2, [r8]
 8008288:	e7ec      	b.n	8008264 <_malloc_r+0xb0>
 800828a:	4623      	mov	r3, r4
 800828c:	6864      	ldr	r4, [r4, #4]
 800828e:	e7ac      	b.n	80081ea <_malloc_r+0x36>
 8008290:	4634      	mov	r4, r6
 8008292:	6876      	ldr	r6, [r6, #4]
 8008294:	e7b4      	b.n	8008200 <_malloc_r+0x4c>
 8008296:	4613      	mov	r3, r2
 8008298:	e7cc      	b.n	8008234 <_malloc_r+0x80>
 800829a:	230c      	movs	r3, #12
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	4638      	mov	r0, r7
 80082a0:	f000 f80e 	bl	80082c0 <__malloc_unlock>
 80082a4:	e797      	b.n	80081d6 <_malloc_r+0x22>
 80082a6:	6025      	str	r5, [r4, #0]
 80082a8:	e7dc      	b.n	8008264 <_malloc_r+0xb0>
 80082aa:	605b      	str	r3, [r3, #4]
 80082ac:	deff      	udf	#255	; 0xff
 80082ae:	bf00      	nop
 80082b0:	20003574 	.word	0x20003574

080082b4 <__malloc_lock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__malloc_lock+0x8>)
 80082b6:	f7ff bf01 	b.w	80080bc <__retarget_lock_acquire_recursive>
 80082ba:	bf00      	nop
 80082bc:	20003570 	.word	0x20003570

080082c0 <__malloc_unlock>:
 80082c0:	4801      	ldr	r0, [pc, #4]	; (80082c8 <__malloc_unlock+0x8>)
 80082c2:	f7ff befc 	b.w	80080be <__retarget_lock_release_recursive>
 80082c6:	bf00      	nop
 80082c8:	20003570 	.word	0x20003570

080082cc <__ssputs_r>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	688e      	ldr	r6, [r1, #8]
 80082d2:	461f      	mov	r7, r3
 80082d4:	42be      	cmp	r6, r7
 80082d6:	680b      	ldr	r3, [r1, #0]
 80082d8:	4682      	mov	sl, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	4690      	mov	r8, r2
 80082de:	d82c      	bhi.n	800833a <__ssputs_r+0x6e>
 80082e0:	898a      	ldrh	r2, [r1, #12]
 80082e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082e6:	d026      	beq.n	8008336 <__ssputs_r+0x6a>
 80082e8:	6965      	ldr	r5, [r4, #20]
 80082ea:	6909      	ldr	r1, [r1, #16]
 80082ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082f0:	eba3 0901 	sub.w	r9, r3, r1
 80082f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082f8:	1c7b      	adds	r3, r7, #1
 80082fa:	444b      	add	r3, r9
 80082fc:	106d      	asrs	r5, r5, #1
 80082fe:	429d      	cmp	r5, r3
 8008300:	bf38      	it	cc
 8008302:	461d      	movcc	r5, r3
 8008304:	0553      	lsls	r3, r2, #21
 8008306:	d527      	bpl.n	8008358 <__ssputs_r+0x8c>
 8008308:	4629      	mov	r1, r5
 800830a:	f7ff ff53 	bl	80081b4 <_malloc_r>
 800830e:	4606      	mov	r6, r0
 8008310:	b360      	cbz	r0, 800836c <__ssputs_r+0xa0>
 8008312:	6921      	ldr	r1, [r4, #16]
 8008314:	464a      	mov	r2, r9
 8008316:	f7ff fed3 	bl	80080c0 <memcpy>
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	6126      	str	r6, [r4, #16]
 8008328:	6165      	str	r5, [r4, #20]
 800832a:	444e      	add	r6, r9
 800832c:	eba5 0509 	sub.w	r5, r5, r9
 8008330:	6026      	str	r6, [r4, #0]
 8008332:	60a5      	str	r5, [r4, #8]
 8008334:	463e      	mov	r6, r7
 8008336:	42be      	cmp	r6, r7
 8008338:	d900      	bls.n	800833c <__ssputs_r+0x70>
 800833a:	463e      	mov	r6, r7
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	4632      	mov	r2, r6
 8008340:	4641      	mov	r1, r8
 8008342:	f000 faab 	bl	800889c <memmove>
 8008346:	68a3      	ldr	r3, [r4, #8]
 8008348:	1b9b      	subs	r3, r3, r6
 800834a:	60a3      	str	r3, [r4, #8]
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	4433      	add	r3, r6
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	2000      	movs	r0, #0
 8008354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008358:	462a      	mov	r2, r5
 800835a:	f000 fac9 	bl	80088f0 <_realloc_r>
 800835e:	4606      	mov	r6, r0
 8008360:	2800      	cmp	r0, #0
 8008362:	d1e0      	bne.n	8008326 <__ssputs_r+0x5a>
 8008364:	6921      	ldr	r1, [r4, #16]
 8008366:	4650      	mov	r0, sl
 8008368:	f7ff feb8 	bl	80080dc <_free_r>
 800836c:	230c      	movs	r3, #12
 800836e:	f8ca 3000 	str.w	r3, [sl]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	e7e9      	b.n	8008354 <__ssputs_r+0x88>

08008380 <_svfiprintf_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4698      	mov	r8, r3
 8008386:	898b      	ldrh	r3, [r1, #12]
 8008388:	061b      	lsls	r3, r3, #24
 800838a:	b09d      	sub	sp, #116	; 0x74
 800838c:	4607      	mov	r7, r0
 800838e:	460d      	mov	r5, r1
 8008390:	4614      	mov	r4, r2
 8008392:	d50e      	bpl.n	80083b2 <_svfiprintf_r+0x32>
 8008394:	690b      	ldr	r3, [r1, #16]
 8008396:	b963      	cbnz	r3, 80083b2 <_svfiprintf_r+0x32>
 8008398:	2140      	movs	r1, #64	; 0x40
 800839a:	f7ff ff0b 	bl	80081b4 <_malloc_r>
 800839e:	6028      	str	r0, [r5, #0]
 80083a0:	6128      	str	r0, [r5, #16]
 80083a2:	b920      	cbnz	r0, 80083ae <_svfiprintf_r+0x2e>
 80083a4:	230c      	movs	r3, #12
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	e0d0      	b.n	8008550 <_svfiprintf_r+0x1d0>
 80083ae:	2340      	movs	r3, #64	; 0x40
 80083b0:	616b      	str	r3, [r5, #20]
 80083b2:	2300      	movs	r3, #0
 80083b4:	9309      	str	r3, [sp, #36]	; 0x24
 80083b6:	2320      	movs	r3, #32
 80083b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083c0:	2330      	movs	r3, #48	; 0x30
 80083c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008568 <_svfiprintf_r+0x1e8>
 80083c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ca:	f04f 0901 	mov.w	r9, #1
 80083ce:	4623      	mov	r3, r4
 80083d0:	469a      	mov	sl, r3
 80083d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d6:	b10a      	cbz	r2, 80083dc <_svfiprintf_r+0x5c>
 80083d8:	2a25      	cmp	r2, #37	; 0x25
 80083da:	d1f9      	bne.n	80083d0 <_svfiprintf_r+0x50>
 80083dc:	ebba 0b04 	subs.w	fp, sl, r4
 80083e0:	d00b      	beq.n	80083fa <_svfiprintf_r+0x7a>
 80083e2:	465b      	mov	r3, fp
 80083e4:	4622      	mov	r2, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	4638      	mov	r0, r7
 80083ea:	f7ff ff6f 	bl	80082cc <__ssputs_r>
 80083ee:	3001      	adds	r0, #1
 80083f0:	f000 80a9 	beq.w	8008546 <_svfiprintf_r+0x1c6>
 80083f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f6:	445a      	add	r2, fp
 80083f8:	9209      	str	r2, [sp, #36]	; 0x24
 80083fa:	f89a 3000 	ldrb.w	r3, [sl]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f000 80a1 	beq.w	8008546 <_svfiprintf_r+0x1c6>
 8008404:	2300      	movs	r3, #0
 8008406:	f04f 32ff 	mov.w	r2, #4294967295
 800840a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800840e:	f10a 0a01 	add.w	sl, sl, #1
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	9307      	str	r3, [sp, #28]
 8008416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800841a:	931a      	str	r3, [sp, #104]	; 0x68
 800841c:	4654      	mov	r4, sl
 800841e:	2205      	movs	r2, #5
 8008420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008424:	4850      	ldr	r0, [pc, #320]	; (8008568 <_svfiprintf_r+0x1e8>)
 8008426:	f7f7 fed3 	bl	80001d0 <memchr>
 800842a:	9a04      	ldr	r2, [sp, #16]
 800842c:	b9d8      	cbnz	r0, 8008466 <_svfiprintf_r+0xe6>
 800842e:	06d0      	lsls	r0, r2, #27
 8008430:	bf44      	itt	mi
 8008432:	2320      	movmi	r3, #32
 8008434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008438:	0711      	lsls	r1, r2, #28
 800843a:	bf44      	itt	mi
 800843c:	232b      	movmi	r3, #43	; 0x2b
 800843e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008442:	f89a 3000 	ldrb.w	r3, [sl]
 8008446:	2b2a      	cmp	r3, #42	; 0x2a
 8008448:	d015      	beq.n	8008476 <_svfiprintf_r+0xf6>
 800844a:	9a07      	ldr	r2, [sp, #28]
 800844c:	4654      	mov	r4, sl
 800844e:	2000      	movs	r0, #0
 8008450:	f04f 0c0a 	mov.w	ip, #10
 8008454:	4621      	mov	r1, r4
 8008456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800845a:	3b30      	subs	r3, #48	; 0x30
 800845c:	2b09      	cmp	r3, #9
 800845e:	d94d      	bls.n	80084fc <_svfiprintf_r+0x17c>
 8008460:	b1b0      	cbz	r0, 8008490 <_svfiprintf_r+0x110>
 8008462:	9207      	str	r2, [sp, #28]
 8008464:	e014      	b.n	8008490 <_svfiprintf_r+0x110>
 8008466:	eba0 0308 	sub.w	r3, r0, r8
 800846a:	fa09 f303 	lsl.w	r3, r9, r3
 800846e:	4313      	orrs	r3, r2
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	46a2      	mov	sl, r4
 8008474:	e7d2      	b.n	800841c <_svfiprintf_r+0x9c>
 8008476:	9b03      	ldr	r3, [sp, #12]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	9103      	str	r1, [sp, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfbb      	ittet	lt
 8008482:	425b      	neglt	r3, r3
 8008484:	f042 0202 	orrlt.w	r2, r2, #2
 8008488:	9307      	strge	r3, [sp, #28]
 800848a:	9307      	strlt	r3, [sp, #28]
 800848c:	bfb8      	it	lt
 800848e:	9204      	strlt	r2, [sp, #16]
 8008490:	7823      	ldrb	r3, [r4, #0]
 8008492:	2b2e      	cmp	r3, #46	; 0x2e
 8008494:	d10c      	bne.n	80084b0 <_svfiprintf_r+0x130>
 8008496:	7863      	ldrb	r3, [r4, #1]
 8008498:	2b2a      	cmp	r3, #42	; 0x2a
 800849a:	d134      	bne.n	8008506 <_svfiprintf_r+0x186>
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	1d1a      	adds	r2, r3, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	9203      	str	r2, [sp, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bfb8      	it	lt
 80084a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ac:	3402      	adds	r4, #2
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008578 <_svfiprintf_r+0x1f8>
 80084b4:	7821      	ldrb	r1, [r4, #0]
 80084b6:	2203      	movs	r2, #3
 80084b8:	4650      	mov	r0, sl
 80084ba:	f7f7 fe89 	bl	80001d0 <memchr>
 80084be:	b138      	cbz	r0, 80084d0 <_svfiprintf_r+0x150>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	eba0 000a 	sub.w	r0, r0, sl
 80084c6:	2240      	movs	r2, #64	; 0x40
 80084c8:	4082      	lsls	r2, r0
 80084ca:	4313      	orrs	r3, r2
 80084cc:	3401      	adds	r4, #1
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d4:	4825      	ldr	r0, [pc, #148]	; (800856c <_svfiprintf_r+0x1ec>)
 80084d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084da:	2206      	movs	r2, #6
 80084dc:	f7f7 fe78 	bl	80001d0 <memchr>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d038      	beq.n	8008556 <_svfiprintf_r+0x1d6>
 80084e4:	4b22      	ldr	r3, [pc, #136]	; (8008570 <_svfiprintf_r+0x1f0>)
 80084e6:	bb1b      	cbnz	r3, 8008530 <_svfiprintf_r+0x1b0>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	3307      	adds	r3, #7
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f6:	4433      	add	r3, r6
 80084f8:	9309      	str	r3, [sp, #36]	; 0x24
 80084fa:	e768      	b.n	80083ce <_svfiprintf_r+0x4e>
 80084fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008500:	460c      	mov	r4, r1
 8008502:	2001      	movs	r0, #1
 8008504:	e7a6      	b.n	8008454 <_svfiprintf_r+0xd4>
 8008506:	2300      	movs	r3, #0
 8008508:	3401      	adds	r4, #1
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 0c0a 	mov.w	ip, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008518:	3a30      	subs	r2, #48	; 0x30
 800851a:	2a09      	cmp	r2, #9
 800851c:	d903      	bls.n	8008526 <_svfiprintf_r+0x1a6>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0c6      	beq.n	80084b0 <_svfiprintf_r+0x130>
 8008522:	9105      	str	r1, [sp, #20]
 8008524:	e7c4      	b.n	80084b0 <_svfiprintf_r+0x130>
 8008526:	fb0c 2101 	mla	r1, ip, r1, r2
 800852a:	4604      	mov	r4, r0
 800852c:	2301      	movs	r3, #1
 800852e:	e7f0      	b.n	8008512 <_svfiprintf_r+0x192>
 8008530:	ab03      	add	r3, sp, #12
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	462a      	mov	r2, r5
 8008536:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <_svfiprintf_r+0x1f4>)
 8008538:	a904      	add	r1, sp, #16
 800853a:	4638      	mov	r0, r7
 800853c:	f3af 8000 	nop.w
 8008540:	1c42      	adds	r2, r0, #1
 8008542:	4606      	mov	r6, r0
 8008544:	d1d6      	bne.n	80084f4 <_svfiprintf_r+0x174>
 8008546:	89ab      	ldrh	r3, [r5, #12]
 8008548:	065b      	lsls	r3, r3, #25
 800854a:	f53f af2d 	bmi.w	80083a8 <_svfiprintf_r+0x28>
 800854e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008550:	b01d      	add	sp, #116	; 0x74
 8008552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008556:	ab03      	add	r3, sp, #12
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	462a      	mov	r2, r5
 800855c:	4b05      	ldr	r3, [pc, #20]	; (8008574 <_svfiprintf_r+0x1f4>)
 800855e:	a904      	add	r1, sp, #16
 8008560:	4638      	mov	r0, r7
 8008562:	f000 f879 	bl	8008658 <_printf_i>
 8008566:	e7eb      	b.n	8008540 <_svfiprintf_r+0x1c0>
 8008568:	080092c4 	.word	0x080092c4
 800856c:	080092ce 	.word	0x080092ce
 8008570:	00000000 	.word	0x00000000
 8008574:	080082cd 	.word	0x080082cd
 8008578:	080092ca 	.word	0x080092ca

0800857c <_printf_common>:
 800857c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008580:	4616      	mov	r6, r2
 8008582:	4699      	mov	r9, r3
 8008584:	688a      	ldr	r2, [r1, #8]
 8008586:	690b      	ldr	r3, [r1, #16]
 8008588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800858c:	4293      	cmp	r3, r2
 800858e:	bfb8      	it	lt
 8008590:	4613      	movlt	r3, r2
 8008592:	6033      	str	r3, [r6, #0]
 8008594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008598:	4607      	mov	r7, r0
 800859a:	460c      	mov	r4, r1
 800859c:	b10a      	cbz	r2, 80085a2 <_printf_common+0x26>
 800859e:	3301      	adds	r3, #1
 80085a0:	6033      	str	r3, [r6, #0]
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	0699      	lsls	r1, r3, #26
 80085a6:	bf42      	ittt	mi
 80085a8:	6833      	ldrmi	r3, [r6, #0]
 80085aa:	3302      	addmi	r3, #2
 80085ac:	6033      	strmi	r3, [r6, #0]
 80085ae:	6825      	ldr	r5, [r4, #0]
 80085b0:	f015 0506 	ands.w	r5, r5, #6
 80085b4:	d106      	bne.n	80085c4 <_printf_common+0x48>
 80085b6:	f104 0a19 	add.w	sl, r4, #25
 80085ba:	68e3      	ldr	r3, [r4, #12]
 80085bc:	6832      	ldr	r2, [r6, #0]
 80085be:	1a9b      	subs	r3, r3, r2
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dc26      	bgt.n	8008612 <_printf_common+0x96>
 80085c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085c8:	1e13      	subs	r3, r2, #0
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	bf18      	it	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	0692      	lsls	r2, r2, #26
 80085d2:	d42b      	bmi.n	800862c <_printf_common+0xb0>
 80085d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085d8:	4649      	mov	r1, r9
 80085da:	4638      	mov	r0, r7
 80085dc:	47c0      	blx	r8
 80085de:	3001      	adds	r0, #1
 80085e0:	d01e      	beq.n	8008620 <_printf_common+0xa4>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	f003 0306 	and.w	r3, r3, #6
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	bf02      	ittt	eq
 80085ee:	68e5      	ldreq	r5, [r4, #12]
 80085f0:	6833      	ldreq	r3, [r6, #0]
 80085f2:	1aed      	subeq	r5, r5, r3
 80085f4:	68a3      	ldr	r3, [r4, #8]
 80085f6:	bf0c      	ite	eq
 80085f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085fc:	2500      	movne	r5, #0
 80085fe:	4293      	cmp	r3, r2
 8008600:	bfc4      	itt	gt
 8008602:	1a9b      	subgt	r3, r3, r2
 8008604:	18ed      	addgt	r5, r5, r3
 8008606:	2600      	movs	r6, #0
 8008608:	341a      	adds	r4, #26
 800860a:	42b5      	cmp	r5, r6
 800860c:	d11a      	bne.n	8008644 <_printf_common+0xc8>
 800860e:	2000      	movs	r0, #0
 8008610:	e008      	b.n	8008624 <_printf_common+0xa8>
 8008612:	2301      	movs	r3, #1
 8008614:	4652      	mov	r2, sl
 8008616:	4649      	mov	r1, r9
 8008618:	4638      	mov	r0, r7
 800861a:	47c0      	blx	r8
 800861c:	3001      	adds	r0, #1
 800861e:	d103      	bne.n	8008628 <_printf_common+0xac>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	3501      	adds	r5, #1
 800862a:	e7c6      	b.n	80085ba <_printf_common+0x3e>
 800862c:	18e1      	adds	r1, r4, r3
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	2030      	movs	r0, #48	; 0x30
 8008632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008636:	4422      	add	r2, r4
 8008638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800863c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008640:	3302      	adds	r3, #2
 8008642:	e7c7      	b.n	80085d4 <_printf_common+0x58>
 8008644:	2301      	movs	r3, #1
 8008646:	4622      	mov	r2, r4
 8008648:	4649      	mov	r1, r9
 800864a:	4638      	mov	r0, r7
 800864c:	47c0      	blx	r8
 800864e:	3001      	adds	r0, #1
 8008650:	d0e6      	beq.n	8008620 <_printf_common+0xa4>
 8008652:	3601      	adds	r6, #1
 8008654:	e7d9      	b.n	800860a <_printf_common+0x8e>
	...

08008658 <_printf_i>:
 8008658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	7e0f      	ldrb	r7, [r1, #24]
 800865e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008660:	2f78      	cmp	r7, #120	; 0x78
 8008662:	4691      	mov	r9, r2
 8008664:	4680      	mov	r8, r0
 8008666:	460c      	mov	r4, r1
 8008668:	469a      	mov	sl, r3
 800866a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800866e:	d807      	bhi.n	8008680 <_printf_i+0x28>
 8008670:	2f62      	cmp	r7, #98	; 0x62
 8008672:	d80a      	bhi.n	800868a <_printf_i+0x32>
 8008674:	2f00      	cmp	r7, #0
 8008676:	f000 80d4 	beq.w	8008822 <_printf_i+0x1ca>
 800867a:	2f58      	cmp	r7, #88	; 0x58
 800867c:	f000 80c0 	beq.w	8008800 <_printf_i+0x1a8>
 8008680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008688:	e03a      	b.n	8008700 <_printf_i+0xa8>
 800868a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800868e:	2b15      	cmp	r3, #21
 8008690:	d8f6      	bhi.n	8008680 <_printf_i+0x28>
 8008692:	a101      	add	r1, pc, #4	; (adr r1, 8008698 <_printf_i+0x40>)
 8008694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008698:	080086f1 	.word	0x080086f1
 800869c:	08008705 	.word	0x08008705
 80086a0:	08008681 	.word	0x08008681
 80086a4:	08008681 	.word	0x08008681
 80086a8:	08008681 	.word	0x08008681
 80086ac:	08008681 	.word	0x08008681
 80086b0:	08008705 	.word	0x08008705
 80086b4:	08008681 	.word	0x08008681
 80086b8:	08008681 	.word	0x08008681
 80086bc:	08008681 	.word	0x08008681
 80086c0:	08008681 	.word	0x08008681
 80086c4:	08008809 	.word	0x08008809
 80086c8:	08008731 	.word	0x08008731
 80086cc:	080087c3 	.word	0x080087c3
 80086d0:	08008681 	.word	0x08008681
 80086d4:	08008681 	.word	0x08008681
 80086d8:	0800882b 	.word	0x0800882b
 80086dc:	08008681 	.word	0x08008681
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008681 	.word	0x08008681
 80086e8:	08008681 	.word	0x08008681
 80086ec:	080087cb 	.word	0x080087cb
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	1d1a      	adds	r2, r3, #4
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	602a      	str	r2, [r5, #0]
 80086f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008700:	2301      	movs	r3, #1
 8008702:	e09f      	b.n	8008844 <_printf_i+0x1ec>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	0607      	lsls	r7, r0, #24
 800870a:	f103 0104 	add.w	r1, r3, #4
 800870e:	6029      	str	r1, [r5, #0]
 8008710:	d501      	bpl.n	8008716 <_printf_i+0xbe>
 8008712:	681e      	ldr	r6, [r3, #0]
 8008714:	e003      	b.n	800871e <_printf_i+0xc6>
 8008716:	0646      	lsls	r6, r0, #25
 8008718:	d5fb      	bpl.n	8008712 <_printf_i+0xba>
 800871a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800871e:	2e00      	cmp	r6, #0
 8008720:	da03      	bge.n	800872a <_printf_i+0xd2>
 8008722:	232d      	movs	r3, #45	; 0x2d
 8008724:	4276      	negs	r6, r6
 8008726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800872a:	485a      	ldr	r0, [pc, #360]	; (8008894 <_printf_i+0x23c>)
 800872c:	230a      	movs	r3, #10
 800872e:	e012      	b.n	8008756 <_printf_i+0xfe>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	6820      	ldr	r0, [r4, #0]
 8008734:	1d19      	adds	r1, r3, #4
 8008736:	6029      	str	r1, [r5, #0]
 8008738:	0605      	lsls	r5, r0, #24
 800873a:	d501      	bpl.n	8008740 <_printf_i+0xe8>
 800873c:	681e      	ldr	r6, [r3, #0]
 800873e:	e002      	b.n	8008746 <_printf_i+0xee>
 8008740:	0641      	lsls	r1, r0, #25
 8008742:	d5fb      	bpl.n	800873c <_printf_i+0xe4>
 8008744:	881e      	ldrh	r6, [r3, #0]
 8008746:	4853      	ldr	r0, [pc, #332]	; (8008894 <_printf_i+0x23c>)
 8008748:	2f6f      	cmp	r7, #111	; 0x6f
 800874a:	bf0c      	ite	eq
 800874c:	2308      	moveq	r3, #8
 800874e:	230a      	movne	r3, #10
 8008750:	2100      	movs	r1, #0
 8008752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008756:	6865      	ldr	r5, [r4, #4]
 8008758:	60a5      	str	r5, [r4, #8]
 800875a:	2d00      	cmp	r5, #0
 800875c:	bfa2      	ittt	ge
 800875e:	6821      	ldrge	r1, [r4, #0]
 8008760:	f021 0104 	bicge.w	r1, r1, #4
 8008764:	6021      	strge	r1, [r4, #0]
 8008766:	b90e      	cbnz	r6, 800876c <_printf_i+0x114>
 8008768:	2d00      	cmp	r5, #0
 800876a:	d04b      	beq.n	8008804 <_printf_i+0x1ac>
 800876c:	4615      	mov	r5, r2
 800876e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008772:	fb03 6711 	mls	r7, r3, r1, r6
 8008776:	5dc7      	ldrb	r7, [r0, r7]
 8008778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800877c:	4637      	mov	r7, r6
 800877e:	42bb      	cmp	r3, r7
 8008780:	460e      	mov	r6, r1
 8008782:	d9f4      	bls.n	800876e <_printf_i+0x116>
 8008784:	2b08      	cmp	r3, #8
 8008786:	d10b      	bne.n	80087a0 <_printf_i+0x148>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	07de      	lsls	r6, r3, #31
 800878c:	d508      	bpl.n	80087a0 <_printf_i+0x148>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	4299      	cmp	r1, r3
 8008794:	bfde      	ittt	le
 8008796:	2330      	movle	r3, #48	; 0x30
 8008798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800879c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087a0:	1b52      	subs	r2, r2, r5
 80087a2:	6122      	str	r2, [r4, #16]
 80087a4:	f8cd a000 	str.w	sl, [sp]
 80087a8:	464b      	mov	r3, r9
 80087aa:	aa03      	add	r2, sp, #12
 80087ac:	4621      	mov	r1, r4
 80087ae:	4640      	mov	r0, r8
 80087b0:	f7ff fee4 	bl	800857c <_printf_common>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d14a      	bne.n	800884e <_printf_i+0x1f6>
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b004      	add	sp, #16
 80087be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	f043 0320 	orr.w	r3, r3, #32
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	4833      	ldr	r0, [pc, #204]	; (8008898 <_printf_i+0x240>)
 80087cc:	2778      	movs	r7, #120	; 0x78
 80087ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	6829      	ldr	r1, [r5, #0]
 80087d6:	061f      	lsls	r7, r3, #24
 80087d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087dc:	d402      	bmi.n	80087e4 <_printf_i+0x18c>
 80087de:	065f      	lsls	r7, r3, #25
 80087e0:	bf48      	it	mi
 80087e2:	b2b6      	uxthmi	r6, r6
 80087e4:	07df      	lsls	r7, r3, #31
 80087e6:	bf48      	it	mi
 80087e8:	f043 0320 	orrmi.w	r3, r3, #32
 80087ec:	6029      	str	r1, [r5, #0]
 80087ee:	bf48      	it	mi
 80087f0:	6023      	strmi	r3, [r4, #0]
 80087f2:	b91e      	cbnz	r6, 80087fc <_printf_i+0x1a4>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	f023 0320 	bic.w	r3, r3, #32
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	2310      	movs	r3, #16
 80087fe:	e7a7      	b.n	8008750 <_printf_i+0xf8>
 8008800:	4824      	ldr	r0, [pc, #144]	; (8008894 <_printf_i+0x23c>)
 8008802:	e7e4      	b.n	80087ce <_printf_i+0x176>
 8008804:	4615      	mov	r5, r2
 8008806:	e7bd      	b.n	8008784 <_printf_i+0x12c>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	6826      	ldr	r6, [r4, #0]
 800880c:	6961      	ldr	r1, [r4, #20]
 800880e:	1d18      	adds	r0, r3, #4
 8008810:	6028      	str	r0, [r5, #0]
 8008812:	0635      	lsls	r5, r6, #24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	d501      	bpl.n	800881c <_printf_i+0x1c4>
 8008818:	6019      	str	r1, [r3, #0]
 800881a:	e002      	b.n	8008822 <_printf_i+0x1ca>
 800881c:	0670      	lsls	r0, r6, #25
 800881e:	d5fb      	bpl.n	8008818 <_printf_i+0x1c0>
 8008820:	8019      	strh	r1, [r3, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	4615      	mov	r5, r2
 8008828:	e7bc      	b.n	80087a4 <_printf_i+0x14c>
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	1d1a      	adds	r2, r3, #4
 800882e:	602a      	str	r2, [r5, #0]
 8008830:	681d      	ldr	r5, [r3, #0]
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	2100      	movs	r1, #0
 8008836:	4628      	mov	r0, r5
 8008838:	f7f7 fcca 	bl	80001d0 <memchr>
 800883c:	b108      	cbz	r0, 8008842 <_printf_i+0x1ea>
 800883e:	1b40      	subs	r0, r0, r5
 8008840:	6060      	str	r0, [r4, #4]
 8008842:	6863      	ldr	r3, [r4, #4]
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	2300      	movs	r3, #0
 8008848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884c:	e7aa      	b.n	80087a4 <_printf_i+0x14c>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	462a      	mov	r2, r5
 8008852:	4649      	mov	r1, r9
 8008854:	4640      	mov	r0, r8
 8008856:	47d0      	blx	sl
 8008858:	3001      	adds	r0, #1
 800885a:	d0ad      	beq.n	80087b8 <_printf_i+0x160>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	079b      	lsls	r3, r3, #30
 8008860:	d413      	bmi.n	800888a <_printf_i+0x232>
 8008862:	68e0      	ldr	r0, [r4, #12]
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	4298      	cmp	r0, r3
 8008868:	bfb8      	it	lt
 800886a:	4618      	movlt	r0, r3
 800886c:	e7a6      	b.n	80087bc <_printf_i+0x164>
 800886e:	2301      	movs	r3, #1
 8008870:	4632      	mov	r2, r6
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d09d      	beq.n	80087b8 <_printf_i+0x160>
 800887c:	3501      	adds	r5, #1
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	9903      	ldr	r1, [sp, #12]
 8008882:	1a5b      	subs	r3, r3, r1
 8008884:	42ab      	cmp	r3, r5
 8008886:	dcf2      	bgt.n	800886e <_printf_i+0x216>
 8008888:	e7eb      	b.n	8008862 <_printf_i+0x20a>
 800888a:	2500      	movs	r5, #0
 800888c:	f104 0619 	add.w	r6, r4, #25
 8008890:	e7f5      	b.n	800887e <_printf_i+0x226>
 8008892:	bf00      	nop
 8008894:	080092d5 	.word	0x080092d5
 8008898:	080092e6 	.word	0x080092e6

0800889c <memmove>:
 800889c:	4288      	cmp	r0, r1
 800889e:	b510      	push	{r4, lr}
 80088a0:	eb01 0402 	add.w	r4, r1, r2
 80088a4:	d902      	bls.n	80088ac <memmove+0x10>
 80088a6:	4284      	cmp	r4, r0
 80088a8:	4623      	mov	r3, r4
 80088aa:	d807      	bhi.n	80088bc <memmove+0x20>
 80088ac:	1e43      	subs	r3, r0, #1
 80088ae:	42a1      	cmp	r1, r4
 80088b0:	d008      	beq.n	80088c4 <memmove+0x28>
 80088b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088ba:	e7f8      	b.n	80088ae <memmove+0x12>
 80088bc:	4402      	add	r2, r0
 80088be:	4601      	mov	r1, r0
 80088c0:	428a      	cmp	r2, r1
 80088c2:	d100      	bne.n	80088c6 <memmove+0x2a>
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ce:	e7f7      	b.n	80088c0 <memmove+0x24>

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	; (80088ec <_sbrk_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 fb96 	bl	800100c <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	2000356c 	.word	0x2000356c

080088f0 <_realloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	4680      	mov	r8, r0
 80088f6:	4614      	mov	r4, r2
 80088f8:	460e      	mov	r6, r1
 80088fa:	b921      	cbnz	r1, 8008906 <_realloc_r+0x16>
 80088fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008900:	4611      	mov	r1, r2
 8008902:	f7ff bc57 	b.w	80081b4 <_malloc_r>
 8008906:	b92a      	cbnz	r2, 8008914 <_realloc_r+0x24>
 8008908:	f7ff fbe8 	bl	80080dc <_free_r>
 800890c:	4625      	mov	r5, r4
 800890e:	4628      	mov	r0, r5
 8008910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008914:	f000 f81b 	bl	800894e <_malloc_usable_size_r>
 8008918:	4284      	cmp	r4, r0
 800891a:	4607      	mov	r7, r0
 800891c:	d802      	bhi.n	8008924 <_realloc_r+0x34>
 800891e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008922:	d812      	bhi.n	800894a <_realloc_r+0x5a>
 8008924:	4621      	mov	r1, r4
 8008926:	4640      	mov	r0, r8
 8008928:	f7ff fc44 	bl	80081b4 <_malloc_r>
 800892c:	4605      	mov	r5, r0
 800892e:	2800      	cmp	r0, #0
 8008930:	d0ed      	beq.n	800890e <_realloc_r+0x1e>
 8008932:	42bc      	cmp	r4, r7
 8008934:	4622      	mov	r2, r4
 8008936:	4631      	mov	r1, r6
 8008938:	bf28      	it	cs
 800893a:	463a      	movcs	r2, r7
 800893c:	f7ff fbc0 	bl	80080c0 <memcpy>
 8008940:	4631      	mov	r1, r6
 8008942:	4640      	mov	r0, r8
 8008944:	f7ff fbca 	bl	80080dc <_free_r>
 8008948:	e7e1      	b.n	800890e <_realloc_r+0x1e>
 800894a:	4635      	mov	r5, r6
 800894c:	e7df      	b.n	800890e <_realloc_r+0x1e>

0800894e <_malloc_usable_size_r>:
 800894e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008952:	1f18      	subs	r0, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfbc      	itt	lt
 8008958:	580b      	ldrlt	r3, [r1, r0]
 800895a:	18c0      	addlt	r0, r0, r3
 800895c:	4770      	bx	lr
	...

08008960 <_init>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr

0800896c <_fini>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr
