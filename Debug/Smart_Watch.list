
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c6c  08007c6c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c74  08007c74  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030a4  20000060  08007cdc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003104  08007cdc  00023104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d59f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039a1  00000000  00000000  0003d672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00041018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132d  00000000  00000000  000428c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b41  00000000  00000000  00043bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd28  00000000  00000000  0004772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102efe  00000000  00000000  00063456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d70  00000000  00000000  00166354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0016d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a68 	.word	0x08007a68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007a68 	.word	0x08007a68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fc75 	bl	8000e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f85c 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f97e 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f94c 	bl	8000818 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000580:	f000 f8aa 	bl	80006d8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f004 f87e 	bl	8004684 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_table_data */
  mutex_table_dataHandle = osMutexNew(&mutex_table_data_attributes);
 8000588:	4818      	ldr	r0, [pc, #96]	; (80005ec <main+0x80>)
 800058a:	f004 f972 	bl	8004872 <osMutexNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <main+0x84>)
 8000592:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 8000594:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <main+0x88>)
 8000596:	2100      	movs	r1, #0
 8000598:	4817      	ldr	r0, [pc, #92]	; (80005f8 <main+0x8c>)
 800059a:	f004 f8bd 	bl	8004718 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <main+0x90>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 80005a4:	4a16      	ldr	r2, [pc, #88]	; (8000600 <main+0x94>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <main+0x98>)
 80005aa:	f004 f8b5 	bl	8004718 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <main+0x9c>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 80005b4:	4a15      	ldr	r2, [pc, #84]	; (800060c <main+0xa0>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <main+0xa4>)
 80005ba:	f004 f8ad 	bl	8004718 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <main+0xa8>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <main+0xac>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0xb0>)
 80005ca:	f004 f8a5 	bl	8004718 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a13      	ldr	r2, [pc, #76]	; (8000620 <main+0xb4>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0xb8>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xbc>)
 80005da:	f004 f89d 	bl	8004718 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <main+0xc0>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f004 f872 	bl	80046cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x7c>
 80005ea:	bf00      	nop
 80005ec:	08007be0 	.word	0x08007be0
 80005f0:	20000154 	.word	0x20000154
 80005f4:	08007b2c 	.word	0x08007b2c
 80005f8:	08000945 	.word	0x08000945
 80005fc:	20000140 	.word	0x20000140
 8000600:	08007b50 	.word	0x08007b50
 8000604:	08000955 	.word	0x08000955
 8000608:	20000144 	.word	0x20000144
 800060c:	08007b74 	.word	0x08007b74
 8000610:	080009d9 	.word	0x080009d9
 8000614:	20000148 	.word	0x20000148
 8000618:	08007b98 	.word	0x08007b98
 800061c:	080009ed 	.word	0x080009ed
 8000620:	2000014c 	.word	0x2000014c
 8000624:	08007bbc 	.word	0x08007bbc
 8000628:	08000a01 	.word	0x08000a01
 800062c:	20000150 	.word	0x20000150

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fd38 	bl	80070b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f000 feed 	bl	8001434 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f000 f9f8 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000664:	230a      	movs	r3, #10
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000682:	230a      	movs	r3, #10
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff22 	bl	80014e0 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006a2:	f000 f9d7 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 faea 	bl	8001c98 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ca:	f000 f9c3 	bl	8000a54 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3758      	adds	r7, #88	; 0x58
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b092      	sub	sp, #72	; 0x48
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	222c      	movs	r2, #44	; 0x2c
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 fcdb 	bl	80070b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <MX_RTC_Init+0x138>)
 8000700:	4a44      	ldr	r2, [pc, #272]	; (8000814 <MX_RTC_Init+0x13c>)
 8000702:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000704:	4b42      	ldr	r3, [pc, #264]	; (8000810 <MX_RTC_Init+0x138>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <MX_RTC_Init+0x138>)
 800070c:	227f      	movs	r2, #127	; 0x7f
 800070e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000710:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <MX_RTC_Init+0x138>)
 8000712:	22ff      	movs	r2, #255	; 0xff
 8000714:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_RTC_Init+0x138>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <MX_RTC_Init+0x138>)
 800071e:	2202      	movs	r2, #2
 8000720:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_RTC_Init+0x138>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000728:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_RTC_Init+0x138>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800072e:	4838      	ldr	r0, [pc, #224]	; (8000810 <MX_RTC_Init+0x138>)
 8000730:	f002 f9c4 	bl	8002abc <HAL_RTC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800073a:	f000 f98b 	bl	8000a54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x3;
 800073e:	2303      	movs	r3, #3
 8000740:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000750:	2300      	movs	r3, #0
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000758:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075c:	2201      	movs	r2, #1
 800075e:	4619      	mov	r1, r3
 8000760:	482b      	ldr	r0, [pc, #172]	; (8000810 <MX_RTC_Init+0x138>)
 8000762:	f002 fa33 	bl	8002bcc <HAL_RTC_SetTime>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 800076c:	f000 f972 	bl	8000a54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000770:	2303      	movs	r3, #3
 8000772:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 8000776:	2312      	movs	r3, #18
 8000778:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 800077c:	2311      	movs	r3, #17
 800077e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000782:	2300      	movs	r3, #0
 8000784:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800078c:	2201      	movs	r2, #1
 800078e:	4619      	mov	r1, r3
 8000790:	481f      	ldr	r0, [pc, #124]	; (8000810 <MX_RTC_Init+0x138>)
 8000792:	f002 fb14 	bl	8002dbe <HAL_RTC_SetDate>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800079c:	f000 f95a 	bl	8000a54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 80007a0:	2303      	movs	r3, #3
 80007a2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x5;
 80007a4:	2305      	movs	r3, #5
 80007a6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80007ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <MX_RTC_Init+0x138>)
 80007d8:	f002 fbc6 	bl	8002f68 <HAL_RTC_SetAlarm_IT>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80007e2:	f000 f937 	bl	8000a54 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_RTC_Init+0x138>)
 80007ea:	f002 fe19 	bl	8003420 <HAL_RTCEx_SetCalibrationOutPut>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 80007f4:	f000 f92e 	bl	8000a54 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_RTC_Init+0x138>)
 80007fa:	f002 fe58 	bl	80034ae <HAL_RTCEx_SetRefClock>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 8000804:	f000 f926 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3748      	adds	r7, #72	; 0x48
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000094 	.word	0x20000094
 8000814:	40002800 	.word	0x40002800

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART2_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x58>)
 800085c:	f003 f928 	bl	8003ab0 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f8f5 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000b8 	.word	0x200000b8
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2a      	ldr	r2, [pc, #168]	; (800093c <MX_GPIO_Init+0xc4>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0xc4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0xc4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_GPIO_Init+0xc4>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_GPIO_Init+0xc4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_GPIO_Init+0xc4>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 fd77 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000900:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0xc8>)
 8000912:	f000 fbbf 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000916:	2320      	movs	r3, #32
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f000 fbb0 	bl	8001094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000800 	.word	0x48000800

08000944 <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f003 ff75 	bl	800483c <osDelay>
 8000952:	e7fb      	b.n	800094c <start_default_task+0x8>

08000954 <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {
	  sprintf(date, "Date: %02d.%02d.%02d.\t", sDate.Date, sDate.Month, sDate.Year);
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <start_wright_to_display_task+0x68>)
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	461a      	mov	r2, r3
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <start_wright_to_display_task+0x68>)
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	4619      	mov	r1, r3
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <start_wright_to_display_task+0x68>)
 800096a:	78db      	ldrb	r3, [r3, #3]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	460b      	mov	r3, r1
 8000970:	4913      	ldr	r1, [pc, #76]	; (80009c0 <start_wright_to_display_task+0x6c>)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <start_wright_to_display_task+0x70>)
 8000974:	f006 fb7e 	bl	8007074 <siprintf>
	  sprintf(time, "Date: %02d.%02d.%02d.\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <start_wright_to_display_task+0x74>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <start_wright_to_display_task+0x74>)
 8000980:	785b      	ldrb	r3, [r3, #1]
 8000982:	4619      	mov	r1, r3
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <start_wright_to_display_task+0x74>)
 8000986:	789b      	ldrb	r3, [r3, #2]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	460b      	mov	r3, r1
 800098c:	490f      	ldr	r1, [pc, #60]	; (80009cc <start_wright_to_display_task+0x78>)
 800098e:	4810      	ldr	r0, [pc, #64]	; (80009d0 <start_wright_to_display_task+0x7c>)
 8000990:	f006 fb70 	bl	8007074 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)date, sizeof(date), 300);
 8000994:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000998:	221e      	movs	r2, #30
 800099a:	490a      	ldr	r1, [pc, #40]	; (80009c4 <start_wright_to_display_task+0x70>)
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <start_wright_to_display_task+0x80>)
 800099e:	f003 f8d5 	bl	8003b4c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)time, sizeof(time), 300);
 80009a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80009a6:	221e      	movs	r2, #30
 80009a8:	4909      	ldr	r1, [pc, #36]	; (80009d0 <start_wright_to_display_task+0x7c>)
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <start_wright_to_display_task+0x80>)
 80009ac:	f003 f8ce 	bl	8003b4c <HAL_UART_Transmit>
    osDelay(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f003 ff42 	bl	800483c <osDelay>
  {
 80009b8:	e7d0      	b.n	800095c <start_wright_to_display_task+0x8>
 80009ba:	bf00      	nop
 80009bc:	20000090 	.word	0x20000090
 80009c0:	08007ae4 	.word	0x08007ae4
 80009c4:	20000178 	.word	0x20000178
 80009c8:	2000007c 	.word	0x2000007c
 80009cc:	08007afc 	.word	0x08007afc
 80009d0:	20000158 	.word	0x20000158
 80009d4:	200000b8 	.word	0x200000b8

080009d8 <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_heart_rate_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 80009e0:	4801      	ldr	r0, [pc, #4]	; (80009e8 <start_read_heart_rate_task+0x10>)
 80009e2:	f003 ff2b 	bl	800483c <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <start_read_heart_rate_task+0x8>
 80009e8:	000186a0 	.word	0x000186a0

080009ec <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(10000);
 80009f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80009f8:	f003 ff20 	bl	800483c <osDelay>
 80009fc:	e7fa      	b.n	80009f4 <start_read_acceloromater_task+0x8>
	...

08000a00 <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4906      	ldr	r1, [pc, #24]	; (8000a24 <start_date_and_time_task+0x24>)
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <start_date_and_time_task+0x28>)
 8000a0e:	f002 fa5d 	bl	8002ecc <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a12:	2200      	movs	r2, #0
 8000a14:	4905      	ldr	r1, [pc, #20]	; (8000a2c <start_date_and_time_task+0x2c>)
 8000a16:	4804      	ldr	r0, [pc, #16]	; (8000a28 <start_date_and_time_task+0x28>)
 8000a18:	f002 f975 	bl	8002d06 <HAL_RTC_GetTime>
    osDelay(50);
 8000a1c:	2032      	movs	r0, #50	; 0x32
 8000a1e:	f003 ff0d 	bl	800483c <osDelay>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a22:	e7f1      	b.n	8000a08 <start_date_and_time_task+0x8>
 8000a24:	20000090 	.word	0x20000090
 8000a28:	20000094 	.word	0x20000094
 8000a2c:	2000007c 	.word	0x2000007c

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fa25 	bl	8000e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40001000 	.word	0x40001000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_MspInit+0x4c>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	; 0x60
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_MspInit+0x4c>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <HAL_MspInit+0x4c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210f      	movs	r1, #15
 8000a9a:	f06f 0001 	mvn.w	r0, #1
 8000a9e:	f000 facf 	bl	8001040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0aa      	sub	sp, #168	; 0xa8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2288      	movs	r2, #136	; 0x88
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 faef 	bl	80070b4 <memset>
  if(hrtc->Instance==RTC)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <HAL_RTC_MspInit+0xc0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d142      	bne.n	8000b66 <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fb26 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8000afe:	f7ff ffa9 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_RTC_MspInit+0xc4>)
 8000b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_RTC_MspInit+0xc4>)
 8000b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_RTC_MspInit+0xc4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_RTC_MspInit+0xc4>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_RTC_MspInit+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000b2a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_RTC_MspInit+0xc8>)
 8000b52:	f000 fa9f 	bl	8001094 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2029      	movs	r0, #41	; 0x29
 8000b5c:	f000 fa70 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b60:	2029      	movs	r0, #41	; 0x29
 8000b62:	f000 fa89 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	37a8      	adds	r7, #168	; 0xa8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40002800 	.word	0x40002800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ac      	sub	sp, #176	; 0xb0
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2288      	movs	r2, #136	; 0x88
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fa89 	bl	80070b4 <memset>
  if(huart->Instance==USART2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <HAL_UART_MspInit+0xb0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d13b      	bne.n	8000c24 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fac3 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff ff46 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_UART_MspInit+0xb4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fa38 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	37b0      	adds	r7, #176	; 0xb0
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <HAL_InitTick+0xe0>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5a:	f107 0210 	add.w	r2, r7, #16
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 f9db 	bl	8002020 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d103      	bne.n	8000c7c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c74:	f001 f9a8 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8000c78:	6378      	str	r0, [r7, #52]	; 0x34
 8000c7a:	e004      	b.n	8000c86 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7c:	f001 f9a4 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8000c80:	4603      	mov	r3, r0
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c88:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <HAL_InitTick+0xe4>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3b01      	subs	r3, #1
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_InitTick+0xe8>)
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_InitTick+0xec>)
 8000c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_InitTick+0xe8>)
 8000c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_InitTick+0xe8>)
 8000ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_InitTick+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cbc:	f002 fc45 	bl	800354a <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11b      	bne.n	8000d06 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cce:	4813      	ldr	r0, [pc, #76]	; (8000d1c <HAL_InitTick+0xe8>)
 8000cd0:	f002 fc9c 	bl	800360c <HAL_TIM_Base_Start_IT>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d111      	bne.n	8000d06 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce2:	2036      	movs	r0, #54	; 0x36
 8000ce4:	f000 f9c8 	bl	8001078 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d808      	bhi.n	8000d00 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	2036      	movs	r0, #54	; 0x36
 8000cf4:	f000 f9a4 	bl	8001040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_InitTick+0xf0>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e002      	b.n	8000d06 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	431bde83 	.word	0x431bde83
 8000d1c:	20000198 	.word	0x20000198
 8000d20:	40001000 	.word	0x40001000
 8000d24:	20000004 	.word	0x20000004

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <RTC_Alarm_IRQHandler+0x10>)
 8000d5a:	f002 fa41 	bl	80031e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000094 	.word	0x20000094

08000d68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <TIM6_DAC_IRQHandler+0x10>)
 8000d6e:	f002 fcbd 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000198 	.word	0x20000198

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f006 f9e0 	bl	8007170 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20018000 	.word	0x20018000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200001e4 	.word	0x200001e4
 8000de4:	20003108 	.word	0x20003108

08000de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <LoopForever+0xe>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	; (8000e58 <LoopForever+0x16>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f006 f99f 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3e:	f7ff fb95 	bl	800056c <main>

08000e42 <LoopForever>:

LoopForever:
    b LoopForever
 8000e42:	e7fe      	b.n	8000e42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e50:	08007c7c 	.word	0x08007c7c
  ldr r2, =_sbss
 8000e54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e58:	20003104 	.word	0x20003104

08000e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC1_2_IRQHandler>

08000e5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f8de 	bl	800102a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f7ff fee0 	bl	8000c34 <HAL_InitTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d002      	beq.n	8000e80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e001      	b.n	8000e84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e80:	f7ff fdee 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001e8 	.word	0x200001e8

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001e8 	.word	0x200001e8

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff4c 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001052:	f7ff ff61 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001056:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff ffb1 	bl	8000fc4 <NVIC_EncodePriority>
 8001062:	4602      	mov	r2, r0
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff80 	bl	8000f70 <__NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff54 	bl	8000f34 <__NVIC_EnableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a2:	e17f      	b.n	80013a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8171 	beq.w	800139e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d118      	bne.n	8001174 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001148:	2201      	movs	r2, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	f003 0201 	and.w	r2, r3, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b03      	cmp	r3, #3
 800117e:	d017      	beq.n	80011b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	6939      	ldr	r1, [r7, #16]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80ac 	beq.w	800139e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124a:	4a5e      	ldr	r2, [pc, #376]	; (80013c4 <HAL_GPIO_Init+0x330>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6613      	str	r3, [r2, #96]	; 0x60
 8001252:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <HAL_GPIO_Init+0x330>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_GPIO_Init+0x334>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001288:	d025      	beq.n	80012d6 <HAL_GPIO_Init+0x242>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	; (80013cc <HAL_GPIO_Init+0x338>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01f      	beq.n	80012d2 <HAL_GPIO_Init+0x23e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	; (80013d0 <HAL_GPIO_Init+0x33c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x23a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_GPIO_Init+0x340>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x236>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x344>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x232>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	; (80013dc <HAL_GPIO_Init+0x348>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x22e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x34c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x22a>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00c      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00a      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012c2:	2305      	movs	r3, #5
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x244>
 80012d6:	2300      	movs	r3, #0
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_GPIO_Init+0x334>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <HAL_GPIO_Init+0x350>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131a:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001320:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_GPIO_Init+0x350>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <HAL_GPIO_Init+0x350>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f47f ae78 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	48000c00 	.word	0x48000c00
 80013d8:	48001000 	.word	0x48001000
 80013dc:	48001400 	.word	0x48001400
 80013e0:	48001800 	.word	0x48001800
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]
 80013f4:	4613      	mov	r3, r2
 80013f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001404:	e002      	b.n	800140c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_PWREx_GetVoltageRange+0x18>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40007000 	.word	0x40007000

08001434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001442:	d130      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001450:	d038      	beq.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2232      	movs	r2, #50	; 0x32
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	3301      	adds	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001478:	e002      	b.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3b01      	subs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148c:	d102      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f2      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a0:	d110      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e00f      	b.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d007      	beq.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e3ca      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	4b97      	ldr	r3, [pc, #604]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fc:	4b94      	ldr	r3, [pc, #592]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80e4 	beq.w	80016dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_RCC_OscConfig+0x4a>
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	f040 808b 	bne.w	8001638 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b01      	cmp	r3, #1
 8001526:	f040 8087 	bne.w	8001638 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152a:	4b89      	ldr	r3, [pc, #548]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x62>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e3a2      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4b82      	ldr	r3, [pc, #520]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_RCC_OscConfig+0x7c>
 8001552:	4b7f      	ldr	r3, [pc, #508]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155a:	e005      	b.n	8001568 <HAL_RCC_OscConfig+0x88>
 800155c:	4b7c      	ldr	r3, [pc, #496]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800155e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001568:	4293      	cmp	r3, r2
 800156a:	d223      	bcs.n	80015b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fd87 	bl	8002084 <RCC_SetFlashLatencyFromMSIRange>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e383      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001580:	4b73      	ldr	r3, [pc, #460]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0308 	orr.w	r3, r3, #8
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b70      	ldr	r3, [pc, #448]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	496d      	ldr	r1, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159e:	4b6c      	ldr	r3, [pc, #432]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4968      	ldr	r1, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
 80015b2:	e025      	b.n	8001600 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4960      	ldr	r1, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	495b      	ldr	r1, [pc, #364]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd47 	bl	8002084 <RCC_SetFlashLatencyFromMSIRange>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e343      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001600:	f000 fc4a 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001604:	4602      	mov	r2, r0
 8001606:	4b52      	ldr	r3, [pc, #328]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	4950      	ldr	r1, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x274>)
 8001612:	5ccb      	ldrb	r3, [r1, r3]
 8001614:	f003 031f 	and.w	r3, r3, #31
 8001618:	fa22 f303 	lsr.w	r3, r2, r3
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_RCC_OscConfig+0x278>)
 800161e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb05 	bl	8000c34 <HAL_InitTick>
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d052      	beq.n	80016da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	e327      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d032      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc34 	bl	8000eb8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7ff fc30 	bl	8000eb8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e310      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a36      	ldr	r2, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4931      	ldr	r1, [pc, #196]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	492c      	ldr	r1, [pc, #176]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
 80016a4:	e01a      	b.n	80016dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fc01 	bl	8000eb8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ba:	f7ff fbfd 	bl	8000eb8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e2dd      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x1da>
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d074      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x21a>
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d10e      	bne.n	8001712 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d064      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d160      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e2ba      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x24a>
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e026      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001732:	d115      	bne.n	8001760 <HAL_RCC_OscConfig+0x280>
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 800173a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a02      	ldr	r2, [pc, #8]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x298>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	08007bf0 	.word	0x08007bf0
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004
 8001760:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9f      	ldr	r2, [pc, #636]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b9d      	ldr	r3, [pc, #628]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a9c      	ldr	r2, [pc, #624]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff fb9a 	bl	8000eb8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fb96 	bl	8000eb8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e276      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2a8>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb86 	bl	8000eb8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fb82 	bl	8000eb8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e262      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c2:	4b88      	ldr	r3, [pc, #544]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2d0>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d060      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x310>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d119      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d116      	bne.n	800181e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x328>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e23f      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	4973      	ldr	r1, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	e040      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d023      	beq.n	800186e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001826:	4b6f      	ldr	r3, [pc, #444]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fb41 	bl	8000eb8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fb3d 	bl	8000eb8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e21d      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800184c:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	495f      	ldr	r1, [pc, #380]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fb1d 	bl	8000eb8 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fb19 	bl	8000eb8 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e1f9      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03c      	beq.n	8001926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01c      	beq.n	80018ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff faf8 	bl	8000eb8 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff faf4 	bl	8000eb8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1d4      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018de:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0ef      	beq.n	80018cc <HAL_RCC_OscConfig+0x3ec>
 80018ec:	e01b      	b.n	8001926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f4:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fadb 	bl	8000eb8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fad7 	bl	8000eb8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1b7      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a6 	beq.w	8001a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10d      	bne.n	8001960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	; 0x58
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195c:	2301      	movs	r3, #1
 800195e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d118      	bne.n	800199e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001978:	f7ff fa9e 	bl	8000eb8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001980:	f7ff fa9a 	bl	8000eb8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e17a      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_RCC_OscConfig+0x508>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4d8>
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b6:	e029      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d115      	bne.n	80019ec <HAL_RCC_OscConfig+0x50c>
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x52c>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	4b9c      	ldr	r3, [pc, #624]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	4b98      	ldr	r3, [pc, #608]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a97      	ldr	r2, [pc, #604]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa50 	bl	8000eb8 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fa4c 	bl	8000eb8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e12a      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a32:	4b8b      	ldr	r3, [pc, #556]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ed      	beq.n	8001a1c <HAL_RCC_OscConfig+0x53c>
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fa39 	bl	8000eb8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fa35 	bl	8000eb8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e113      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a60:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ed      	bne.n	8001a4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a79      	ldr	r2, [pc, #484]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80fe 	beq.w	8001c86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f040 80d0 	bne.w	8001c34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a94:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d130      	bne.n	8001b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d127      	bne.n	8001b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d11f      	bne.n	8001b0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad4:	2a07      	cmp	r2, #7
 8001ad6:	bf14      	ite	ne
 8001ad8:	2201      	movne	r2, #1
 8001ada:	2200      	moveq	r2, #0
 8001adc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d113      	bne.n	8001b0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	3b01      	subs	r3, #1
 8001af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d06e      	beq.n	8001be8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	d069      	beq.n	8001be4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0ad      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b38:	f7ff f9be 	bl	8000eb8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f9ba 	bl	8000eb8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e09a      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCC_OscConfig+0x784>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b78:	0212      	lsls	r2, r2, #8
 8001b7a:	4311      	orrs	r1, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b80:	0852      	lsrs	r2, r2, #1
 8001b82:	3a01      	subs	r2, #1
 8001b84:	0552      	lsls	r2, r2, #21
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b8c:	0852      	lsrs	r2, r2, #1
 8001b8e:	3a01      	subs	r2, #1
 8001b90:	0652      	lsls	r2, r2, #25
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b98:	0912      	lsrs	r2, r2, #4
 8001b9a:	0452      	lsls	r2, r2, #17
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	4930      	ldr	r1, [pc, #192]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bbc:	f7ff f97c 	bl	8000eb8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f978 	bl	8000eb8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e058      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be2:	e050      	b.n	8001c86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e04f      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d148      	bne.n	8001c86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c0c:	f7ff f954 	bl	8000eb8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f950 	bl	8000eb8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e030      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x734>
 8001c32:	e028      	b.n	8001c86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d023      	beq.n	8001c82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_RCC_OscConfig+0x780>)
 8001c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f937 	bl	8000eb8 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4c:	e00c      	b.n	8001c68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff f933 	bl	8000eb8 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d905      	bls.n	8001c68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e013      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
 8001c60:	40021000 	.word	0x40021000
 8001c64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_OscConfig+0x7b0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ec      	bne.n	8001c4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x7b0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4905      	ldr	r1, [pc, #20]	; (8001c90 <HAL_RCC_OscConfig+0x7b0>)
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_OscConfig+0x7b4>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e001      	b.n	8001c86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3720      	adds	r7, #32
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	feeefffc 	.word	0xfeeefffc

08001c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0e7      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4970      	ldr	r1, [pc, #448]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b6e      	ldr	r3, [pc, #440]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0cf      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d010      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d908      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4960      	ldr	r1, [pc, #384]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d04c      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d121      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0a6      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e09a      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e08e      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e086      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4943      	ldr	r1, [pc, #268]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d80:	f7ff f89a 	bl	8000eb8 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff f896 	bl	8000eb8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e06e      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d010      	beq.n	8001dde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d208      	bcs.n	8001dde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	492b      	ldr	r1, [pc, #172]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d210      	bcs.n	8001e0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 0207 	bic.w	r2, r3, #7
 8001df4:	4923      	ldr	r1, [pc, #140]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e036      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	4918      	ldr	r1, [pc, #96]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4910      	ldr	r1, [pc, #64]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e4c:	f000 f824 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	490b      	ldr	r1, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1f4>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1fc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fedf 	bl	8000c34 <HAL_InitTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08007bf0 	.word	0x08007bf0
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x34>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d121      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11e      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e005      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ef4:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10d      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d102      	bne.n	8001f16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e004      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_RCC_GetSysClockFreq+0x114>)
 8001f1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d134      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d003      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0xac>
 8001f3c:	e005      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f40:	617b      	str	r3, [r7, #20]
      break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_GetSysClockFreq+0x114>)
 8001f46:	617b      	str	r3, [r7, #20]
      break;
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	617b      	str	r3, [r7, #20]
      break;
 8001f4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	fb03 f202 	mul.w	r2, r3, r2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	0e5b      	lsrs	r3, r3, #25
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	3301      	adds	r3, #1
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f90:	69bb      	ldr	r3, [r7, #24]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08007c08 	.word	0x08007c08
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	007a1200 	.word	0x007a1200

08001fb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08007c00 	.word	0x08007c00

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ff8:	f7ff ffda 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0adb      	lsrs	r3, r3, #11
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <HAL_RCC_GetPCLK2Freq+0x28>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08007c00 	.word	0x08007c00

08002020 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	220f      	movs	r2, #15
 800202e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_RCC_GetClockConfig+0x5c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_RCC_GetClockConfig+0x5c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_RCC_GetClockConfig+0x5c>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_GetClockConfig+0x5c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	08db      	lsrs	r3, r3, #3
 800205a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_RCC_GetClockConfig+0x60>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40022000 	.word	0x40022000

08002084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800209c:	f7ff f9bc 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 80020a0:	6178      	str	r0, [r7, #20]
 80020a2:	e014      	b.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020bc:	f7ff f9ac 	bl	8001418 <HAL_PWREx_GetVoltageRange>
 80020c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d10b      	bne.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d919      	bls.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2ba0      	cmp	r3, #160	; 0xa0
 80020e0:	d902      	bls.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e2:	2302      	movs	r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e013      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e8:	2301      	movs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e010      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d902      	bls.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f4:	2303      	movs	r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e00a      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d102      	bne.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e004      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b70      	cmp	r3, #112	; 0x70
 800210a:	d101      	bne.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40022000 	.word	0x40022000

08002144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800214c:	2300      	movs	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002150:	2300      	movs	r3, #0
 8002152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d041      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002164:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002168:	d02a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800216a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216e:	d824      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002170:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002174:	d008      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002176:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217a:	d81e      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002184:	d010      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002186:	e018      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002188:	4b86      	ldr	r3, [pc, #536]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a85      	ldr	r2, [pc, #532]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002194:	e015      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3304      	adds	r3, #4
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fabb 	bl	8002718 <RCCEx_PLLSAI1_Config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a6:	e00c      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3320      	adds	r3, #32
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fba6 	bl	8002900 <RCCEx_PLLSAI2_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021b8:	e003      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	74fb      	strb	r3, [r7, #19]
      break;
 80021be:	e000      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021c8:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d6:	4973      	ldr	r1, [pc, #460]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021de:	e001      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d041      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021f8:	d02a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021fe:	d824      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002204:	d008      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220a:	d81e      	bhi.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d010      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002216:	e018      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a61      	ldr	r2, [pc, #388]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002224:	e015      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fa73 	bl	8002718 <RCCEx_PLLSAI1_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002236:	e00c      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3320      	adds	r3, #32
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fb5e 	bl	8002900 <RCCEx_PLLSAI2_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002248:	e003      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	74fb      	strb	r3, [r7, #19]
      break;
 800224e:	e000      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002258:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002266:	494f      	ldr	r1, [pc, #316]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800226e:	e001      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a0 	beq.w	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6593      	str	r3, [r2, #88]	; 0x58
 80022a8:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b4:	2301      	movs	r3, #1
 80022b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3a      	ldr	r2, [pc, #232]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fdf8 	bl	8000eb8 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ca:	e009      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7fe fdf4 	bl	8000eb8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d902      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	74fb      	strb	r3, [r7, #19]
        break;
 80022de:	e005      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	d019      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800233c:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d016      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fdb3 	bl	8000eb8 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002354:	e00b      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fdaf 	bl	8000eb8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d902      	bls.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	74fb      	strb	r3, [r7, #19]
            break;
 800236c:	e006      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ec      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002392:	4904      	ldr	r1, [pc, #16]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800239a:	e009      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	74bb      	strb	r3, [r7, #18]
 80023a0:	e006      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b0:	7c7b      	ldrb	r3, [r7, #17]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b9e      	ldr	r3, [pc, #632]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a9d      	ldr	r2, [pc, #628]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ce:	4b98      	ldr	r3, [pc, #608]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f023 0203 	bic.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	4994      	ldr	r1, [pc, #592]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 020c 	bic.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	498c      	ldr	r1, [pc, #560]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002412:	4b87      	ldr	r3, [pc, #540]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	4983      	ldr	r1, [pc, #524]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002434:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	497b      	ldr	r1, [pc, #492]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	4972      	ldr	r1, [pc, #456]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002478:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	496a      	ldr	r1, [pc, #424]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	4961      	ldr	r1, [pc, #388]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024bc:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	4959      	ldr	r1, [pc, #356]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ec:	4950      	ldr	r1, [pc, #320]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002500:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	4948      	ldr	r1, [pc, #288]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	493f      	ldr	r1, [pc, #252]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d028      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002544:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002552:	4937      	ldr	r1, [pc, #220]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002562:	d106      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800256e:	60d3      	str	r3, [r2, #12]
 8002570:	e011      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257a:	d10c      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	2101      	movs	r1, #1
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f8c8 	bl	8002718 <RCCEx_PLLSAI1_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d028      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	491f      	ldr	r1, [pc, #124]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025cc:	60d3      	str	r3, [r2, #12]
 80025ce:	e011      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f899 	bl	8002718 <RCCEx_PLLSAI1_Config>
 80025e6:	4603      	mov	r3, r0
 80025e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d02b      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261e:	d109      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a02      	ldr	r2, [pc, #8]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262a:	60d3      	str	r3, [r2, #12]
 800262c:	e014      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263c:	d10c      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f867 	bl	8002718 <RCCEx_PLLSAI1_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d02f      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002672:	4928      	ldr	r1, [pc, #160]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800267e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002682:	d10d      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f844 	bl	8002718 <RCCEx_PLLSAI1_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d014      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
 800269e:	e011      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3320      	adds	r3, #32
 80026ae:	2102      	movs	r1, #2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f925 	bl	8002900 <RCCEx_PLLSAI2_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026de:	490d      	ldr	r1, [pc, #52]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002702:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800270a:	7cbb      	ldrb	r3, [r7, #18]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d018      	beq.n	8002764 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
       ||
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800274a:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
       ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d047      	beq.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e044      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d018      	beq.n	800279e <RCCEx_PLLSAI1_Config+0x86>
 800276c:	2b03      	cmp	r3, #3
 800276e:	d825      	bhi.n	80027bc <RCCEx_PLLSAI1_Config+0xa4>
 8002770:	2b01      	cmp	r3, #1
 8002772:	d002      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x62>
 8002774:	2b02      	cmp	r3, #2
 8002776:	d009      	beq.n	800278c <RCCEx_PLLSAI1_Config+0x74>
 8002778:	e020      	b.n	80027bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277a:	4b60      	ldr	r3, [pc, #384]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11d      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278a:	e01a      	b.n	80027c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279c:	e013      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ba:	e006      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e004      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c2:	bf00      	nop
 80027c4:	e002      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e000      	b.n	80027cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d2:	4b4a      	ldr	r3, [pc, #296]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	430b      	orrs	r3, r1
 80027e8:	4944      	ldr	r1, [pc, #272]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d17d      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a40      	ldr	r2, [pc, #256]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fb5a 	bl	8000eb8 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002806:	e009      	b.n	800281c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002808:	f7fe fb56 	bl	8000eb8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	73fb      	strb	r3, [r7, #15]
        break;
 800281a:	e005      	b.n	8002828 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ef      	bne.n	8002808 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d160      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d111      	bne.n	8002858 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	0211      	lsls	r1, r2, #8
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68d2      	ldr	r2, [r2, #12]
 800284a:	0912      	lsrs	r2, r2, #4
 800284c:	0452      	lsls	r2, r2, #17
 800284e:	430a      	orrs	r2, r1
 8002850:	492a      	ldr	r1, [pc, #168]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	610b      	str	r3, [r1, #16]
 8002856:	e027      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d112      	bne.n	8002884 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002866:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	0211      	lsls	r1, r2, #8
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6912      	ldr	r2, [r2, #16]
 8002874:	0852      	lsrs	r2, r2, #1
 8002876:	3a01      	subs	r2, #1
 8002878:	0552      	lsls	r2, r2, #21
 800287a:	430a      	orrs	r2, r1
 800287c:	491f      	ldr	r1, [pc, #124]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	610b      	str	r3, [r1, #16]
 8002882:	e011      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800288c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6892      	ldr	r2, [r2, #8]
 8002894:	0211      	lsls	r1, r2, #8
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6952      	ldr	r2, [r2, #20]
 800289a:	0852      	lsrs	r2, r2, #1
 800289c:	3a01      	subs	r2, #1
 800289e:	0652      	lsls	r2, r2, #25
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4916      	ldr	r1, [pc, #88]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe fb00 	bl	8000eb8 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ba:	e009      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028bc:	f7fe fafc 	bl	8000eb8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d902      	bls.n	80028d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	73fb      	strb	r3, [r7, #15]
          break;
 80028ce:	e005      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ef      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d10d      	bne.n	8002946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
       ||
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
       ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d047      	beq.n	80029d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e044      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d018      	beq.n	8002986 <RCCEx_PLLSAI2_Config+0x86>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d825      	bhi.n	80029a4 <RCCEx_PLLSAI2_Config+0xa4>
 8002958:	2b01      	cmp	r3, #1
 800295a:	d002      	beq.n	8002962 <RCCEx_PLLSAI2_Config+0x62>
 800295c:	2b02      	cmp	r3, #2
 800295e:	d009      	beq.n	8002974 <RCCEx_PLLSAI2_Config+0x74>
 8002960:	e020      	b.n	80029a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002962:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11d      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002972:	e01a      	b.n	80029aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e013      	b.n	80029ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a2:	e006      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e004      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	430b      	orrs	r3, r1
 80029d0:	4939      	ldr	r1, [pc, #228]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d167      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a35      	ldr	r2, [pc, #212]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7fe fa66 	bl	8000eb8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029ee:	e009      	b.n	8002a04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f0:	f7fe fa62 	bl	8000eb8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	73fb      	strb	r3, [r7, #15]
        break;
 8002a02:	e005      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ef      	bne.n	80029f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d14a      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6892      	ldr	r2, [r2, #8]
 8002a2c:	0211      	lsls	r1, r2, #8
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	0912      	lsrs	r2, r2, #4
 8002a34:	0452      	lsls	r2, r2, #17
 8002a36:	430a      	orrs	r2, r1
 8002a38:	491f      	ldr	r1, [pc, #124]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	614b      	str	r3, [r1, #20]
 8002a3e:	e011      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	0211      	lsls	r1, r2, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6912      	ldr	r2, [r2, #16]
 8002a56:	0852      	lsrs	r2, r2, #1
 8002a58:	3a01      	subs	r2, #1
 8002a5a:	0652      	lsls	r2, r2, #25
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fa22 	bl	8000eb8 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a76:	e009      	b.n	8002a8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a78:	f7fe fa1e 	bl	8000eb8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d902      	bls.n	8002a8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	73fb      	strb	r3, [r7, #15]
          break;
 8002a8a:	e005      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ef      	beq.n	8002a78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d079      	beq.n	8002bc2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd ffe4 	bl	8000ab0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d058      	beq.n	8002bb0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	22ca      	movs	r2, #202	; 0xca
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2253      	movs	r2, #83	; 0x53
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fbda 	bl	80032c8 <RTC_EnterInitMode>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d127      	bne.n	8002b6e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b30:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68d2      	ldr	r2, [r2, #12]
 8002b58:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6919      	ldr	r1, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fbde 	bl	8003330 <RTC_ExitInitMode>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0203 	bic.w	r2, r2, #3
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
 8002bae:	e001      	b.n	8002bb4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_RTC_SetTime+0x1a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e08b      	b.n	8002cfe <HAL_RTC_SetTime+0x132>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	22ca      	movs	r2, #202	; 0xca
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2253      	movs	r2, #83	; 0x53
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fb5e 	bl	80032c8 <RTC_EnterInitMode>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d163      	bne.n	8002cde <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d126      	bne.n	8002c6a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fbb9 	bl	80033ac <RTC_ByteToBcd2>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fbb2 	bl	80033ac <RTC_ByteToBcd2>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c4c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fbaa 	bl	80033ac <RTC_ByteToBcd2>
 8002c58:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c5a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e018      	b.n	8002c9c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	785b      	ldrb	r3, [r3, #1]
 8002c88:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c8a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c90:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	78db      	ldrb	r3, [r3, #3]
 8002c96:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ca6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002caa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fb2b 	bl	8003330 <RTC_ExitInitMode>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22ff      	movs	r2, #255	; 0xff
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd90      	pop	{r4, r7, pc}

08002d06 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d38:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	0d9b      	lsrs	r3, r3, #22
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d11a      	bne.n	8002db4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fb32 	bl	80033ec <RTC_Bcd2ToByte>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fb29 	bl	80033ec <RTC_Bcd2ToByte>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fb20 	bl	80033ec <RTC_Bcd2ToByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dbe:	b590      	push	{r4, r7, lr}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RTC_SetDate+0x1a>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e075      	b.n	8002ec4 <HAL_RTC_SetDate+0x106>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_RTC_SetDate+0x4e>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	330a      	adds	r3, #10
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11c      	bne.n	8002e4c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fac8 	bl	80033ac <RTC_ByteToBcd2>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	785b      	ldrb	r3, [r3, #1]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fac1 	bl	80033ac <RTC_ByteToBcd2>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e2e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fab9 	bl	80033ac <RTC_ByteToBcd2>
 8002e3a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e3c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e00e      	b.n	8002e6a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	78db      	ldrb	r3, [r3, #3]
 8002e50:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e58:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e5e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	22ca      	movs	r2, #202	; 0xca
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2253      	movs	r2, #83	; 0x53
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa24 	bl	80032c8 <RTC_EnterInitMode>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002e94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002e98:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fa48 	bl	8003330 <RTC_ExitInitMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002ec2:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}

08002ecc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	0b5b      	lsrs	r3, r3, #13
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11a      	bne.n	8002f5c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	78db      	ldrb	r3, [r3, #3]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fa5e 	bl	80033ec <RTC_Bcd2ToByte>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa55 	bl	80033ec <RTC_Bcd2ToByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa4c 	bl	80033ec <RTC_Bcd2ToByte>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RTC_SetAlarm_IT+0x1a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e127      	b.n	80031d2 <HAL_RTC_SetAlarm_IT+0x26a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d137      	bne.n	8003008 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f9fb 	bl	80033ac <RTC_ByteToBcd2>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f9f4 	bl	80033ac <RTC_ByteToBcd2>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002fc8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	789b      	ldrb	r3, [r3, #2]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f9ec 	bl	80033ac <RTC_ByteToBcd2>
 8002fd4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002fd6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002fe0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f9de 	bl	80033ac <RTC_ByteToBcd2>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002ff4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002ffc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003002:	4313      	orrs	r3, r2
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e023      	b.n	8003050 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003028:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800302e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	78db      	ldrb	r3, [r3, #3]
 8003034:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003036:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003040:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003046:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800304c:	4313      	orrs	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	22ca      	movs	r2, #202	; 0xca
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2253      	movs	r2, #83	; 0x53
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d14a      	bne.n	800310c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003084:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	b2da      	uxtb	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003096:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003098:	f7fd ff0e 	bl	8000eb8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800309e:	e015      	b.n	80030cc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030a0:	f7fd ff0a 	bl	8000eb8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	d90d      	bls.n	80030cc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	22ff      	movs	r2, #255	; 0xff
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e082      	b.n	80031d2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0e2      	beq.n	80030a0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	e049      	b.n	80031a0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800311a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f462 7220 	orn	r2, r2, #640	; 0x280
 800312c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800312e:	f7fd fec3 	bl	8000eb8 <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003134:	e015      	b.n	8003162 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003136:	f7fd febf 	bl	8000eb8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003144:	d90d      	bls.n	8003162 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e037      	b.n	80031d2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0e2      	beq.n	8003136 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_RTC_SetAlarm_IT+0x274>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_RTC_SetAlarm_IT+0x274>)
 80031a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RTC_SetAlarm_IT+0x274>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RTC_SetAlarm_IT+0x274>)
 80031b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	22ff      	movs	r2, #255	; 0xff
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <HAL_RTC_AlarmIRQHandler+0x88>)
 80031ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80031ee:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800321c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f824 	bl	800326c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003250:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f96f 	bl	8003536 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40010400 	.word	0x40010400

0800326c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0d      	ldr	r2, [pc, #52]	; (80032c4 <HAL_RTC_WaitForSynchro+0x44>)
 800328e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003290:	f7fd fe12 	bl	8000eb8 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003296:	e009      	b.n	80032ac <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003298:	f7fd fe0e 	bl	8000eb8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a6:	d901      	bls.n	80032ac <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e007      	b.n	80032bc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ee      	beq.n	8003298 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0003ff5f 	.word	0x0003ff5f

080032c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d120      	bne.n	8003324 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ea:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032ec:	f7fd fde4 	bl	8000eb8 <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032f2:	e00d      	b.n	8003310 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80032f4:	f7fd fde0 	bl	8000eb8 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003302:	d905      	bls.n	8003310 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <RTC_EnterInitMode+0x5c>
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d1e7      	bne.n	80032f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003324:	7bfb      	ldrb	r3, [r7, #15]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <RTC_ExitInitMode+0x78>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <RTC_ExitInitMode+0x78>)
 8003342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003346:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <RTC_ExitInitMode+0x78>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff93 	bl	8003280 <HAL_RTC_WaitForSynchro>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01e      	beq.n	800339e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2203      	movs	r2, #3
 8003364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e017      	b.n	800339e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <RTC_ExitInitMode+0x78>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <RTC_ExitInitMode+0x78>)
 8003374:	f023 0320 	bic.w	r3, r3, #32
 8003378:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff80 	bl	8003280 <HAL_RTC_WaitForSynchro>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <RTC_ExitInitMode+0x78>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <RTC_ExitInitMode+0x78>)
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40002800 	.word	0x40002800

080033ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80033be:	e005      	b.n	80033cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	3b0a      	subs	r3, #10
 80033ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	2b09      	cmp	r3, #9
 80033d0:	d8f6      	bhi.n	80033c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	4313      	orrs	r3, r2
 80033de:	b2db      	uxtb	r3, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4413      	add	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	b2da      	uxtb	r2, r3
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	4413      	add	r3, r2
 8003412:	b2db      	uxtb	r3, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8003434:	2302      	movs	r3, #2
 8003436:	e034      	b.n	80034a2 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	22ca      	movs	r2, #202	; 0xca
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2253      	movs	r2, #83	; 0x53
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003466:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6899      	ldr	r1, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003486:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_RTCEx_SetRefClock+0x16>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e034      	b.n	800352e <HAL_RTCEx_SetRefClock+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	22ca      	movs	r2, #202	; 0xca
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2253      	movs	r2, #83	; 0x53
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff feef 	bl	80032c8 <RTC_EnterInitMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10c      	bne.n	800350e <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0210 	orr.w	r2, r2, #16
 8003502:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff13 	bl	8003330 <RTC_ExitInitMode>
 800350a:	4603      	mov	r3, r0
 800350c:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e049      	b.n	80035f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f841 	bl	80035f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f000 f9d9 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e04f      	b.n	80036c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01d      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d018      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1e      	ldr	r2, [pc, #120]	; (80036d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <HAL_TIM_Base_Start_IT+0xd0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_Base_Start_IT+0x76>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d115      	bne.n	80036ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800368a:	4013      	ands	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d015      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369a:	d011      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	e008      	b.n	80036c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e000      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40013400 	.word	0x40013400
 80036e4:	40014000 	.word	0x40014000
 80036e8:	00010007 	.word	0x00010007

080036ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d020      	beq.n	8003750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0202 	mvn.w	r2, #2
 8003720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8e4 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f8d6 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8e7 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d020      	beq.n	800379c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0204 	mvn.w	r2, #4
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8be 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8b0 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8c1 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d020      	beq.n	80037e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f898 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f88a 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f89b 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2208      	movs	r2, #8
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f872 	bl	8003904 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f864 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f875 	bl	8003918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0201 	mvn.w	r2, #1
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd f8ec 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f906 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8fe 	bl	8003a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f834 	bl	800392c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0220 	mvn.w	r2, #32
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8c6 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d01b      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d017      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0x9a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40013400 	.word	0x40013400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e040      	b.n	8003b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd f852 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fb6a 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f8af 	bl	8003c60 <UART_SetConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e01b      	b.n	8003b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fbe9 	bl	8004314 <UART_CheckIdleState>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d178      	bne.n	8003c56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Transmit+0x24>
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e071      	b.n	8003c58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2221      	movs	r2, #33	; 0x21
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b82:	f7fd f999 	bl	8000eb8 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d108      	bne.n	8003bb4 <HAL_UART_Transmit+0x68>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e003      	b.n	8003bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bbc:	e030      	b.n	8003c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fc4b 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e03c      	b.n	8003c58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	881a      	ldrh	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e008      	b.n	8003c0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	b292      	uxth	r2, r2
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1c8      	bne.n	8003bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	2140      	movs	r1, #64	; 0x40
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fc14 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e005      	b.n	8003c58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c64:	b08a      	sub	sp, #40	; 0x28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4ba4      	ldr	r3, [pc, #656]	; (8003f20 <UART_SetConfig+0x2c0>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a99      	ldr	r2, [pc, #612]	; (8003f24 <UART_SetConfig+0x2c4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a90      	ldr	r2, [pc, #576]	; (8003f28 <UART_SetConfig+0x2c8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d126      	bne.n	8003d38 <UART_SetConfig+0xd8>
 8003cea:	4b90      	ldr	r3, [pc, #576]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d81b      	bhi.n	8003d30 <UART_SetConfig+0xd0>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <UART_SetConfig+0xa0>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d19 	.word	0x08003d19
 8003d0c:	08003d29 	.word	0x08003d29
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d16:	e116      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1e:	e112      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d20:	2304      	movs	r3, #4
 8003d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d26:	e10e      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e10a      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d30:	2310      	movs	r3, #16
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e106      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a7c      	ldr	r2, [pc, #496]	; (8003f30 <UART_SetConfig+0x2d0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d138      	bne.n	8003db4 <UART_SetConfig+0x154>
 8003d42:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d82d      	bhi.n	8003dac <UART_SetConfig+0x14c>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0xf8>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d8d 	.word	0x08003d8d
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003dad 	.word	0x08003dad
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003da5 	.word	0x08003da5
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e0d8      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e0d4      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e0d0      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e0cc      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e0c8      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a5e      	ldr	r2, [pc, #376]	; (8003f34 <UART_SetConfig+0x2d4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d125      	bne.n	8003e0a <UART_SetConfig+0x1aa>
 8003dbe:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d016      	beq.n	8003dfa <UART_SetConfig+0x19a>
 8003dcc:	2b30      	cmp	r3, #48	; 0x30
 8003dce:	d818      	bhi.n	8003e02 <UART_SetConfig+0x1a2>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d00a      	beq.n	8003dea <UART_SetConfig+0x18a>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d814      	bhi.n	8003e02 <UART_SetConfig+0x1a2>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <UART_SetConfig+0x182>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d008      	beq.n	8003df2 <UART_SetConfig+0x192>
 8003de0:	e00f      	b.n	8003e02 <UART_SetConfig+0x1a2>
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de8:	e0ad      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003dea:	2302      	movs	r3, #2
 8003dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df0:	e0a9      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003df2:	2304      	movs	r3, #4
 8003df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df8:	e0a5      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e00:	e0a1      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e02:	2310      	movs	r3, #16
 8003e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e08:	e09d      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a4a      	ldr	r2, [pc, #296]	; (8003f38 <UART_SetConfig+0x2d8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d125      	bne.n	8003e60 <UART_SetConfig+0x200>
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e20:	d016      	beq.n	8003e50 <UART_SetConfig+0x1f0>
 8003e22:	2bc0      	cmp	r3, #192	; 0xc0
 8003e24:	d818      	bhi.n	8003e58 <UART_SetConfig+0x1f8>
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d00a      	beq.n	8003e40 <UART_SetConfig+0x1e0>
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d814      	bhi.n	8003e58 <UART_SetConfig+0x1f8>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <UART_SetConfig+0x1d8>
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d008      	beq.n	8003e48 <UART_SetConfig+0x1e8>
 8003e36:	e00f      	b.n	8003e58 <UART_SetConfig+0x1f8>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e082      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e40:	2302      	movs	r3, #2
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e07e      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4e:	e07a      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e50:	2308      	movs	r3, #8
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e076      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e072      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a35      	ldr	r2, [pc, #212]	; (8003f3c <UART_SetConfig+0x2dc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d12a      	bne.n	8003ec0 <UART_SetConfig+0x260>
 8003e6a:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e78:	d01a      	beq.n	8003eb0 <UART_SetConfig+0x250>
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d81b      	bhi.n	8003eb8 <UART_SetConfig+0x258>
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d00c      	beq.n	8003ea0 <UART_SetConfig+0x240>
 8003e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8a:	d815      	bhi.n	8003eb8 <UART_SetConfig+0x258>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <UART_SetConfig+0x238>
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d008      	beq.n	8003ea8 <UART_SetConfig+0x248>
 8003e96:	e00f      	b.n	8003eb8 <UART_SetConfig+0x258>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e052      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e04e      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e04a      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e046      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e042      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <UART_SetConfig+0x2c4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d13a      	bne.n	8003f40 <UART_SetConfig+0x2e0>
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <UART_SetConfig+0x2cc>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ed8:	d01a      	beq.n	8003f10 <UART_SetConfig+0x2b0>
 8003eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ede:	d81b      	bhi.n	8003f18 <UART_SetConfig+0x2b8>
 8003ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee4:	d00c      	beq.n	8003f00 <UART_SetConfig+0x2a0>
 8003ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eea:	d815      	bhi.n	8003f18 <UART_SetConfig+0x2b8>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <UART_SetConfig+0x298>
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d008      	beq.n	8003f08 <UART_SetConfig+0x2a8>
 8003ef6:	e00f      	b.n	8003f18 <UART_SetConfig+0x2b8>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e022      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e01e      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e01a      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e016      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e012      	b.n	8003f46 <UART_SetConfig+0x2e6>
 8003f20:	efff69f3 	.word	0xefff69f3
 8003f24:	40008000 	.word	0x40008000
 8003f28:	40013800 	.word	0x40013800
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40004400 	.word	0x40004400
 8003f34:	40004800 	.word	0x40004800
 8003f38:	40004c00 	.word	0x40004c00
 8003f3c:	40005000 	.word	0x40005000
 8003f40:	2310      	movs	r3, #16
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a9f      	ldr	r2, [pc, #636]	; (80041c8 <UART_SetConfig+0x568>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d17a      	bne.n	8004046 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d824      	bhi.n	8003fa2 <UART_SetConfig+0x342>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <UART_SetConfig+0x300>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f85 	.word	0x08003f85
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003f93 	.word	0x08003f93
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fa3 	.word	0x08003fa3
 8003f80:	08003f9b 	.word	0x08003f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f84:	f7fe f820 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8003f88:	61f8      	str	r0, [r7, #28]
        break;
 8003f8a:	e010      	b.n	8003fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <UART_SetConfig+0x56c>)
 8003f8e:	61fb      	str	r3, [r7, #28]
        break;
 8003f90:	e00d      	b.n	8003fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fd ff81 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8003f96:	61f8      	str	r0, [r7, #28]
        break;
 8003f98:	e009      	b.n	8003fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f9e:	61fb      	str	r3, [r7, #28]
        break;
 8003fa0:	e005      	b.n	8003fae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80fb 	beq.w	80041ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d305      	bcc.n	8003fd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d903      	bls.n	8003fda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fd8:	e0e8      	b.n	80041ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	461c      	mov	r4, r3
 8003fe0:	4615      	mov	r5, r2
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	022b      	lsls	r3, r5, #8
 8003fec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ff0:	0222      	lsls	r2, r4, #8
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	6849      	ldr	r1, [r1, #4]
 8003ff6:	0849      	lsrs	r1, r1, #1
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4688      	mov	r8, r1
 8003ffc:	4681      	mov	r9, r0
 8003ffe:	eb12 0a08 	adds.w	sl, r2, r8
 8004002:	eb43 0b09 	adc.w	fp, r3, r9
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004014:	4650      	mov	r0, sl
 8004016:	4659      	mov	r1, fp
 8004018:	f7fc f92a 	bl	8000270 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d308      	bcc.n	800403e <UART_SetConfig+0x3de>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004032:	d204      	bcs.n	800403e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e0b6      	b.n	80041ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004044:	e0b2      	b.n	80041ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	d15e      	bne.n	800410e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004054:	2b08      	cmp	r3, #8
 8004056:	d828      	bhi.n	80040aa <UART_SetConfig+0x44a>
 8004058:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <UART_SetConfig+0x400>)
 800405a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405e:	bf00      	nop
 8004060:	08004085 	.word	0x08004085
 8004064:	0800408d 	.word	0x0800408d
 8004068:	08004095 	.word	0x08004095
 800406c:	080040ab 	.word	0x080040ab
 8004070:	0800409b 	.word	0x0800409b
 8004074:	080040ab 	.word	0x080040ab
 8004078:	080040ab 	.word	0x080040ab
 800407c:	080040ab 	.word	0x080040ab
 8004080:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004084:	f7fd ffa0 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8004088:	61f8      	str	r0, [r7, #28]
        break;
 800408a:	e014      	b.n	80040b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fd ffb2 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 8004090:	61f8      	str	r0, [r7, #28]
        break;
 8004092:	e010      	b.n	80040b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004094:	4b4d      	ldr	r3, [pc, #308]	; (80041cc <UART_SetConfig+0x56c>)
 8004096:	61fb      	str	r3, [r7, #28]
        break;
 8004098:	e00d      	b.n	80040b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fd fefd 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800409e:	61f8      	str	r0, [r7, #28]
        break;
 80040a0:	e009      	b.n	80040b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	61fb      	str	r3, [r7, #28]
        break;
 80040a8:	e005      	b.n	80040b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d077      	beq.n	80041ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005a      	lsls	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b0f      	cmp	r3, #15
 80040d6:	d916      	bls.n	8004106 <UART_SetConfig+0x4a6>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040de:	d212      	bcs.n	8004106 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	8afb      	ldrh	r3, [r7, #22]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	8afa      	ldrh	r2, [r7, #22]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e052      	b.n	80041ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800410c:	e04e      	b.n	80041ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004112:	2b08      	cmp	r3, #8
 8004114:	d827      	bhi.n	8004166 <UART_SetConfig+0x506>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x4bc>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	08004167 	.word	0x08004167
 800412c:	08004157 	.word	0x08004157
 8004130:	08004167 	.word	0x08004167
 8004134:	08004167 	.word	0x08004167
 8004138:	08004167 	.word	0x08004167
 800413c:	0800415f 	.word	0x0800415f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fd ff42 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8004144:	61f8      	str	r0, [r7, #28]
        break;
 8004146:	e014      	b.n	8004172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fd ff54 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 800414c:	61f8      	str	r0, [r7, #28]
        break;
 800414e:	e010      	b.n	8004172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004150:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <UART_SetConfig+0x56c>)
 8004152:	61fb      	str	r3, [r7, #28]
        break;
 8004154:	e00d      	b.n	8004172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004156:	f7fd fe9f 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 800415a:	61f8      	str	r0, [r7, #28]
        break;
 800415c:	e009      	b.n	8004172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004162:	61fb      	str	r3, [r7, #28]
        break;
 8004164:	e005      	b.n	8004172 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004170:	bf00      	nop
    }

    if (pclk != 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085a      	lsrs	r2, r3, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	441a      	add	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d909      	bls.n	80041a6 <UART_SetConfig+0x546>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004198:	d205      	bcs.n	80041a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e002      	b.n	80041ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3728      	adds	r7, #40	; 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	40008000 	.word	0x40008000
 80041cc:	00f42400 	.word	0x00f42400

080041d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d10a      	bne.n	80042e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b098      	sub	sp, #96	; 0x60
 8004318:	af02      	add	r7, sp, #8
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004324:	f7fc fdc8 	bl	8000eb8 <HAL_GetTick>
 8004328:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b08      	cmp	r3, #8
 8004336:	d12e      	bne.n	8004396 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f88c 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d021      	beq.n	8004396 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
 8004372:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e062      	b.n	800445c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d149      	bne.n	8004438 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ac:	2200      	movs	r2, #0
 80043ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f856 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d03c      	beq.n	8004438 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	623b      	str	r3, [r7, #32]
   return(result);
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
 80043de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e6      	bne.n	80043be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3308      	adds	r3, #8
 80043f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	64bb      	str	r3, [r7, #72]	; 0x48
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004410:	61fa      	str	r2, [r7, #28]
 8004412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	617b      	str	r3, [r7, #20]
   return(result);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e011      	b.n	800445c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3758      	adds	r7, #88	; 0x58
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	e049      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d045      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fc fd1b 	bl	8000eb8 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <UART_WaitOnFlagUntilTimeout+0x30>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e048      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d031      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d110      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2208      	movs	r2, #8
 80044ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f838 	bl	8004532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2208      	movs	r2, #8
 80044c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e029      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e4:	d111      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f81e 	bl	8004532 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e00f      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d0a6      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004532:	b480      	push	{r7}
 8004534:	b095      	sub	sp, #84	; 0x54
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004558:	643b      	str	r3, [r7, #64]	; 0x40
 800455a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	61fb      	str	r3, [r7, #28]
   return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	64bb      	str	r3, [r7, #72]	; 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d118      	bne.n	80045da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f023 0310 	bic.w	r3, r3, #16
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	613b      	str	r3, [r7, #16]
   return(result);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e6      	bne.n	80045a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045ee:	bf00      	nop
 80045f0:	3754      	adds	r7, #84	; 0x54
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <__NVIC_SetPriority>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	; (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <SysTick_Handler+0x1c>)
 8004656:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004658:	f001 fe34 	bl	80062c4 <xTaskGetSchedulerState>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004662:	f002 fc19 	bl	8006e98 <xPortSysTickHandler>
  }
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	e000e010 	.word	0xe000e010

08004670 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004674:	2100      	movs	r1, #0
 8004676:	f06f 0004 	mvn.w	r0, #4
 800467a:	f7ff ffbf 	bl	80045fc <__NVIC_SetPriority>
#endif
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	603b      	str	r3, [r7, #0]
  return(result);
 8004690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004696:	f06f 0305 	mvn.w	r3, #5
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e00c      	b.n	80046b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <osKernelInitialize+0x44>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <osKernelInitialize+0x44>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	e002      	b.n	80046b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046b2:	f04f 33ff 	mov.w	r3, #4294967295
 80046b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046b8:	687b      	ldr	r3, [r7, #4]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	200001ec 	.word	0x200001ec

080046cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d2:	f3ef 8305 	mrs	r3, IPSR
 80046d6:	603b      	str	r3, [r7, #0]
  return(result);
 80046d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046de:	f06f 0305 	mvn.w	r3, #5
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	e010      	b.n	8004708 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <osKernelStart+0x48>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d109      	bne.n	8004702 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046ee:	f7ff ffbf 	bl	8004670 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <osKernelStart+0x48>)
 80046f4:	2202      	movs	r2, #2
 80046f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046f8:	f001 f988 	bl	8005a0c <vTaskStartScheduler>
      stat = osOK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	e002      	b.n	8004708 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004708:	687b      	ldr	r3, [r7, #4]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200001ec 	.word	0x200001ec

08004718 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b08e      	sub	sp, #56	; 0x38
 800471c:	af04      	add	r7, sp, #16
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004728:	f3ef 8305 	mrs	r3, IPSR
 800472c:	617b      	str	r3, [r7, #20]
  return(result);
 800472e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004730:	2b00      	cmp	r3, #0
 8004732:	d17e      	bne.n	8004832 <osThreadNew+0x11a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d07b      	beq.n	8004832 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800473e:	2318      	movs	r3, #24
 8004740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d045      	beq.n	80047de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <osThreadNew+0x48>
        name = attr->name;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <osThreadNew+0x6e>
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b38      	cmp	r3, #56	; 0x38
 8004778:	d805      	bhi.n	8004786 <osThreadNew+0x6e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <osThreadNew+0x72>
        return (NULL);
 8004786:	2300      	movs	r3, #0
 8004788:	e054      	b.n	8004834 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <osThreadNew+0xa8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2ba7      	cmp	r3, #167	; 0xa7
 80047a8:	d90a      	bls.n	80047c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d006      	beq.n	80047c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <osThreadNew+0xa8>
        mem = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e010      	b.n	80047e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10c      	bne.n	80047e2 <osThreadNew+0xca>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <osThreadNew+0xca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <osThreadNew+0xca>
          mem = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e001      	b.n	80047e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d110      	bne.n	800480a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6a3a      	ldr	r2, [r7, #32]
 80047fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 ff18 	bl	8005634 <xTaskCreateStatic>
 8004804:	4603      	mov	r3, r0
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	e013      	b.n	8004832 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d110      	bne.n	8004832 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	b29a      	uxth	r2, r3
 8004814:	f107 0310 	add.w	r3, r7, #16
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 ff63 	bl	80056ee <xTaskCreate>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d001      	beq.n	8004832 <osThreadNew+0x11a>
            hTask = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004832:	693b      	ldr	r3, [r7, #16]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3728      	adds	r7, #40	; 0x28
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004844:	f3ef 8305 	mrs	r3, IPSR
 8004848:	60bb      	str	r3, [r7, #8]
  return(result);
 800484a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <osDelay+0x1c>
    stat = osErrorISR;
 8004850:	f06f 0305 	mvn.w	r3, #5
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e007      	b.n	8004868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 f89e 	bl	80059a4 <vTaskDelay>
    }
  }

  return (stat);
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800487e:	f3ef 8305 	mrs	r3, IPSR
 8004882:	60bb      	str	r3, [r7, #8]
  return(result);
 8004884:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004886:	2b00      	cmp	r3, #0
 8004888:	d174      	bne.n	8004974 <osMutexNew+0x102>
    if (attr != NULL) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	e001      	b.n	800489c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <osMutexNew+0x3a>
      rmtx = 1U;
 80048a6:	2301      	movs	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e001      	b.n	80048b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d15c      	bne.n	8004974 <osMutexNew+0x102>
      mem = -1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <osMutexNew+0x6a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b4f      	cmp	r3, #79	; 0x4f
 80048d4:	d902      	bls.n	80048dc <osMutexNew+0x6a>
          mem = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e00c      	b.n	80048f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <osMutexNew+0x84>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <osMutexNew+0x84>
            mem = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e001      	b.n	80048f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d112      	bne.n	8004922 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4619      	mov	r1, r3
 8004908:	2004      	movs	r0, #4
 800490a:	f000 fa90 	bl	8004e2e <xQueueCreateMutexStatic>
 800490e:	61f8      	str	r0, [r7, #28]
 8004910:	e016      	b.n	8004940 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4619      	mov	r1, r3
 8004918:	2001      	movs	r0, #1
 800491a:	f000 fa88 	bl	8004e2e <xQueueCreateMutexStatic>
 800491e:	61f8      	str	r0, [r7, #28]
 8004920:	e00e      	b.n	8004940 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10b      	bne.n	8004940 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d004      	beq.n	8004938 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800492e:	2004      	movs	r0, #4
 8004930:	f000 fa65 	bl	8004dfe <xQueueCreateMutex>
 8004934:	61f8      	str	r0, [r7, #28]
 8004936:	e003      	b.n	8004940 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004938:	2001      	movs	r0, #1
 800493a:	f000 fa60 	bl	8004dfe <xQueueCreateMutex>
 800493e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00c      	beq.n	8004960 <osMutexNew+0xee>
        if (attr != NULL) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <osMutexNew+0xe2>
          name = attr->name;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e001      	b.n	8004958 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	69f8      	ldr	r0, [r7, #28]
 800495c:	f000 fe0c 	bl	8005578 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <osMutexNew+0x102>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004974:	69fb      	ldr	r3, [r7, #28]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a07      	ldr	r2, [pc, #28]	; (80049ac <vApplicationGetIdleTaskMemory+0x2c>)
 8004990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <vApplicationGetIdleTaskMemory+0x30>)
 8004996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2280      	movs	r2, #128	; 0x80
 800499c:	601a      	str	r2, [r3, #0]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	200001f0 	.word	0x200001f0
 80049b0:	20000298 	.word	0x20000298

080049b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80049c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4a06      	ldr	r2, [pc, #24]	; (80049e4 <vApplicationGetTimerTaskMemory+0x30>)
 80049ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000498 	.word	0x20000498
 80049e4:	20000540 	.word	0x20000540

080049e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f103 0208 	add.w	r2, r3, #8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f103 0208 	add.w	r2, r3, #8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 0208 	add.w	r2, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	601a      	str	r2, [r3, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d103      	bne.n	8004aaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e00c      	b.n	8004ac4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3308      	adds	r3, #8
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e002      	b.n	8004ab8 <vListInsert+0x2e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d2f6      	bcs.n	8004ab2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6852      	ldr	r2, [r2, #4]
 8004b1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d103      	bne.n	8004b30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b7a:	f002 f8fb 	bl	8006d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	441a      	add	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	3b01      	subs	r3, #1
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	441a      	add	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d114      	bne.n	8004bfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01a      	beq.n	8004c0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3310      	adds	r3, #16
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f9af 	bl	8005f40 <xTaskRemoveFromEventList>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d012      	beq.n	8004c0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <xQueueGenericReset+0xcc>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	e009      	b.n	8004c0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fef2 	bl	80049e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff feed 	bl	80049e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c0e:	f002 f8e1 	bl	8006dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08e      	sub	sp, #56	; 0x38
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <xQueueGenericCreateStatic+0x52>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <xQueueGenericCreateStatic+0x56>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <xQueueGenericCreateStatic+0x58>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	623b      	str	r3, [r7, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <xQueueGenericCreateStatic+0x7e>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <xQueueGenericCreateStatic+0x82>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueGenericCreateStatic+0x84>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61fb      	str	r3, [r7, #28]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cbe:	2350      	movs	r3, #80	; 0x50
 8004cc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d00a      	beq.n	8004cde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61bb      	str	r3, [r7, #24]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f83f 	bl	8004d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3730      	adds	r7, #48	; 0x30
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	613b      	str	r3, [r7, #16]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3350      	adds	r3, #80	; 0x50
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 f935 	bl	8006fb8 <pvPortMalloc>
 8004d4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d011      	beq.n	8004d7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	3350      	adds	r3, #80	; 0x50
 8004d5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d68:	79fa      	ldrb	r2, [r7, #7]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f805 	bl	8004d84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d103      	bne.n	8004da0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004db2:	2101      	movs	r1, #1
 8004db4:	69b8      	ldr	r0, [r7, #24]
 8004db6:	f7ff fecb 	bl	8004b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004dea:	2300      	movs	r3, #0
 8004dec:	2200      	movs	r2, #0
 8004dee:	2100      	movs	r1, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f837 	bl	8004e64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	4603      	mov	r3, r0
 8004e06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	461a      	mov	r2, r3
 8004e14:	6939      	ldr	r1, [r7, #16]
 8004e16:	6978      	ldr	r0, [r7, #20]
 8004e18:	f7ff ff7a 	bl	8004d10 <xQueueGenericCreate>
 8004e1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff ffd3 	bl	8004dca <prvInitialiseMutex>

		return xNewQueue;
 8004e24:	68fb      	ldr	r3, [r7, #12]
	}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af02      	add	r7, sp, #8
 8004e34:	4603      	mov	r3, r0
 8004e36:	6039      	str	r1, [r7, #0]
 8004e38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	6939      	ldr	r1, [r7, #16]
 8004e4c:	6978      	ldr	r0, [r7, #20]
 8004e4e:	f7ff fee7 	bl	8004c20 <xQueueGenericCreateStatic>
 8004e52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff ffb8 	bl	8004dca <prvInitialiseMutex>

		return xNewQueue;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08e      	sub	sp, #56	; 0x38
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e72:	2300      	movs	r3, #0
 8004e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueGenericSend+0x32>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d103      	bne.n	8004ea4 <xQueueGenericSend+0x40>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <xQueueGenericSend+0x44>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <xQueueGenericSend+0x46>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <xQueueGenericSend+0x60>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSend+0x6e>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <xQueueGenericSend+0x72>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueGenericSend+0x74>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <xQueueGenericSend+0x8e>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	623b      	str	r3, [r7, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ef2:	f001 f9e7 	bl	80062c4 <xTaskGetSchedulerState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <xQueueGenericSend+0x9e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSend+0xa2>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSend+0xa4>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61fb      	str	r3, [r7, #28]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f22:	f001 ff27 	bl	8006d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <xQueueGenericSend+0xd4>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d129      	bne.n	8004f8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	68b9      	ldr	r1, [r7, #8]
 8004f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f3e:	f000 fa0b 	bl	8005358 <prvCopyDataToQueue>
 8004f42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	3324      	adds	r3, #36	; 0x24
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fff5 	bl	8005f40 <xTaskRemoveFromEventList>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	; (800505c <xQueueGenericSend+0x1f8>)
 8004f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	e00a      	b.n	8004f84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <xQueueGenericSend+0x1f8>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f84:	f001 ff26 	bl	8006dd4 <vPortExitCritical>
				return pdPASS;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e063      	b.n	8005054 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f92:	f001 ff1f 	bl	8006dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e05c      	b.n	8005054 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f82f 	bl	8006008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fae:	f001 ff11 	bl	8006dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fb2:	f000 fd9b 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fb6:	f001 fedd 	bl	8006d74 <vPortEnterCritical>
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc0:	b25b      	sxtb	r3, r3
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d103      	bne.n	8004fd0 <xQueueGenericSend+0x16c>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x182>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fe6:	f001 fef5 	bl	8006dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fea:	1d3a      	adds	r2, r7, #4
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f81e 	bl	8006034 <xTaskCheckForTimeOut>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d124      	bne.n	8005048 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005000:	f000 faa2 	bl	8005548 <prvIsQueueFull>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	3310      	adds	r3, #16
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f000 ff44 	bl	8005ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501a:	f000 fa2d 	bl	8005478 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800501e:	f000 fd73 	bl	8005b08 <xTaskResumeAll>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f47f af7c 	bne.w	8004f22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800502a:	4b0c      	ldr	r3, [pc, #48]	; (800505c <xQueueGenericSend+0x1f8>)
 800502c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	e772      	b.n	8004f22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800503c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800503e:	f000 fa1b 	bl	8005478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005042:	f000 fd61 	bl	8005b08 <xTaskResumeAll>
 8005046:	e76c      	b.n	8004f22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504a:	f000 fa15 	bl	8005478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800504e:	f000 fd5b 	bl	8005b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005052:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005054:	4618      	mov	r0, r3
 8005056:	3738      	adds	r7, #56	; 0x38
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b090      	sub	sp, #64	; 0x40
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <xQueueGenericSendFromISR+0x3c>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <xQueueGenericSendFromISR+0x40>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <xQueueGenericSendFromISR+0x42>
 80050a0:	2300      	movs	r3, #0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d103      	bne.n	80050ca <xQueueGenericSendFromISR+0x6a>
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <xQueueGenericSendFromISR+0x6e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueGenericSendFromISR+0x70>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10a      	bne.n	80050ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	623b      	str	r3, [r7, #32]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050ea:	f001 ff25 	bl	8006f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050ee:	f3ef 8211 	mrs	r2, BASEPRI
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61fa      	str	r2, [r7, #28]
 8005104:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005106:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <xQueueGenericSendFromISR+0xbc>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d12f      	bne.n	800517c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005132:	f000 f911 	bl	8005358 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005136:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d112      	bne.n	8005166 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fef7 	bl	8005f40 <xTaskRemoveFromEventList>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00e      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005166:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800516a:	3301      	adds	r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	b25a      	sxtb	r2, r3
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005176:	2301      	movs	r3, #1
 8005178:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800517a:	e001      	b.n	8005180 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800518a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800518e:	4618      	mov	r0, r3
 8005190:	3740      	adds	r7, #64	; 0x40
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	; 0x30
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <xQueueReceive+0x30>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	623b      	str	r3, [r7, #32]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <xQueueReceive+0x3e>
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <xQueueReceive+0x42>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueReceive+0x44>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xQueueReceive+0x5e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61fb      	str	r3, [r7, #28]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051f6:	f001 f865 	bl	80062c4 <xTaskGetSchedulerState>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <xQueueReceive+0x6e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <xQueueReceive+0x72>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueReceive+0x74>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <xQueueReceive+0x8e>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61bb      	str	r3, [r7, #24]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005226:	f001 fda5 	bl	8006d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01f      	beq.n	8005276 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 f8f7 	bl	800542c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3310      	adds	r3, #16
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fe74 	bl	8005f40 <xTaskRemoveFromEventList>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525e:	4b3d      	ldr	r3, [pc, #244]	; (8005354 <xQueueReceive+0x1bc>)
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526e:	f001 fdb1 	bl	8006dd4 <vPortExitCritical>
				return pdPASS;
 8005272:	2301      	movs	r3, #1
 8005274:	e069      	b.n	800534a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800527c:	f001 fdaa 	bl	8006dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005280:	2300      	movs	r3, #0
 8005282:	e062      	b.n	800534a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4618      	mov	r0, r3
 8005290:	f000 feba 	bl	8006008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005298:	f001 fd9c 	bl	8006dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800529c:	f000 fc26 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052a0:	f001 fd68 	bl	8006d74 <vPortEnterCritical>
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d103      	bne.n	80052ba <xQueueReceive+0x122>
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d103      	bne.n	80052d0 <xQueueReceive+0x138>
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052d0:	f001 fd80 	bl	8006dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052d4:	1d3a      	adds	r2, r7, #4
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fea9 	bl	8006034 <xTaskCheckForTimeOut>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d123      	bne.n	8005330 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f000 f917 	bl	800551c <prvIsQueueEmpty>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fdcf 	bl	8005ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005304:	f000 f8b8 	bl	8005478 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005308:	f000 fbfe 	bl	8005b08 <xTaskResumeAll>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d189      	bne.n	8005226 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005312:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xQueueReceive+0x1bc>)
 8005314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	e780      	b.n	8005226 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005326:	f000 f8a7 	bl	8005478 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800532a:	f000 fbed 	bl	8005b08 <xTaskResumeAll>
 800532e:	e77a      	b.n	8005226 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	f000 f8a1 	bl	8005478 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005336:	f000 fbe7 	bl	8005b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f000 f8ee 	bl	800551c <prvIsQueueEmpty>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f43f af6f 	beq.w	8005226 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800534a:	4618      	mov	r0, r3
 800534c:	3730      	adds	r7, #48	; 0x30
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d14d      	bne.n	800541a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 ffbc 	bl	8006300 <xTaskPriorityDisinherit>
 8005388:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	e043      	b.n	800541a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d119      	bne.n	80053cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6858      	ldr	r0, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	461a      	mov	r2, r3
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	f001 ff10 	bl	80071c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d32b      	bcc.n	800541a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	605a      	str	r2, [r3, #4]
 80053ca:	e026      	b.n	800541a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68d8      	ldr	r0, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	461a      	mov	r2, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	f001 fef6 	bl	80071c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	425b      	negs	r3, r3
 80053e6:	441a      	add	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d207      	bcs.n	8005408 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	425b      	negs	r3, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d105      	bne.n	800541a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	3b01      	subs	r3, #1
 8005418:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005422:	697b      	ldr	r3, [r7, #20]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	429a      	cmp	r2, r3
 8005456:	d303      	bcc.n	8005460 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68d9      	ldr	r1, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	461a      	mov	r2, r3
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	f001 feac 	bl	80071c8 <memcpy>
	}
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005480:	f001 fc78 	bl	8006d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800548c:	e011      	b.n	80054b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d012      	beq.n	80054bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fd50 	bl	8005f40 <xTaskRemoveFromEventList>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054a6:	f000 fe27 	bl	80060f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	dce9      	bgt.n	800548e <prvUnlockQueue+0x16>
 80054ba:	e000      	b.n	80054be <prvUnlockQueue+0x46>
					break;
 80054bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	22ff      	movs	r2, #255	; 0xff
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054c6:	f001 fc85 	bl	8006dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ca:	f001 fc53 	bl	8006d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054d6:	e011      	b.n	80054fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3310      	adds	r3, #16
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fd2b 	bl	8005f40 <xTaskRemoveFromEventList>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054f0:	f000 fe02 	bl	80060f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005500:	2b00      	cmp	r3, #0
 8005502:	dce9      	bgt.n	80054d8 <prvUnlockQueue+0x60>
 8005504:	e000      	b.n	8005508 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005506:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005510:	f001 fc60 	bl	8006dd4 <vPortExitCritical>
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005524:	f001 fc26 	bl	8006d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005530:	2301      	movs	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e001      	b.n	800553a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800553a:	f001 fc4b 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 800553e:	68fb      	ldr	r3, [r7, #12]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005550:	f001 fc10 	bl	8006d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	429a      	cmp	r2, r3
 800555e:	d102      	bne.n	8005566 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e001      	b.n	800556a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556a:	f001 fc33 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	e014      	b.n	80055b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005588:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <vQueueAddToRegistry+0x50>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005594:	490c      	ldr	r1, [pc, #48]	; (80055c8 <vQueueAddToRegistry+0x50>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <vQueueAddToRegistry+0x50>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055aa:	e006      	b.n	80055ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d9e7      	bls.n	8005588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055b8:	bf00      	nop
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000940 	.word	0x20000940

080055cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055dc:	f001 fbca 	bl	8006d74 <vPortEnterCritical>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e6:	b25b      	sxtb	r3, r3
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d103      	bne.n	80055f6 <vQueueWaitForMessageRestricted+0x2a>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fc:	b25b      	sxtb	r3, r3
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d103      	bne.n	800560c <vQueueWaitForMessageRestricted+0x40>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800560c:	f001 fbe2 	bl	8006dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fc61 	bl	8005ee8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff ff26 	bl	8005478 <prvUnlockQueue>
	}
 800562c:	bf00      	nop
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af04      	add	r7, sp, #16
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	623b      	str	r3, [r7, #32]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xTaskCreateStatic+0x46>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61fb      	str	r3, [r7, #28]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800567a:	23a8      	movs	r3, #168	; 0xa8
 800567c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2ba8      	cmp	r3, #168	; 0xa8
 8005682:	d00a      	beq.n	800569a <xTaskCreateStatic+0x66>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61bb      	str	r3, [r7, #24]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800569a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01e      	beq.n	80056e0 <xTaskCreateStatic+0xac>
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2202      	movs	r2, #2
 80056b6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ba:	2300      	movs	r3, #0
 80056bc:	9303      	str	r3, [sp, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f850 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056da:	f000 f8f3 	bl	80058c4 <prvAddNewTaskToReadyList>
 80056de:	e001      	b.n	80056e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056e4:	697b      	ldr	r3, [r7, #20]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3728      	adds	r7, #40	; 0x28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08c      	sub	sp, #48	; 0x30
 80056f2:	af04      	add	r7, sp, #16
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fc58 	bl	8006fb8 <pvPortMalloc>
 8005708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005710:	20a8      	movs	r0, #168	; 0xa8
 8005712:	f001 fc51 	bl	8006fb8 <pvPortMalloc>
 8005716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
 8005724:	e005      	b.n	8005732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005726:	6978      	ldr	r0, [r7, #20]
 8005728:	f001 fc8c 	bl	8007044 <vPortFree>
 800572c:	e001      	b.n	8005732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005740:	88fa      	ldrh	r2, [r7, #6]
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f80e 	bl	8005778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800575c:	69f8      	ldr	r0, [r7, #28]
 800575e:	f000 f8b1 	bl	80058c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005762:	2301      	movs	r3, #1
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	e002      	b.n	800576e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800576e:	69bb      	ldr	r3, [r7, #24]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	461a      	mov	r2, r3
 8005790:	21a5      	movs	r1, #165	; 0xa5
 8005792:	f001 fc8f 	bl	80070b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057a0:	3b01      	subs	r3, #1
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	617b      	str	r3, [r7, #20]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e012      	b.n	8005802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	3334      	adds	r3, #52	; 0x34
 80057ec:	460a      	mov	r2, r1
 80057ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3301      	adds	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b0f      	cmp	r3, #15
 8005806:	d9e9      	bls.n	80057dc <prvInitialiseNewTask+0x64>
 8005808:	e000      	b.n	800580c <prvInitialiseNewTask+0x94>
			{
				break;
 800580a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	e003      	b.n	800581e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b37      	cmp	r3, #55	; 0x37
 8005822:	d901      	bls.n	8005828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005824:	2337      	movs	r3, #55	; 0x37
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f8f2 	bl	8004a28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	3318      	adds	r3, #24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff f8ed 	bl	8004a28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	3354      	adds	r3, #84	; 0x54
 8005878:	224c      	movs	r2, #76	; 0x4c
 800587a:	2100      	movs	r1, #0
 800587c:	4618      	mov	r0, r3
 800587e:	f001 fc19 	bl	80070b4 <memset>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	4a0c      	ldr	r2, [pc, #48]	; (80058b8 <prvInitialiseNewTask+0x140>)
 8005886:	659a      	str	r2, [r3, #88]	; 0x58
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <prvInitialiseNewTask+0x144>)
 800588c:	65da      	str	r2, [r3, #92]	; 0x5c
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	4a0b      	ldr	r2, [pc, #44]	; (80058c0 <prvInitialiseNewTask+0x148>)
 8005892:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	69b8      	ldr	r0, [r7, #24]
 800589a:	f001 f941 	bl	8006b20 <pxPortInitialiseStack>
 800589e:	4602      	mov	r2, r0
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20002fbc 	.word	0x20002fbc
 80058bc:	20003024 	.word	0x20003024
 80058c0:	2000308c 	.word	0x2000308c

080058c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058cc:	f001 fa52 	bl	8006d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058d0:	4b2d      	ldr	r3, [pc, #180]	; (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058da:	4b2c      	ldr	r3, [pc, #176]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058e8:	4b27      	ldr	r3, [pc, #156]	; (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d110      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058f0:	f000 fc26 	bl	8006140 <prvInitialiseTaskLists>
 80058f4:	e00d      	b.n	8005912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <prvAddNewTaskToReadyList+0xcc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058fe:	4b23      	ldr	r3, [pc, #140]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d802      	bhi.n	8005912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005912:	4b20      	ldr	r3, [pc, #128]	; (8005994 <prvAddNewTaskToReadyList+0xd0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <prvAddNewTaskToReadyList+0xd0>)
 800591a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800591c:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <prvAddNewTaskToReadyList+0xd0>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <prvAddNewTaskToReadyList+0xd4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d903      	bls.n	8005938 <prvAddNewTaskToReadyList+0x74>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005934:	4a18      	ldr	r2, [pc, #96]	; (8005998 <prvAddNewTaskToReadyList+0xd4>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <prvAddNewTaskToReadyList+0xd8>)
 8005946:	441a      	add	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7ff f877 	bl	8004a42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005954:	f001 fa3e 	bl	8006dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005958:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <prvAddNewTaskToReadyList+0xcc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <prvAddNewTaskToReadyList+0xc8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	429a      	cmp	r2, r3
 800596c:	d207      	bcs.n	800597e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <prvAddNewTaskToReadyList+0xdc>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000e54 	.word	0x20000e54
 800598c:	20000980 	.word	0x20000980
 8005990:	20000e60 	.word	0x20000e60
 8005994:	20000e70 	.word	0x20000e70
 8005998:	20000e5c 	.word	0x20000e5c
 800599c:	20000984 	.word	0x20000984
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d017      	beq.n	80059e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <vTaskDelay+0x60>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <vTaskDelay+0x30>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60bb      	str	r3, [r7, #8]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059d4:	f000 f88a 	bl	8005aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059d8:	2100      	movs	r1, #0
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fcfe 	bl	80063dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059e0:	f000 f892 	bl	8005b08 <xTaskResumeAll>
 80059e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <vTaskDelay+0x64>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000e7c 	.word	0x20000e7c
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08a      	sub	sp, #40	; 0x28
 8005a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	1d39      	adds	r1, r7, #4
 8005a1e:	f107 0308 	add.w	r3, r7, #8
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe ffac 	bl	8004980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	9202      	str	r2, [sp, #8]
 8005a30:	9301      	str	r3, [sp, #4]
 8005a32:	2300      	movs	r3, #0
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	2300      	movs	r3, #0
 8005a38:	460a      	mov	r2, r1
 8005a3a:	4924      	ldr	r1, [pc, #144]	; (8005acc <vTaskStartScheduler+0xc0>)
 8005a3c:	4824      	ldr	r0, [pc, #144]	; (8005ad0 <vTaskStartScheduler+0xc4>)
 8005a3e:	f7ff fdf9 	bl	8005634 <xTaskCreateStatic>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <vTaskStartScheduler+0xc8>)
 8005a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a48:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <vTaskStartScheduler+0xc8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a50:	2301      	movs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e001      	b.n	8005a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d102      	bne.n	8005a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a60:	f000 fd10 	bl	8006484 <xTimerCreateTimerTask>
 8005a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d11b      	bne.n	8005aa4 <vTaskStartScheduler+0x98>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	613b      	str	r3, [r7, #16]
}
 8005a7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a80:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <vTaskStartScheduler+0xcc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3354      	adds	r3, #84	; 0x54
 8005a86:	4a15      	ldr	r2, [pc, #84]	; (8005adc <vTaskStartScheduler+0xd0>)
 8005a88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <vTaskStartScheduler+0xd4>)
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <vTaskStartScheduler+0xd8>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <vTaskStartScheduler+0xdc>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a9e:	f001 f8c7 	bl	8006c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aa2:	e00e      	b.n	8005ac2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aaa:	d10a      	bne.n	8005ac2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <vTaskStartScheduler+0xb4>
}
 8005ac2:	bf00      	nop
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	08007b14 	.word	0x08007b14
 8005ad0:	08006111 	.word	0x08006111
 8005ad4:	20000e78 	.word	0x20000e78
 8005ad8:	20000980 	.word	0x20000980
 8005adc:	2000005c 	.word	0x2000005c
 8005ae0:	20000e74 	.word	0x20000e74
 8005ae4:	20000e60 	.word	0x20000e60
 8005ae8:	20000e58 	.word	0x20000e58

08005aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <vTaskSuspendAll+0x18>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a03      	ldr	r2, [pc, #12]	; (8005b04 <vTaskSuspendAll+0x18>)
 8005af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000e7c 	.word	0x20000e7c

08005b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b16:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b34:	f001 f91e 	bl	8006d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	4a38      	ldr	r2, [pc, #224]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d162      	bne.n	8005c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <xTaskResumeAll+0x11c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d05e      	beq.n	8005c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b52:	e02f      	b.n	8005bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b54:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <xTaskResumeAll+0x120>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe ffcb 	bl	8004afc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe ffc6 	bl	8004afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b74:	4b2d      	ldr	r3, [pc, #180]	; (8005c2c <xTaskResumeAll+0x124>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d903      	bls.n	8005b84 <xTaskResumeAll+0x7c>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <xTaskResumeAll+0x124>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <xTaskResumeAll+0x128>)
 8005b92:	441a      	add	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe ff51 	bl	8004a42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <xTaskResumeAll+0x12c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <xTaskResumeAll+0x120>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1cb      	bne.n	8005b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bc2:	f000 fb5f 	bl	8006284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <xTaskResumeAll+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bd2:	f000 f847 	bl	8005c64 <xTaskIncrementTick>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005bdc:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f1      	bne.n	8005bd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <xTaskResumeAll+0x134>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bf4:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <xTaskResumeAll+0x138>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c10:	f001 f8e0 	bl	8006dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c14:	68bb      	ldr	r3, [r7, #8]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000e7c 	.word	0x20000e7c
 8005c24:	20000e54 	.word	0x20000e54
 8005c28:	20000e14 	.word	0x20000e14
 8005c2c:	20000e5c 	.word	0x20000e5c
 8005c30:	20000984 	.word	0x20000984
 8005c34:	20000980 	.word	0x20000980
 8005c38:	20000e68 	.word	0x20000e68
 8005c3c:	20000e64 	.word	0x20000e64
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <xTaskGetTickCount+0x1c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000e58 	.word	0x20000e58

08005c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b4f      	ldr	r3, [pc, #316]	; (8005dac <xTaskIncrementTick+0x148>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 808f 	bne.w	8005d96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <xTaskIncrementTick+0x14c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c80:	4a4b      	ldr	r2, [pc, #300]	; (8005db0 <xTaskIncrementTick+0x14c>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d120      	bne.n	8005cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c8c:	4b49      	ldr	r3, [pc, #292]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <xTaskIncrementTick+0x48>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	603b      	str	r3, [r7, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <xTaskIncrementTick+0x46>
 8005cac:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <xTaskIncrementTick+0x154>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3f      	ldr	r2, [pc, #252]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <xTaskIncrementTick+0x154>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <xTaskIncrementTick+0x158>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a3d      	ldr	r2, [pc, #244]	; (8005dbc <xTaskIncrementTick+0x158>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	f000 fadb 	bl	8006284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cce:	4b3c      	ldr	r3, [pc, #240]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d349      	bcc.n	8005d6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	601a      	str	r2, [r3, #0]
					break;
 8005cea:	e03f      	b.n	8005d6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cec:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d203      	bcs.n	8005d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d04:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0a:	e02f      	b.n	8005d6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fef3 	bl	8004afc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe feea 	bl	8004afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <xTaskIncrementTick+0x160>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <xTaskIncrementTick+0xd8>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <xTaskIncrementTick+0x160>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <xTaskIncrementTick+0x164>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe fe75 	bl	8004a42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <xTaskIncrementTick+0x168>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d3b8      	bcc.n	8005cd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6a:	e7b5      	b.n	8005cd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d6c:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <xTaskIncrementTick+0x168>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	4915      	ldr	r1, [pc, #84]	; (8005dc8 <xTaskIncrementTick+0x164>)
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d901      	bls.n	8005d88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <xTaskIncrementTick+0x16c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e004      	b.n	8005da0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d96:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <xTaskIncrementTick+0x170>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <xTaskIncrementTick+0x170>)
 8005d9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da0:	697b      	ldr	r3, [r7, #20]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000e7c 	.word	0x20000e7c
 8005db0:	20000e58 	.word	0x20000e58
 8005db4:	20000e0c 	.word	0x20000e0c
 8005db8:	20000e10 	.word	0x20000e10
 8005dbc:	20000e6c 	.word	0x20000e6c
 8005dc0:	20000e74 	.word	0x20000e74
 8005dc4:	20000e5c 	.word	0x20000e5c
 8005dc8:	20000984 	.word	0x20000984
 8005dcc:	20000980 	.word	0x20000980
 8005dd0:	20000e68 	.word	0x20000e68
 8005dd4:	20000e64 	.word	0x20000e64

08005dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <vTaskSwitchContext+0xb0>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <vTaskSwitchContext+0xb4>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dec:	e046      	b.n	8005e7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005dee:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <vTaskSwitchContext+0xb4>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <vTaskSwitchContext+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e010      	b.n	8005e1e <vTaskSwitchContext+0x46>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	607b      	str	r3, [r7, #4]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskSwitchContext+0x3e>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	491d      	ldr	r1, [pc, #116]	; (8005e94 <vTaskSwitchContext+0xbc>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0e4      	beq.n	8005dfc <vTaskSwitchContext+0x24>
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <vTaskSwitchContext+0xbc>)
 8005e3e:	4413      	add	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3308      	adds	r3, #8
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d104      	bne.n	8005e62 <vTaskSwitchContext+0x8a>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <vTaskSwitchContext+0xc0>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <vTaskSwitchContext+0xb8>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <vTaskSwitchContext+0xc0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3354      	adds	r3, #84	; 0x54
 8005e78:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <vTaskSwitchContext+0xc4>)
 8005e7a:	6013      	str	r3, [r2, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000e7c 	.word	0x20000e7c
 8005e8c:	20000e68 	.word	0x20000e68
 8005e90:	20000e5c 	.word	0x20000e5c
 8005e94:	20000984 	.word	0x20000984
 8005e98:	20000980 	.word	0x20000980
 8005e9c:	2000005c 	.word	0x2000005c

08005ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60fb      	str	r3, [r7, #12]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <vTaskPlaceOnEventList+0x44>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3318      	adds	r3, #24
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fe fddb 	bl	8004a8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	6838      	ldr	r0, [r7, #0]
 8005ed8:	f000 fa80 	bl	80063dc <prvAddCurrentTaskToDelayedList>
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000980 	.word	0x20000980

08005ee8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	617b      	str	r3, [r7, #20]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vTaskPlaceOnEventListRestricted+0x54>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3318      	adds	r3, #24
 8005f16:	4619      	mov	r1, r3
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fe fd92 	bl	8004a42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295
 8005f28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	68b8      	ldr	r0, [r7, #8]
 8005f2e:	f000 fa55 	bl	80063dc <prvAddCurrentTaskToDelayedList>
	}
 8005f32:	bf00      	nop
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000980 	.word	0x20000980

08005f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60fb      	str	r3, [r7, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3318      	adds	r3, #24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fe fdc3 	bl	8004afc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f76:	4b1e      	ldr	r3, [pc, #120]	; (8005ff0 <xTaskRemoveFromEventList+0xb0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11d      	bne.n	8005fba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe fdba 	bl	8004afc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <xTaskRemoveFromEventList+0xb4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d903      	bls.n	8005f9c <xTaskRemoveFromEventList+0x5c>
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <xTaskRemoveFromEventList+0xb4>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <xTaskRemoveFromEventList+0xb8>)
 8005faa:	441a      	add	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7fe fd45 	bl	8004a42 <vListInsertEnd>
 8005fb8:	e005      	b.n	8005fc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	480e      	ldr	r0, [pc, #56]	; (8005ffc <xTaskRemoveFromEventList+0xbc>)
 8005fc2:	f7fe fd3e 	bl	8004a42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <xTaskRemoveFromEventList+0xc0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d905      	bls.n	8005fe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <xTaskRemoveFromEventList+0xc4>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e001      	b.n	8005fe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fe4:	697b      	ldr	r3, [r7, #20]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000e7c 	.word	0x20000e7c
 8005ff4:	20000e5c 	.word	0x20000e5c
 8005ff8:	20000984 	.word	0x20000984
 8005ffc:	20000e14 	.word	0x20000e14
 8006000:	20000980 	.word	0x20000980
 8006004:	20000e68 	.word	0x20000e68

08006008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <vTaskInternalSetTimeOutState+0x24>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <vTaskInternalSetTimeOutState+0x28>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000e6c 	.word	0x20000e6c
 8006030:	20000e58 	.word	0x20000e58

08006034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	613b      	str	r3, [r7, #16]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006076:	f000 fe7d 	bl	8006d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800607a:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <xTaskCheckForTimeOut+0xbc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d102      	bne.n	800609a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e023      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <xTaskCheckForTimeOut+0xc0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d007      	beq.n	80060b6 <xTaskCheckForTimeOut+0x82>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060b0:	2301      	movs	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e015      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d20b      	bcs.n	80060d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff9b 	bl	8006008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	e004      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060de:	2301      	movs	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060e2:	f000 fe77 	bl	8006dd4 <vPortExitCritical>

	return xReturn;
 80060e6:	69fb      	ldr	r3, [r7, #28]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000e58 	.word	0x20000e58
 80060f4:	20000e6c 	.word	0x20000e6c

080060f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <vTaskMissedYield+0x14>)
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	20000e68 	.word	0x20000e68

08006110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006118:	f000 f852 	bl	80061c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <prvIdleTask+0x28>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d9f9      	bls.n	8006118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <prvIdleTask+0x2c>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006134:	e7f0      	b.n	8006118 <prvIdleTask+0x8>
 8006136:	bf00      	nop
 8006138:	20000984 	.word	0x20000984
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006146:	2300      	movs	r3, #0
 8006148:	607b      	str	r3, [r7, #4]
 800614a:	e00c      	b.n	8006166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <prvInitialiseTaskLists+0x60>)
 8006158:	4413      	add	r3, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fc44 	bl	80049e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3301      	adds	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b37      	cmp	r3, #55	; 0x37
 800616a:	d9ef      	bls.n	800614c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800616c:	480d      	ldr	r0, [pc, #52]	; (80061a4 <prvInitialiseTaskLists+0x64>)
 800616e:	f7fe fc3b 	bl	80049e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006172:	480d      	ldr	r0, [pc, #52]	; (80061a8 <prvInitialiseTaskLists+0x68>)
 8006174:	f7fe fc38 	bl	80049e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <prvInitialiseTaskLists+0x6c>)
 800617a:	f7fe fc35 	bl	80049e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800617e:	480c      	ldr	r0, [pc, #48]	; (80061b0 <prvInitialiseTaskLists+0x70>)
 8006180:	f7fe fc32 	bl	80049e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006184:	480b      	ldr	r0, [pc, #44]	; (80061b4 <prvInitialiseTaskLists+0x74>)
 8006186:	f7fe fc2f 	bl	80049e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800618a:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <prvInitialiseTaskLists+0x78>)
 800618c:	4a05      	ldr	r2, [pc, #20]	; (80061a4 <prvInitialiseTaskLists+0x64>)
 800618e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvInitialiseTaskLists+0x7c>)
 8006192:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <prvInitialiseTaskLists+0x68>)
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000984 	.word	0x20000984
 80061a4:	20000de4 	.word	0x20000de4
 80061a8:	20000df8 	.word	0x20000df8
 80061ac:	20000e14 	.word	0x20000e14
 80061b0:	20000e28 	.word	0x20000e28
 80061b4:	20000e40 	.word	0x20000e40
 80061b8:	20000e0c 	.word	0x20000e0c
 80061bc:	20000e10 	.word	0x20000e10

080061c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c6:	e019      	b.n	80061fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061c8:	f000 fdd4 	bl	8006d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <prvCheckTasksWaitingTermination+0x50>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fc8f 	bl	8004afc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <prvCheckTasksWaitingTermination+0x54>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <prvCheckTasksWaitingTermination+0x54>)
 80061e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061f2:	f000 fdef 	bl	8006dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f810 	bl	800621c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e1      	bne.n	80061c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000e28 	.word	0x20000e28
 8006214:	20000e54 	.word	0x20000e54
 8006218:	20000e3c 	.word	0x20000e3c

0800621c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3354      	adds	r3, #84	; 0x54
 8006228:	4618      	mov	r0, r3
 800622a:	f000 ff4b 	bl	80070c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	4618      	mov	r0, r3
 800623e:	f000 ff01 	bl	8007044 <vPortFree>
				vPortFree( pxTCB );
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fefe 	bl	8007044 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006248:	e018      	b.n	800627c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006250:	2b01      	cmp	r3, #1
 8006252:	d103      	bne.n	800625c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fef5 	bl	8007044 <vPortFree>
	}
 800625a:	e00f      	b.n	800627c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006262:	2b02      	cmp	r3, #2
 8006264:	d00a      	beq.n	800627c <prvDeleteTCB+0x60>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	e7fe      	b.n	800627a <prvDeleteTCB+0x5e>
	}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <prvResetNextTaskUnblockTime+0x38>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800629c:	e008      	b.n	80062b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <prvResetNextTaskUnblockTime+0x38>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <prvResetNextTaskUnblockTime+0x3c>)
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	20000e0c 	.word	0x20000e0c
 80062c0:	20000e74 	.word	0x20000e74

080062c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <xTaskGetSchedulerState+0x34>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062d2:	2301      	movs	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	e008      	b.n	80062ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d8:	4b08      	ldr	r3, [pc, #32]	; (80062fc <xTaskGetSchedulerState+0x38>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062e0:	2302      	movs	r3, #2
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e001      	b.n	80062ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062e6:	2300      	movs	r3, #0
 80062e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ea:	687b      	ldr	r3, [r7, #4]
	}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20000e60 	.word	0x20000e60
 80062fc:	20000e7c 	.word	0x20000e7c

08006300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d056      	beq.n	80063c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006316:	4b2e      	ldr	r3, [pc, #184]	; (80063d0 <xTaskPriorityDisinherit+0xd0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	429a      	cmp	r2, r3
 800631e:	d00a      	beq.n	8006336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60bb      	str	r3, [r7, #8]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006366:	429a      	cmp	r2, r3
 8006368:	d02c      	beq.n	80063c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	2b00      	cmp	r3, #0
 8006370:	d128      	bne.n	80063c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3304      	adds	r3, #4
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fbc0 	bl	8004afc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <xTaskPriorityDisinherit+0xd4>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <xTaskPriorityDisinherit+0xa4>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a0c      	ldr	r2, [pc, #48]	; (80063d4 <xTaskPriorityDisinherit+0xd4>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <xTaskPriorityDisinherit+0xd8>)
 80063b2:	441a      	add	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fb41 	bl	8004a42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
	}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000980 	.word	0x20000980
 80063d4:	20000e5c 	.word	0x20000e5c
 80063d8:	20000984 	.word	0x20000984

080063dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <prvAddCurrentTaskToDelayedList+0x90>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fb82 	bl	8004afc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d10a      	bne.n	8006416 <prvAddCurrentTaskToDelayedList+0x3a>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4819      	ldr	r0, [pc, #100]	; (8006474 <prvAddCurrentTaskToDelayedList+0x98>)
 8006410:	f7fe fb17 	bl	8004a42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006414:	e026      	b.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d209      	bcs.n	8006442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7fe fb25 	bl	8004a8a <vListInsert>
}
 8006440:	e010      	b.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006442:	4b0e      	ldr	r3, [pc, #56]	; (800647c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <prvAddCurrentTaskToDelayedList+0x94>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3304      	adds	r3, #4
 800644c:	4619      	mov	r1, r3
 800644e:	4610      	mov	r0, r2
 8006450:	f7fe fb1b 	bl	8004a8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	429a      	cmp	r2, r3
 800645c:	d202      	bcs.n	8006464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800645e:	4a08      	ldr	r2, [pc, #32]	; (8006480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000e58 	.word	0x20000e58
 8006470:	20000980 	.word	0x20000980
 8006474:	20000e40 	.word	0x20000e40
 8006478:	20000e10 	.word	0x20000e10
 800647c:	20000e0c 	.word	0x20000e0c
 8006480:	20000e74 	.word	0x20000e74

08006484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b08a      	sub	sp, #40	; 0x28
 8006488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800648e:	f000 fb07 	bl	8006aa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006492:	4b1c      	ldr	r3, [pc, #112]	; (8006504 <xTimerCreateTimerTask+0x80>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d021      	beq.n	80064de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064a2:	1d3a      	adds	r2, r7, #4
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	f107 030c 	add.w	r3, r7, #12
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fe fa81 	bl	80049b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	9202      	str	r2, [sp, #8]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	2302      	movs	r3, #2
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2300      	movs	r3, #0
 80064c2:	460a      	mov	r2, r1
 80064c4:	4910      	ldr	r1, [pc, #64]	; (8006508 <xTimerCreateTimerTask+0x84>)
 80064c6:	4811      	ldr	r0, [pc, #68]	; (800650c <xTimerCreateTimerTask+0x88>)
 80064c8:	f7ff f8b4 	bl	8005634 <xTaskCreateStatic>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <xTimerCreateTimerTask+0x8c>)
 80064d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064d2:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <xTimerCreateTimerTask+0x8c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064da:	2301      	movs	r3, #1
 80064dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	613b      	str	r3, [r7, #16]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064fa:	697b      	ldr	r3, [r7, #20]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000eb0 	.word	0x20000eb0
 8006508:	08007b1c 	.word	0x08007b1c
 800650c:	08006649 	.word	0x08006649
 8006510:	20000eb4 	.word	0x20000eb4

08006514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xTimerGenericCommand+0x2e>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006542:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <xTimerGenericCommand+0x98>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d02a      	beq.n	80065a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b05      	cmp	r3, #5
 800655a:	dc18      	bgt.n	800658e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800655c:	f7ff feb2 	bl	80062c4 <xTaskGetSchedulerState>
 8006560:	4603      	mov	r3, r0
 8006562:	2b02      	cmp	r3, #2
 8006564:	d109      	bne.n	800657a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <xTimerGenericCommand+0x98>)
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f107 0110 	add.w	r1, r7, #16
 800656e:	2300      	movs	r3, #0
 8006570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006572:	f7fe fc77 	bl	8004e64 <xQueueGenericSend>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
 8006578:	e012      	b.n	80065a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <xTimerGenericCommand+0x98>)
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f107 0110 	add.w	r1, r7, #16
 8006582:	2300      	movs	r3, #0
 8006584:	2200      	movs	r2, #0
 8006586:	f7fe fc6d 	bl	8004e64 <xQueueGenericSend>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24
 800658c:	e008      	b.n	80065a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <xTimerGenericCommand+0x98>)
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	f107 0110 	add.w	r1, r7, #16
 8006596:	2300      	movs	r3, #0
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	f7fe fd61 	bl	8005060 <xQueueGenericSendFromISR>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3728      	adds	r7, #40	; 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000eb0 	.word	0x20000eb0

080065b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ba:	4b22      	ldr	r3, [pc, #136]	; (8006644 <prvProcessExpiredTimer+0x94>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fa97 	bl	8004afc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d022      	beq.n	8006622 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	18d1      	adds	r1, r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f000 f8d1 	bl	8006790 <prvInsertTimerInActiveList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01f      	beq.n	8006634 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f4:	2300      	movs	r3, #0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	2100      	movs	r1, #0
 80065fe:	6978      	ldr	r0, [r7, #20]
 8006600:	f7ff ff88 	bl	8006514 <xTimerGenericCommand>
 8006604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d113      	bne.n	8006634 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	60fb      	str	r3, [r7, #12]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	6978      	ldr	r0, [r7, #20]
 800663a:	4798      	blx	r3
}
 800663c:	bf00      	nop
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000ea8 	.word	0x20000ea8

08006648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f857 	bl	8006708 <prvGetNextExpireTime>
 800665a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4619      	mov	r1, r3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f803 	bl	800666c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006666:	f000 f8d5 	bl	8006814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800666a:	e7f1      	b.n	8006650 <prvTimerTask+0x8>

0800666c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006676:	f7ff fa39 	bl	8005aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667a:	f107 0308 	add.w	r3, r7, #8
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f866 	bl	8006750 <prvSampleTimeNow>
 8006684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d130      	bne.n	80066ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <prvProcessTimerOrBlockTask+0x3c>
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	429a      	cmp	r2, r3
 8006698:	d806      	bhi.n	80066a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800669a:	f7ff fa35 	bl	8005b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff85 	bl	80065b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066a6:	e024      	b.n	80066f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d008      	beq.n	80066c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066ae:	4b13      	ldr	r3, [pc, #76]	; (80066fc <prvProcessTimerOrBlockTask+0x90>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <prvProcessTimerOrBlockTask+0x50>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <prvProcessTimerOrBlockTask+0x52>
 80066bc:	2300      	movs	r3, #0
 80066be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <prvProcessTimerOrBlockTask+0x94>)
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	f7fe ff7d 	bl	80055cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066d2:	f7ff fa19 	bl	8005b08 <xTaskResumeAll>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvProcessTimerOrBlockTask+0x98>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
}
 80066ec:	e001      	b.n	80066f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066ee:	f7ff fa0b 	bl	8005b08 <xTaskResumeAll>
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000eac 	.word	0x20000eac
 8006700:	20000eb0 	.word	0x20000eb0
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <prvGetNextExpireTime+0x44>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <prvGetNextExpireTime+0x16>
 800671a:	2201      	movs	r2, #1
 800671c:	e000      	b.n	8006720 <prvGetNextExpireTime+0x18>
 800671e:	2200      	movs	r2, #0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d105      	bne.n	8006738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800672c:	4b07      	ldr	r3, [pc, #28]	; (800674c <prvGetNextExpireTime+0x44>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e001      	b.n	800673c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800673c:	68fb      	ldr	r3, [r7, #12]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000ea8 	.word	0x20000ea8

08006750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006758:	f7ff fa74 	bl	8005c44 <xTaskGetTickCount>
 800675c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvSampleTimeNow+0x3c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	429a      	cmp	r2, r3
 8006766:	d205      	bcs.n	8006774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006768:	f000 f936 	bl	80069d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e002      	b.n	800677a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800677a:	4a04      	ldr	r2, [pc, #16]	; (800678c <prvSampleTimeNow+0x3c>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006780:	68fb      	ldr	r3, [r7, #12]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000eb8 	.word	0x20000eb8

08006790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800679e:	2300      	movs	r3, #0
 80067a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d812      	bhi.n	80067dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	1ad2      	subs	r2, r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	e01b      	b.n	8006802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <prvInsertTimerInActiveList+0x7c>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3304      	adds	r3, #4
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7fe f958 	bl	8004a8a <vListInsert>
 80067da:	e012      	b.n	8006802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d206      	bcs.n	80067f2 <prvInsertTimerInActiveList+0x62>
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d302      	bcc.n	80067f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e007      	b.n	8006802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f2:	4b07      	ldr	r3, [pc, #28]	; (8006810 <prvInsertTimerInActiveList+0x80>)
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3304      	adds	r3, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7fe f944 	bl	8004a8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000eac 	.word	0x20000eac
 8006810:	20000ea8 	.word	0x20000ea8

08006814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08e      	sub	sp, #56	; 0x38
 8006818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681a:	e0ca      	b.n	80069b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	da18      	bge.n	8006854 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	3304      	adds	r3, #4
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61fb      	str	r3, [r7, #28]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684a:	6850      	ldr	r0, [r2, #4]
 800684c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684e:	6892      	ldr	r2, [r2, #8]
 8006850:	4611      	mov	r1, r2
 8006852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f2c0 80ab 	blt.w	80069b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7fe f945 	bl	8004afc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006872:	463b      	mov	r3, r7
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff ff6b 	bl	8006750 <prvSampleTimeNow>
 800687a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b09      	cmp	r3, #9
 8006880:	f200 8096 	bhi.w	80069b0 <prvProcessReceivedCommands+0x19c>
 8006884:	a201      	add	r2, pc, #4	; (adr r2, 800688c <prvProcessReceivedCommands+0x78>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068b5 	.word	0x080068b5
 8006898:	08006929 	.word	0x08006929
 800689c:	0800693d 	.word	0x0800693d
 80068a0:	08006987 	.word	0x08006987
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068b5 	.word	0x080068b5
 80068ac:	08006929 	.word	0x08006929
 80068b0:	0800693d 	.word	0x0800693d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	18d1      	adds	r1, r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d4:	f7ff ff5c 	bl	8006790 <prvInsertTimerInActiveList>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d069      	beq.n	80069b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d05e      	beq.n	80069b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	441a      	add	r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2300      	movs	r3, #0
 8006902:	2100      	movs	r1, #0
 8006904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006906:	f7ff fe05 	bl	8006514 <xTimerGenericCommand>
 800690a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d14f      	bne.n	80069b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	61bb      	str	r3, [r7, #24]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800693a:	e03a      	b.n	80069b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	617b      	str	r3, [r7, #20]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	18d1      	adds	r1, r2, r3
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006980:	f7ff ff06 	bl	8006790 <prvInsertTimerInActiveList>
					break;
 8006984:	e015      	b.n	80069b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d103      	bne.n	800699c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006996:	f000 fb55 	bl	8007044 <vPortFree>
 800699a:	e00a      	b.n	80069b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069ae:	e000      	b.n	80069b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80069b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <prvProcessReceivedCommands+0x1c0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	1d39      	adds	r1, r7, #4
 80069b8:	2200      	movs	r2, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fbec 	bl	8005198 <xQueueReceive>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f47f af2a 	bne.w	800681c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3730      	adds	r7, #48	; 0x30
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000eb0 	.word	0x20000eb0

080069d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069de:	e048      	b.n	8006a72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069e0:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ea:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe f87f 	bl	8004afc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d02e      	beq.n	8006a72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d90e      	bls.n	8006a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a32:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3304      	adds	r3, #4
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7fe f824 	bl	8004a8a <vListInsert>
 8006a42:	e016      	b.n	8006a72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a44:	2300      	movs	r3, #0
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff fd60 	bl	8006514 <xTimerGenericCommand>
 8006a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	603b      	str	r3, [r7, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a72:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1b1      	bne.n	80069e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <prvSwitchTimerLists+0xc4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <prvSwitchTimerLists+0xc0>)
 8006a88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <prvSwitchTimerLists+0xc4>)
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6013      	str	r3, [r2, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000ea8 	.word	0x20000ea8
 8006a9c:	20000eac 	.word	0x20000eac

08006aa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006aa6:	f000 f965 	bl	8006d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <prvCheckForValidListAndQueue+0x60>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d120      	bne.n	8006af4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ab2:	4814      	ldr	r0, [pc, #80]	; (8006b04 <prvCheckForValidListAndQueue+0x64>)
 8006ab4:	f7fd ff98 	bl	80049e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ab8:	4813      	ldr	r0, [pc, #76]	; (8006b08 <prvCheckForValidListAndQueue+0x68>)
 8006aba:	f7fd ff95 	bl	80049e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <prvCheckForValidListAndQueue+0x6c>)
 8006ac0:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <prvCheckForValidListAndQueue+0x64>)
 8006ac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ac4:	4b12      	ldr	r3, [pc, #72]	; (8006b10 <prvCheckForValidListAndQueue+0x70>)
 8006ac6:	4a10      	ldr	r2, [pc, #64]	; (8006b08 <prvCheckForValidListAndQueue+0x68>)
 8006ac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <prvCheckForValidListAndQueue+0x74>)
 8006ad0:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <prvCheckForValidListAndQueue+0x78>)
 8006ad2:	2110      	movs	r1, #16
 8006ad4:	200a      	movs	r0, #10
 8006ad6:	f7fe f8a3 	bl	8004c20 <xQueueGenericCreateStatic>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <prvCheckForValidListAndQueue+0x60>)
 8006ade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <prvCheckForValidListAndQueue+0x60>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <prvCheckForValidListAndQueue+0x60>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	490b      	ldr	r1, [pc, #44]	; (8006b1c <prvCheckForValidListAndQueue+0x7c>)
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fd42 	bl	8005578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006af4:	f000 f96e 	bl	8006dd4 <vPortExitCritical>
}
 8006af8:	bf00      	nop
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20000eb0 	.word	0x20000eb0
 8006b04:	20000e80 	.word	0x20000e80
 8006b08:	20000e94 	.word	0x20000e94
 8006b0c:	20000ea8 	.word	0x20000ea8
 8006b10:	20000eac 	.word	0x20000eac
 8006b14:	20000f5c 	.word	0x20000f5c
 8006b18:	20000ebc 	.word	0x20000ebc
 8006b1c:	08007b24 	.word	0x08007b24

08006b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3b04      	subs	r3, #4
 8006b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <pxPortInitialiseStack+0x64>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b14      	subs	r3, #20
 8006b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3b04      	subs	r3, #4
 8006b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f06f 0202 	mvn.w	r2, #2
 8006b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3b20      	subs	r3, #32
 8006b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b76:	68fb      	ldr	r3, [r7, #12]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	08006b89 	.word	0x08006b89

08006b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <prvTaskExitError+0x54>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d00a      	beq.n	8006bb2 <prvTaskExitError+0x2a>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
}
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <prvTaskExitError+0x28>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60bb      	str	r3, [r7, #8]
}
 8006bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bc6:	bf00      	nop
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0fc      	beq.n	8006bc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	2000000c 	.word	0x2000000c

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	4770      	bx	lr
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c08:	4808      	ldr	r0, [pc, #32]	; (8006c2c <prvPortStartFirstTask+0x24>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8814 	msr	CONTROL, r0
 8006c1a:	b662      	cpsie	i
 8006c1c:	b661      	cpsie	f
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	df00      	svc	0
 8006c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed08 	.word	0xe000ed08

08006c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c36:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <xPortStartScheduler+0x120>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a46      	ldr	r2, [pc, #280]	; (8006d54 <xPortStartScheduler+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10a      	bne.n	8006c56 <xPortStartScheduler+0x26>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <xPortStartScheduler+0x120>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <xPortStartScheduler+0x128>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10a      	bne.n	8006c76 <xPortStartScheduler+0x46>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c76:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <xPortStartScheduler+0x12c>)
 8006c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	22ff      	movs	r2, #255	; 0xff
 8006c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <xPortStartScheduler+0x130>)
 8006c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c9e:	4b31      	ldr	r3, [pc, #196]	; (8006d64 <xPortStartScheduler+0x134>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca4:	e009      	b.n	8006cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ca6:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <xPortStartScheduler+0x134>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d0ef      	beq.n	8006ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cc6:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d00a      	beq.n	8006ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60bb      	str	r3, [r7, #8]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ce8:	4b1e      	ldr	r3, [pc, #120]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <xPortStartScheduler+0x134>)
 8006cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a17      	ldr	r2, [pc, #92]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a14      	ldr	r2, [pc, #80]	; (8006d68 <xPortStartScheduler+0x138>)
 8006d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d1e:	f000 f8dd 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d22:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <xPortStartScheduler+0x13c>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d28:	f000 f8fc 	bl	8006f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d2c:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <xPortStartScheduler+0x140>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0f      	ldr	r2, [pc, #60]	; (8006d70 <xPortStartScheduler+0x140>)
 8006d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d38:	f7ff ff66 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d3c:	f7ff f84c 	bl	8005dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d40:	f7ff ff22 	bl	8006b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	e000ed00 	.word	0xe000ed00
 8006d54:	410fc271 	.word	0x410fc271
 8006d58:	410fc270 	.word	0x410fc270
 8006d5c:	e000e400 	.word	0xe000e400
 8006d60:	20000fac 	.word	0x20000fac
 8006d64:	20000fb0 	.word	0x20000fb0
 8006d68:	e000ed20 	.word	0xe000ed20
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	e000ef34 	.word	0xe000ef34

08006d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	607b      	str	r3, [r7, #4]
}
 8006d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3301      	adds	r3, #1
 8006d94:	4a0d      	ldr	r2, [pc, #52]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <vPortEnterCritical+0x58>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d10f      	bne.n	8006dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <vPortEnterCritical+0x5c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	603b      	str	r3, [r7, #0]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <vPortEnterCritical+0x4a>
	}
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000000c 	.word	0x2000000c
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <vPortExitCritical+0x50>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <vPortExitCritical+0x24>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	607b      	str	r3, [r7, #4]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <vPortExitCritical+0x50>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <vPortExitCritical+0x50>)
 8006e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <vPortExitCritical+0x42>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f383 8811 	msr	BASEPRI, r3
}
 8006e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c
	...

08006e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f01e 0f10 	tst.w	lr, #16
 8006e40:	bf08      	it	eq
 8006e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e54:	f380 8811 	msr	BASEPRI, r0
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f7fe ffba 	bl	8005dd8 <vTaskSwitchContext>
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f380 8811 	msr	BASEPRI, r0
 8006e6c:	bc09      	pop	{r0, r3}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	f01e 0f10 	tst.w	lr, #16
 8006e7a:	bf08      	it	eq
 8006e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e80:	f380 8809 	msr	PSP, r0
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe fed7 	bl	8005c64 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <xPortSysTickHandler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <vPortSetupTimerInterrupt+0x44>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	e000e010 	.word	0xe000e010
 8006f14:	e000e018 	.word	0xe000e018
 8006f18:	20000000 	.word	0x20000000
 8006f1c:	10624dd3 	.word	0x10624dd3
 8006f20:	e000e014 	.word	0xe000e014

08006f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f34 <vPortEnableVFP+0x10>
 8006f28:	6801      	ldr	r1, [r0, #0]
 8006f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f2e:	6001      	str	r1, [r0, #0]
 8006f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed88 	.word	0xe000ed88

08006f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d914      	bls.n	8006f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f4a:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <vPortValidateInterruptPriority+0x70>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <vPortValidateInterruptPriority+0x74>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	7afa      	ldrb	r2, [r7, #11]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d20a      	bcs.n	8006f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f74:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <vPortValidateInterruptPriority+0x78>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <vPortValidateInterruptPriority+0x7c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d90a      	bls.n	8006f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	603b      	str	r3, [r7, #0]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <vPortValidateInterruptPriority+0x60>
	}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	e000e3f0 	.word	0xe000e3f0
 8006fac:	20000fac 	.word	0x20000fac
 8006fb0:	e000ed0c 	.word	0xe000ed0c
 8006fb4:	20000fb0 	.word	0x20000fb0

08006fb8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8006fd8:	f7fe fd88 	bl	8005aec <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <pvPortMalloc+0x80>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d105      	bne.n	8006ff0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <pvPortMalloc+0x84>)
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	461a      	mov	r2, r3
 8006fec:	4b12      	ldr	r3, [pc, #72]	; (8007038 <pvPortMalloc+0x80>)
 8006fee:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8006ff0:	4b13      	ldr	r3, [pc, #76]	; (8007040 <pvPortMalloc+0x88>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d813      	bhi.n	8007028 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <pvPortMalloc+0x88>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	441a      	add	r2, r3
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <pvPortMalloc+0x88>)
 800700a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800700c:	429a      	cmp	r2, r3
 800700e:	d90b      	bls.n	8007028 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8007010:	4b09      	ldr	r3, [pc, #36]	; (8007038 <pvPortMalloc+0x80>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <pvPortMalloc+0x88>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4413      	add	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <pvPortMalloc+0x88>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	4a06      	ldr	r2, [pc, #24]	; (8007040 <pvPortMalloc+0x88>)
 8007026:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007028:	f7fe fd6e 	bl	8005b08 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20002fb8 	.word	0x20002fb8
 800703c:	20000fbc 	.word	0x20000fbc
 8007040:	20002fb4 	.word	0x20002fb4

08007044 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <vPortFree+0x24>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <vPortFree+0x22>
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <siprintf>:
 8007074:	b40e      	push	{r1, r2, r3}
 8007076:	b500      	push	{lr}
 8007078:	b09c      	sub	sp, #112	; 0x70
 800707a:	ab1d      	add	r3, sp, #116	; 0x74
 800707c:	9002      	str	r0, [sp, #8]
 800707e:	9006      	str	r0, [sp, #24]
 8007080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007084:	4809      	ldr	r0, [pc, #36]	; (80070ac <siprintf+0x38>)
 8007086:	9107      	str	r1, [sp, #28]
 8007088:	9104      	str	r1, [sp, #16]
 800708a:	4909      	ldr	r1, [pc, #36]	; (80070b0 <siprintf+0x3c>)
 800708c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007090:	9105      	str	r1, [sp, #20]
 8007092:	6800      	ldr	r0, [r0, #0]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	a902      	add	r1, sp, #8
 8007098:	f000 f9f6 	bl	8007488 <_svfiprintf_r>
 800709c:	9b02      	ldr	r3, [sp, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	701a      	strb	r2, [r3, #0]
 80070a2:	b01c      	add	sp, #112	; 0x70
 80070a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a8:	b003      	add	sp, #12
 80070aa:	4770      	bx	lr
 80070ac:	2000005c 	.word	0x2000005c
 80070b0:	ffff0208 	.word	0xffff0208

080070b4 <memset>:
 80070b4:	4402      	add	r2, r0
 80070b6:	4603      	mov	r3, r0
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d100      	bne.n	80070be <memset+0xa>
 80070bc:	4770      	bx	lr
 80070be:	f803 1b01 	strb.w	r1, [r3], #1
 80070c2:	e7f9      	b.n	80070b8 <memset+0x4>

080070c4 <_reclaim_reent>:
 80070c4:	4b29      	ldr	r3, [pc, #164]	; (800716c <_reclaim_reent+0xa8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4283      	cmp	r3, r0
 80070ca:	b570      	push	{r4, r5, r6, lr}
 80070cc:	4604      	mov	r4, r0
 80070ce:	d04b      	beq.n	8007168 <_reclaim_reent+0xa4>
 80070d0:	69c3      	ldr	r3, [r0, #28]
 80070d2:	b143      	cbz	r3, 80070e6 <_reclaim_reent+0x22>
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d144      	bne.n	8007164 <_reclaim_reent+0xa0>
 80070da:	69e3      	ldr	r3, [r4, #28]
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	b111      	cbz	r1, 80070e6 <_reclaim_reent+0x22>
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 f87f 	bl	80071e4 <_free_r>
 80070e6:	6961      	ldr	r1, [r4, #20]
 80070e8:	b111      	cbz	r1, 80070f0 <_reclaim_reent+0x2c>
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 f87a 	bl	80071e4 <_free_r>
 80070f0:	69e1      	ldr	r1, [r4, #28]
 80070f2:	b111      	cbz	r1, 80070fa <_reclaim_reent+0x36>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 f875 	bl	80071e4 <_free_r>
 80070fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070fc:	b111      	cbz	r1, 8007104 <_reclaim_reent+0x40>
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 f870 	bl	80071e4 <_free_r>
 8007104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007106:	b111      	cbz	r1, 800710e <_reclaim_reent+0x4a>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 f86b 	bl	80071e4 <_free_r>
 800710e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007110:	b111      	cbz	r1, 8007118 <_reclaim_reent+0x54>
 8007112:	4620      	mov	r0, r4
 8007114:	f000 f866 	bl	80071e4 <_free_r>
 8007118:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800711a:	b111      	cbz	r1, 8007122 <_reclaim_reent+0x5e>
 800711c:	4620      	mov	r0, r4
 800711e:	f000 f861 	bl	80071e4 <_free_r>
 8007122:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007124:	b111      	cbz	r1, 800712c <_reclaim_reent+0x68>
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f85c 	bl	80071e4 <_free_r>
 800712c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800712e:	b111      	cbz	r1, 8007136 <_reclaim_reent+0x72>
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f857 	bl	80071e4 <_free_r>
 8007136:	6a23      	ldr	r3, [r4, #32]
 8007138:	b1b3      	cbz	r3, 8007168 <_reclaim_reent+0xa4>
 800713a:	4620      	mov	r0, r4
 800713c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007140:	4718      	bx	r3
 8007142:	5949      	ldr	r1, [r1, r5]
 8007144:	b941      	cbnz	r1, 8007158 <_reclaim_reent+0x94>
 8007146:	3504      	adds	r5, #4
 8007148:	69e3      	ldr	r3, [r4, #28]
 800714a:	2d80      	cmp	r5, #128	; 0x80
 800714c:	68d9      	ldr	r1, [r3, #12]
 800714e:	d1f8      	bne.n	8007142 <_reclaim_reent+0x7e>
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f847 	bl	80071e4 <_free_r>
 8007156:	e7c0      	b.n	80070da <_reclaim_reent+0x16>
 8007158:	680e      	ldr	r6, [r1, #0]
 800715a:	4620      	mov	r0, r4
 800715c:	f000 f842 	bl	80071e4 <_free_r>
 8007160:	4631      	mov	r1, r6
 8007162:	e7ef      	b.n	8007144 <_reclaim_reent+0x80>
 8007164:	2500      	movs	r5, #0
 8007166:	e7ef      	b.n	8007148 <_reclaim_reent+0x84>
 8007168:	bd70      	pop	{r4, r5, r6, pc}
 800716a:	bf00      	nop
 800716c:	2000005c 	.word	0x2000005c

08007170 <__errno>:
 8007170:	4b01      	ldr	r3, [pc, #4]	; (8007178 <__errno+0x8>)
 8007172:	6818      	ldr	r0, [r3, #0]
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000005c 	.word	0x2000005c

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f000 fc6a 	bl	8007a68 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	08007c74 	.word	0x08007c74
 80071b8:	08007c74 	.word	0x08007c74
 80071bc:	08007c74 	.word	0x08007c74
 80071c0:	08007c78 	.word	0x08007c78

080071c4 <__retarget_lock_acquire_recursive>:
 80071c4:	4770      	bx	lr

080071c6 <__retarget_lock_release_recursive>:
 80071c6:	4770      	bx	lr

080071c8 <memcpy>:
 80071c8:	440a      	add	r2, r1
 80071ca:	4291      	cmp	r1, r2
 80071cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d0:	d100      	bne.n	80071d4 <memcpy+0xc>
 80071d2:	4770      	bx	lr
 80071d4:	b510      	push	{r4, lr}
 80071d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071de:	4291      	cmp	r1, r2
 80071e0:	d1f9      	bne.n	80071d6 <memcpy+0xe>
 80071e2:	bd10      	pop	{r4, pc}

080071e4 <_free_r>:
 80071e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e6:	2900      	cmp	r1, #0
 80071e8:	d044      	beq.n	8007274 <_free_r+0x90>
 80071ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ee:	9001      	str	r0, [sp, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f1a1 0404 	sub.w	r4, r1, #4
 80071f6:	bfb8      	it	lt
 80071f8:	18e4      	addlt	r4, r4, r3
 80071fa:	f000 f8df 	bl	80073bc <__malloc_lock>
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <_free_r+0x94>)
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	b933      	cbnz	r3, 8007214 <_free_r+0x30>
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	6014      	str	r4, [r2, #0]
 800720a:	b003      	add	sp, #12
 800720c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007210:	f000 b8da 	b.w	80073c8 <__malloc_unlock>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d908      	bls.n	800722a <_free_r+0x46>
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	1961      	adds	r1, r4, r5
 800721c:	428b      	cmp	r3, r1
 800721e:	bf01      	itttt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	1949      	addeq	r1, r1, r5
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	e7ed      	b.n	8007206 <_free_r+0x22>
 800722a:	461a      	mov	r2, r3
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b10b      	cbz	r3, 8007234 <_free_r+0x50>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d9fa      	bls.n	800722a <_free_r+0x46>
 8007234:	6811      	ldr	r1, [r2, #0]
 8007236:	1855      	adds	r5, r2, r1
 8007238:	42a5      	cmp	r5, r4
 800723a:	d10b      	bne.n	8007254 <_free_r+0x70>
 800723c:	6824      	ldr	r4, [r4, #0]
 800723e:	4421      	add	r1, r4
 8007240:	1854      	adds	r4, r2, r1
 8007242:	42a3      	cmp	r3, r4
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	d1e0      	bne.n	800720a <_free_r+0x26>
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	6053      	str	r3, [r2, #4]
 800724e:	440c      	add	r4, r1
 8007250:	6014      	str	r4, [r2, #0]
 8007252:	e7da      	b.n	800720a <_free_r+0x26>
 8007254:	d902      	bls.n	800725c <_free_r+0x78>
 8007256:	230c      	movs	r3, #12
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	e7d6      	b.n	800720a <_free_r+0x26>
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	1961      	adds	r1, r4, r5
 8007260:	428b      	cmp	r3, r1
 8007262:	bf04      	itt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	bf04      	itt	eq
 800726c:	1949      	addeq	r1, r1, r5
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	6054      	str	r4, [r2, #4]
 8007272:	e7ca      	b.n	800720a <_free_r+0x26>
 8007274:	b003      	add	sp, #12
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	200030fc 	.word	0x200030fc

0800727c <sbrk_aligned>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4e0e      	ldr	r6, [pc, #56]	; (80072b8 <sbrk_aligned+0x3c>)
 8007280:	460c      	mov	r4, r1
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	4605      	mov	r5, r0
 8007286:	b911      	cbnz	r1, 800728e <sbrk_aligned+0x12>
 8007288:	f000 fba6 	bl	80079d8 <_sbrk_r>
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fba1 	bl	80079d8 <_sbrk_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d00a      	beq.n	80072b0 <sbrk_aligned+0x34>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d007      	beq.n	80072b4 <sbrk_aligned+0x38>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fb96 	bl	80079d8 <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d101      	bne.n	80072b4 <sbrk_aligned+0x38>
 80072b0:	f04f 34ff 	mov.w	r4, #4294967295
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	20003100 	.word	0x20003100

080072bc <_malloc_r>:
 80072bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c0:	1ccd      	adds	r5, r1, #3
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	db01      	blt.n	80072d8 <_malloc_r+0x1c>
 80072d4:	42a9      	cmp	r1, r5
 80072d6:	d905      	bls.n	80072e4 <_malloc_r+0x28>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	2600      	movs	r6, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073b8 <_malloc_r+0xfc>
 80072e8:	f000 f868 	bl	80073bc <__malloc_lock>
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	461c      	mov	r4, r3
 80072f2:	bb5c      	cbnz	r4, 800734c <_malloc_r+0x90>
 80072f4:	4629      	mov	r1, r5
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7ff ffc0 	bl	800727c <sbrk_aligned>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	4604      	mov	r4, r0
 8007300:	d155      	bne.n	80073ae <_malloc_r+0xf2>
 8007302:	f8d8 4000 	ldr.w	r4, [r8]
 8007306:	4626      	mov	r6, r4
 8007308:	2e00      	cmp	r6, #0
 800730a:	d145      	bne.n	8007398 <_malloc_r+0xdc>
 800730c:	2c00      	cmp	r4, #0
 800730e:	d048      	beq.n	80073a2 <_malloc_r+0xe6>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	4631      	mov	r1, r6
 8007314:	4638      	mov	r0, r7
 8007316:	eb04 0903 	add.w	r9, r4, r3
 800731a:	f000 fb5d 	bl	80079d8 <_sbrk_r>
 800731e:	4581      	cmp	r9, r0
 8007320:	d13f      	bne.n	80073a2 <_malloc_r+0xe6>
 8007322:	6821      	ldr	r1, [r4, #0]
 8007324:	1a6d      	subs	r5, r5, r1
 8007326:	4629      	mov	r1, r5
 8007328:	4638      	mov	r0, r7
 800732a:	f7ff ffa7 	bl	800727c <sbrk_aligned>
 800732e:	3001      	adds	r0, #1
 8007330:	d037      	beq.n	80073a2 <_malloc_r+0xe6>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	442b      	add	r3, r5
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	f8d8 3000 	ldr.w	r3, [r8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d038      	beq.n	80073b2 <_malloc_r+0xf6>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	42a2      	cmp	r2, r4
 8007344:	d12b      	bne.n	800739e <_malloc_r+0xe2>
 8007346:	2200      	movs	r2, #0
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	e00f      	b.n	800736c <_malloc_r+0xb0>
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	1b52      	subs	r2, r2, r5
 8007350:	d41f      	bmi.n	8007392 <_malloc_r+0xd6>
 8007352:	2a0b      	cmp	r2, #11
 8007354:	d917      	bls.n	8007386 <_malloc_r+0xca>
 8007356:	1961      	adds	r1, r4, r5
 8007358:	42a3      	cmp	r3, r4
 800735a:	6025      	str	r5, [r4, #0]
 800735c:	bf18      	it	ne
 800735e:	6059      	strne	r1, [r3, #4]
 8007360:	6863      	ldr	r3, [r4, #4]
 8007362:	bf08      	it	eq
 8007364:	f8c8 1000 	streq.w	r1, [r8]
 8007368:	5162      	str	r2, [r4, r5]
 800736a:	604b      	str	r3, [r1, #4]
 800736c:	4638      	mov	r0, r7
 800736e:	f104 060b 	add.w	r6, r4, #11
 8007372:	f000 f829 	bl	80073c8 <__malloc_unlock>
 8007376:	f026 0607 	bic.w	r6, r6, #7
 800737a:	1d23      	adds	r3, r4, #4
 800737c:	1af2      	subs	r2, r6, r3
 800737e:	d0ae      	beq.n	80072de <_malloc_r+0x22>
 8007380:	1b9b      	subs	r3, r3, r6
 8007382:	50a3      	str	r3, [r4, r2]
 8007384:	e7ab      	b.n	80072de <_malloc_r+0x22>
 8007386:	42a3      	cmp	r3, r4
 8007388:	6862      	ldr	r2, [r4, #4]
 800738a:	d1dd      	bne.n	8007348 <_malloc_r+0x8c>
 800738c:	f8c8 2000 	str.w	r2, [r8]
 8007390:	e7ec      	b.n	800736c <_malloc_r+0xb0>
 8007392:	4623      	mov	r3, r4
 8007394:	6864      	ldr	r4, [r4, #4]
 8007396:	e7ac      	b.n	80072f2 <_malloc_r+0x36>
 8007398:	4634      	mov	r4, r6
 800739a:	6876      	ldr	r6, [r6, #4]
 800739c:	e7b4      	b.n	8007308 <_malloc_r+0x4c>
 800739e:	4613      	mov	r3, r2
 80073a0:	e7cc      	b.n	800733c <_malloc_r+0x80>
 80073a2:	230c      	movs	r3, #12
 80073a4:	603b      	str	r3, [r7, #0]
 80073a6:	4638      	mov	r0, r7
 80073a8:	f000 f80e 	bl	80073c8 <__malloc_unlock>
 80073ac:	e797      	b.n	80072de <_malloc_r+0x22>
 80073ae:	6025      	str	r5, [r4, #0]
 80073b0:	e7dc      	b.n	800736c <_malloc_r+0xb0>
 80073b2:	605b      	str	r3, [r3, #4]
 80073b4:	deff      	udf	#255	; 0xff
 80073b6:	bf00      	nop
 80073b8:	200030fc 	.word	0x200030fc

080073bc <__malloc_lock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_lock+0x8>)
 80073be:	f7ff bf01 	b.w	80071c4 <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	200030f8 	.word	0x200030f8

080073c8 <__malloc_unlock>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__malloc_unlock+0x8>)
 80073ca:	f7ff befc 	b.w	80071c6 <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	200030f8 	.word	0x200030f8

080073d4 <__ssputs_r>:
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	688e      	ldr	r6, [r1, #8]
 80073da:	461f      	mov	r7, r3
 80073dc:	42be      	cmp	r6, r7
 80073de:	680b      	ldr	r3, [r1, #0]
 80073e0:	4682      	mov	sl, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4690      	mov	r8, r2
 80073e6:	d82c      	bhi.n	8007442 <__ssputs_r+0x6e>
 80073e8:	898a      	ldrh	r2, [r1, #12]
 80073ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ee:	d026      	beq.n	800743e <__ssputs_r+0x6a>
 80073f0:	6965      	ldr	r5, [r4, #20]
 80073f2:	6909      	ldr	r1, [r1, #16]
 80073f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073f8:	eba3 0901 	sub.w	r9, r3, r1
 80073fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007400:	1c7b      	adds	r3, r7, #1
 8007402:	444b      	add	r3, r9
 8007404:	106d      	asrs	r5, r5, #1
 8007406:	429d      	cmp	r5, r3
 8007408:	bf38      	it	cc
 800740a:	461d      	movcc	r5, r3
 800740c:	0553      	lsls	r3, r2, #21
 800740e:	d527      	bpl.n	8007460 <__ssputs_r+0x8c>
 8007410:	4629      	mov	r1, r5
 8007412:	f7ff ff53 	bl	80072bc <_malloc_r>
 8007416:	4606      	mov	r6, r0
 8007418:	b360      	cbz	r0, 8007474 <__ssputs_r+0xa0>
 800741a:	6921      	ldr	r1, [r4, #16]
 800741c:	464a      	mov	r2, r9
 800741e:	f7ff fed3 	bl	80071c8 <memcpy>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6126      	str	r6, [r4, #16]
 8007430:	6165      	str	r5, [r4, #20]
 8007432:	444e      	add	r6, r9
 8007434:	eba5 0509 	sub.w	r5, r5, r9
 8007438:	6026      	str	r6, [r4, #0]
 800743a:	60a5      	str	r5, [r4, #8]
 800743c:	463e      	mov	r6, r7
 800743e:	42be      	cmp	r6, r7
 8007440:	d900      	bls.n	8007444 <__ssputs_r+0x70>
 8007442:	463e      	mov	r6, r7
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	4632      	mov	r2, r6
 8007448:	4641      	mov	r1, r8
 800744a:	f000 faab 	bl	80079a4 <memmove>
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	1b9b      	subs	r3, r3, r6
 8007452:	60a3      	str	r3, [r4, #8]
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	4433      	add	r3, r6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	2000      	movs	r0, #0
 800745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007460:	462a      	mov	r2, r5
 8007462:	f000 fac9 	bl	80079f8 <_realloc_r>
 8007466:	4606      	mov	r6, r0
 8007468:	2800      	cmp	r0, #0
 800746a:	d1e0      	bne.n	800742e <__ssputs_r+0x5a>
 800746c:	6921      	ldr	r1, [r4, #16]
 800746e:	4650      	mov	r0, sl
 8007470:	f7ff feb8 	bl	80071e4 <_free_r>
 8007474:	230c      	movs	r3, #12
 8007476:	f8ca 3000 	str.w	r3, [sl]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	e7e9      	b.n	800745c <__ssputs_r+0x88>

08007488 <_svfiprintf_r>:
 8007488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	4698      	mov	r8, r3
 800748e:	898b      	ldrh	r3, [r1, #12]
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	b09d      	sub	sp, #116	; 0x74
 8007494:	4607      	mov	r7, r0
 8007496:	460d      	mov	r5, r1
 8007498:	4614      	mov	r4, r2
 800749a:	d50e      	bpl.n	80074ba <_svfiprintf_r+0x32>
 800749c:	690b      	ldr	r3, [r1, #16]
 800749e:	b963      	cbnz	r3, 80074ba <_svfiprintf_r+0x32>
 80074a0:	2140      	movs	r1, #64	; 0x40
 80074a2:	f7ff ff0b 	bl	80072bc <_malloc_r>
 80074a6:	6028      	str	r0, [r5, #0]
 80074a8:	6128      	str	r0, [r5, #16]
 80074aa:	b920      	cbnz	r0, 80074b6 <_svfiprintf_r+0x2e>
 80074ac:	230c      	movs	r3, #12
 80074ae:	603b      	str	r3, [r7, #0]
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e0d0      	b.n	8007658 <_svfiprintf_r+0x1d0>
 80074b6:	2340      	movs	r3, #64	; 0x40
 80074b8:	616b      	str	r3, [r5, #20]
 80074ba:	2300      	movs	r3, #0
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	2320      	movs	r3, #32
 80074c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074c8:	2330      	movs	r3, #48	; 0x30
 80074ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007670 <_svfiprintf_r+0x1e8>
 80074ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074d2:	f04f 0901 	mov.w	r9, #1
 80074d6:	4623      	mov	r3, r4
 80074d8:	469a      	mov	sl, r3
 80074da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074de:	b10a      	cbz	r2, 80074e4 <_svfiprintf_r+0x5c>
 80074e0:	2a25      	cmp	r2, #37	; 0x25
 80074e2:	d1f9      	bne.n	80074d8 <_svfiprintf_r+0x50>
 80074e4:	ebba 0b04 	subs.w	fp, sl, r4
 80074e8:	d00b      	beq.n	8007502 <_svfiprintf_r+0x7a>
 80074ea:	465b      	mov	r3, fp
 80074ec:	4622      	mov	r2, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7ff ff6f 	bl	80073d4 <__ssputs_r>
 80074f6:	3001      	adds	r0, #1
 80074f8:	f000 80a9 	beq.w	800764e <_svfiprintf_r+0x1c6>
 80074fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074fe:	445a      	add	r2, fp
 8007500:	9209      	str	r2, [sp, #36]	; 0x24
 8007502:	f89a 3000 	ldrb.w	r3, [sl]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80a1 	beq.w	800764e <_svfiprintf_r+0x1c6>
 800750c:	2300      	movs	r3, #0
 800750e:	f04f 32ff 	mov.w	r2, #4294967295
 8007512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007516:	f10a 0a01 	add.w	sl, sl, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	9307      	str	r3, [sp, #28]
 800751e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007522:	931a      	str	r3, [sp, #104]	; 0x68
 8007524:	4654      	mov	r4, sl
 8007526:	2205      	movs	r2, #5
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	4850      	ldr	r0, [pc, #320]	; (8007670 <_svfiprintf_r+0x1e8>)
 800752e:	f7f8 fe4f 	bl	80001d0 <memchr>
 8007532:	9a04      	ldr	r2, [sp, #16]
 8007534:	b9d8      	cbnz	r0, 800756e <_svfiprintf_r+0xe6>
 8007536:	06d0      	lsls	r0, r2, #27
 8007538:	bf44      	itt	mi
 800753a:	2320      	movmi	r3, #32
 800753c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007540:	0711      	lsls	r1, r2, #28
 8007542:	bf44      	itt	mi
 8007544:	232b      	movmi	r3, #43	; 0x2b
 8007546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800754a:	f89a 3000 	ldrb.w	r3, [sl]
 800754e:	2b2a      	cmp	r3, #42	; 0x2a
 8007550:	d015      	beq.n	800757e <_svfiprintf_r+0xf6>
 8007552:	9a07      	ldr	r2, [sp, #28]
 8007554:	4654      	mov	r4, sl
 8007556:	2000      	movs	r0, #0
 8007558:	f04f 0c0a 	mov.w	ip, #10
 800755c:	4621      	mov	r1, r4
 800755e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007562:	3b30      	subs	r3, #48	; 0x30
 8007564:	2b09      	cmp	r3, #9
 8007566:	d94d      	bls.n	8007604 <_svfiprintf_r+0x17c>
 8007568:	b1b0      	cbz	r0, 8007598 <_svfiprintf_r+0x110>
 800756a:	9207      	str	r2, [sp, #28]
 800756c:	e014      	b.n	8007598 <_svfiprintf_r+0x110>
 800756e:	eba0 0308 	sub.w	r3, r0, r8
 8007572:	fa09 f303 	lsl.w	r3, r9, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	46a2      	mov	sl, r4
 800757c:	e7d2      	b.n	8007524 <_svfiprintf_r+0x9c>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	1d19      	adds	r1, r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9103      	str	r1, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfbb      	ittet	lt
 800758a:	425b      	neglt	r3, r3
 800758c:	f042 0202 	orrlt.w	r2, r2, #2
 8007590:	9307      	strge	r3, [sp, #28]
 8007592:	9307      	strlt	r3, [sp, #28]
 8007594:	bfb8      	it	lt
 8007596:	9204      	strlt	r2, [sp, #16]
 8007598:	7823      	ldrb	r3, [r4, #0]
 800759a:	2b2e      	cmp	r3, #46	; 0x2e
 800759c:	d10c      	bne.n	80075b8 <_svfiprintf_r+0x130>
 800759e:	7863      	ldrb	r3, [r4, #1]
 80075a0:	2b2a      	cmp	r3, #42	; 0x2a
 80075a2:	d134      	bne.n	800760e <_svfiprintf_r+0x186>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	9203      	str	r2, [sp, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bfb8      	it	lt
 80075b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80075b4:	3402      	adds	r4, #2
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007680 <_svfiprintf_r+0x1f8>
 80075bc:	7821      	ldrb	r1, [r4, #0]
 80075be:	2203      	movs	r2, #3
 80075c0:	4650      	mov	r0, sl
 80075c2:	f7f8 fe05 	bl	80001d0 <memchr>
 80075c6:	b138      	cbz	r0, 80075d8 <_svfiprintf_r+0x150>
 80075c8:	9b04      	ldr	r3, [sp, #16]
 80075ca:	eba0 000a 	sub.w	r0, r0, sl
 80075ce:	2240      	movs	r2, #64	; 0x40
 80075d0:	4082      	lsls	r2, r0
 80075d2:	4313      	orrs	r3, r2
 80075d4:	3401      	adds	r4, #1
 80075d6:	9304      	str	r3, [sp, #16]
 80075d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075dc:	4825      	ldr	r0, [pc, #148]	; (8007674 <_svfiprintf_r+0x1ec>)
 80075de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075e2:	2206      	movs	r2, #6
 80075e4:	f7f8 fdf4 	bl	80001d0 <memchr>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d038      	beq.n	800765e <_svfiprintf_r+0x1d6>
 80075ec:	4b22      	ldr	r3, [pc, #136]	; (8007678 <_svfiprintf_r+0x1f0>)
 80075ee:	bb1b      	cbnz	r3, 8007638 <_svfiprintf_r+0x1b0>
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	3307      	adds	r3, #7
 80075f4:	f023 0307 	bic.w	r3, r3, #7
 80075f8:	3308      	adds	r3, #8
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	4433      	add	r3, r6
 8007600:	9309      	str	r3, [sp, #36]	; 0x24
 8007602:	e768      	b.n	80074d6 <_svfiprintf_r+0x4e>
 8007604:	fb0c 3202 	mla	r2, ip, r2, r3
 8007608:	460c      	mov	r4, r1
 800760a:	2001      	movs	r0, #1
 800760c:	e7a6      	b.n	800755c <_svfiprintf_r+0xd4>
 800760e:	2300      	movs	r3, #0
 8007610:	3401      	adds	r4, #1
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	4619      	mov	r1, r3
 8007616:	f04f 0c0a 	mov.w	ip, #10
 800761a:	4620      	mov	r0, r4
 800761c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007620:	3a30      	subs	r2, #48	; 0x30
 8007622:	2a09      	cmp	r2, #9
 8007624:	d903      	bls.n	800762e <_svfiprintf_r+0x1a6>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0c6      	beq.n	80075b8 <_svfiprintf_r+0x130>
 800762a:	9105      	str	r1, [sp, #20]
 800762c:	e7c4      	b.n	80075b8 <_svfiprintf_r+0x130>
 800762e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007632:	4604      	mov	r4, r0
 8007634:	2301      	movs	r3, #1
 8007636:	e7f0      	b.n	800761a <_svfiprintf_r+0x192>
 8007638:	ab03      	add	r3, sp, #12
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	462a      	mov	r2, r5
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <_svfiprintf_r+0x1f4>)
 8007640:	a904      	add	r1, sp, #16
 8007642:	4638      	mov	r0, r7
 8007644:	f3af 8000 	nop.w
 8007648:	1c42      	adds	r2, r0, #1
 800764a:	4606      	mov	r6, r0
 800764c:	d1d6      	bne.n	80075fc <_svfiprintf_r+0x174>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	065b      	lsls	r3, r3, #25
 8007652:	f53f af2d 	bmi.w	80074b0 <_svfiprintf_r+0x28>
 8007656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007658:	b01d      	add	sp, #116	; 0x74
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	ab03      	add	r3, sp, #12
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	462a      	mov	r2, r5
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <_svfiprintf_r+0x1f4>)
 8007666:	a904      	add	r1, sp, #16
 8007668:	4638      	mov	r0, r7
 800766a:	f000 f879 	bl	8007760 <_printf_i>
 800766e:	e7eb      	b.n	8007648 <_svfiprintf_r+0x1c0>
 8007670:	08007c38 	.word	0x08007c38
 8007674:	08007c42 	.word	0x08007c42
 8007678:	00000000 	.word	0x00000000
 800767c:	080073d5 	.word	0x080073d5
 8007680:	08007c3e 	.word	0x08007c3e

08007684 <_printf_common>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	4616      	mov	r6, r2
 800768a:	4699      	mov	r9, r3
 800768c:	688a      	ldr	r2, [r1, #8]
 800768e:	690b      	ldr	r3, [r1, #16]
 8007690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007694:	4293      	cmp	r3, r2
 8007696:	bfb8      	it	lt
 8007698:	4613      	movlt	r3, r2
 800769a:	6033      	str	r3, [r6, #0]
 800769c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076a0:	4607      	mov	r7, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	b10a      	cbz	r2, 80076aa <_printf_common+0x26>
 80076a6:	3301      	adds	r3, #1
 80076a8:	6033      	str	r3, [r6, #0]
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	0699      	lsls	r1, r3, #26
 80076ae:	bf42      	ittt	mi
 80076b0:	6833      	ldrmi	r3, [r6, #0]
 80076b2:	3302      	addmi	r3, #2
 80076b4:	6033      	strmi	r3, [r6, #0]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	f015 0506 	ands.w	r5, r5, #6
 80076bc:	d106      	bne.n	80076cc <_printf_common+0x48>
 80076be:	f104 0a19 	add.w	sl, r4, #25
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	1a9b      	subs	r3, r3, r2
 80076c8:	42ab      	cmp	r3, r5
 80076ca:	dc26      	bgt.n	800771a <_printf_common+0x96>
 80076cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076d0:	1e13      	subs	r3, r2, #0
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	bf18      	it	ne
 80076d6:	2301      	movne	r3, #1
 80076d8:	0692      	lsls	r2, r2, #26
 80076da:	d42b      	bmi.n	8007734 <_printf_common+0xb0>
 80076dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076e0:	4649      	mov	r1, r9
 80076e2:	4638      	mov	r0, r7
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d01e      	beq.n	8007728 <_printf_common+0xa4>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	f003 0306 	and.w	r3, r3, #6
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	bf02      	ittt	eq
 80076f6:	68e5      	ldreq	r5, [r4, #12]
 80076f8:	6833      	ldreq	r3, [r6, #0]
 80076fa:	1aed      	subeq	r5, r5, r3
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	bf0c      	ite	eq
 8007700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007704:	2500      	movne	r5, #0
 8007706:	4293      	cmp	r3, r2
 8007708:	bfc4      	itt	gt
 800770a:	1a9b      	subgt	r3, r3, r2
 800770c:	18ed      	addgt	r5, r5, r3
 800770e:	2600      	movs	r6, #0
 8007710:	341a      	adds	r4, #26
 8007712:	42b5      	cmp	r5, r6
 8007714:	d11a      	bne.n	800774c <_printf_common+0xc8>
 8007716:	2000      	movs	r0, #0
 8007718:	e008      	b.n	800772c <_printf_common+0xa8>
 800771a:	2301      	movs	r3, #1
 800771c:	4652      	mov	r2, sl
 800771e:	4649      	mov	r1, r9
 8007720:	4638      	mov	r0, r7
 8007722:	47c0      	blx	r8
 8007724:	3001      	adds	r0, #1
 8007726:	d103      	bne.n	8007730 <_printf_common+0xac>
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007730:	3501      	adds	r5, #1
 8007732:	e7c6      	b.n	80076c2 <_printf_common+0x3e>
 8007734:	18e1      	adds	r1, r4, r3
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	2030      	movs	r0, #48	; 0x30
 800773a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773e:	4422      	add	r2, r4
 8007740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007748:	3302      	adds	r3, #2
 800774a:	e7c7      	b.n	80076dc <_printf_common+0x58>
 800774c:	2301      	movs	r3, #1
 800774e:	4622      	mov	r2, r4
 8007750:	4649      	mov	r1, r9
 8007752:	4638      	mov	r0, r7
 8007754:	47c0      	blx	r8
 8007756:	3001      	adds	r0, #1
 8007758:	d0e6      	beq.n	8007728 <_printf_common+0xa4>
 800775a:	3601      	adds	r6, #1
 800775c:	e7d9      	b.n	8007712 <_printf_common+0x8e>
	...

08007760 <_printf_i>:
 8007760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	7e0f      	ldrb	r7, [r1, #24]
 8007766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007768:	2f78      	cmp	r7, #120	; 0x78
 800776a:	4691      	mov	r9, r2
 800776c:	4680      	mov	r8, r0
 800776e:	460c      	mov	r4, r1
 8007770:	469a      	mov	sl, r3
 8007772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007776:	d807      	bhi.n	8007788 <_printf_i+0x28>
 8007778:	2f62      	cmp	r7, #98	; 0x62
 800777a:	d80a      	bhi.n	8007792 <_printf_i+0x32>
 800777c:	2f00      	cmp	r7, #0
 800777e:	f000 80d4 	beq.w	800792a <_printf_i+0x1ca>
 8007782:	2f58      	cmp	r7, #88	; 0x58
 8007784:	f000 80c0 	beq.w	8007908 <_printf_i+0x1a8>
 8007788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800778c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007790:	e03a      	b.n	8007808 <_printf_i+0xa8>
 8007792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007796:	2b15      	cmp	r3, #21
 8007798:	d8f6      	bhi.n	8007788 <_printf_i+0x28>
 800779a:	a101      	add	r1, pc, #4	; (adr r1, 80077a0 <_printf_i+0x40>)
 800779c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	0800780d 	.word	0x0800780d
 80077a8:	08007789 	.word	0x08007789
 80077ac:	08007789 	.word	0x08007789
 80077b0:	08007789 	.word	0x08007789
 80077b4:	08007789 	.word	0x08007789
 80077b8:	0800780d 	.word	0x0800780d
 80077bc:	08007789 	.word	0x08007789
 80077c0:	08007789 	.word	0x08007789
 80077c4:	08007789 	.word	0x08007789
 80077c8:	08007789 	.word	0x08007789
 80077cc:	08007911 	.word	0x08007911
 80077d0:	08007839 	.word	0x08007839
 80077d4:	080078cb 	.word	0x080078cb
 80077d8:	08007789 	.word	0x08007789
 80077dc:	08007789 	.word	0x08007789
 80077e0:	08007933 	.word	0x08007933
 80077e4:	08007789 	.word	0x08007789
 80077e8:	08007839 	.word	0x08007839
 80077ec:	08007789 	.word	0x08007789
 80077f0:	08007789 	.word	0x08007789
 80077f4:	080078d3 	.word	0x080078d3
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	602a      	str	r2, [r5, #0]
 8007800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007808:	2301      	movs	r3, #1
 800780a:	e09f      	b.n	800794c <_printf_i+0x1ec>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	682b      	ldr	r3, [r5, #0]
 8007810:	0607      	lsls	r7, r0, #24
 8007812:	f103 0104 	add.w	r1, r3, #4
 8007816:	6029      	str	r1, [r5, #0]
 8007818:	d501      	bpl.n	800781e <_printf_i+0xbe>
 800781a:	681e      	ldr	r6, [r3, #0]
 800781c:	e003      	b.n	8007826 <_printf_i+0xc6>
 800781e:	0646      	lsls	r6, r0, #25
 8007820:	d5fb      	bpl.n	800781a <_printf_i+0xba>
 8007822:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007826:	2e00      	cmp	r6, #0
 8007828:	da03      	bge.n	8007832 <_printf_i+0xd2>
 800782a:	232d      	movs	r3, #45	; 0x2d
 800782c:	4276      	negs	r6, r6
 800782e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007832:	485a      	ldr	r0, [pc, #360]	; (800799c <_printf_i+0x23c>)
 8007834:	230a      	movs	r3, #10
 8007836:	e012      	b.n	800785e <_printf_i+0xfe>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	6820      	ldr	r0, [r4, #0]
 800783c:	1d19      	adds	r1, r3, #4
 800783e:	6029      	str	r1, [r5, #0]
 8007840:	0605      	lsls	r5, r0, #24
 8007842:	d501      	bpl.n	8007848 <_printf_i+0xe8>
 8007844:	681e      	ldr	r6, [r3, #0]
 8007846:	e002      	b.n	800784e <_printf_i+0xee>
 8007848:	0641      	lsls	r1, r0, #25
 800784a:	d5fb      	bpl.n	8007844 <_printf_i+0xe4>
 800784c:	881e      	ldrh	r6, [r3, #0]
 800784e:	4853      	ldr	r0, [pc, #332]	; (800799c <_printf_i+0x23c>)
 8007850:	2f6f      	cmp	r7, #111	; 0x6f
 8007852:	bf0c      	ite	eq
 8007854:	2308      	moveq	r3, #8
 8007856:	230a      	movne	r3, #10
 8007858:	2100      	movs	r1, #0
 800785a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785e:	6865      	ldr	r5, [r4, #4]
 8007860:	60a5      	str	r5, [r4, #8]
 8007862:	2d00      	cmp	r5, #0
 8007864:	bfa2      	ittt	ge
 8007866:	6821      	ldrge	r1, [r4, #0]
 8007868:	f021 0104 	bicge.w	r1, r1, #4
 800786c:	6021      	strge	r1, [r4, #0]
 800786e:	b90e      	cbnz	r6, 8007874 <_printf_i+0x114>
 8007870:	2d00      	cmp	r5, #0
 8007872:	d04b      	beq.n	800790c <_printf_i+0x1ac>
 8007874:	4615      	mov	r5, r2
 8007876:	fbb6 f1f3 	udiv	r1, r6, r3
 800787a:	fb03 6711 	mls	r7, r3, r1, r6
 800787e:	5dc7      	ldrb	r7, [r0, r7]
 8007880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007884:	4637      	mov	r7, r6
 8007886:	42bb      	cmp	r3, r7
 8007888:	460e      	mov	r6, r1
 800788a:	d9f4      	bls.n	8007876 <_printf_i+0x116>
 800788c:	2b08      	cmp	r3, #8
 800788e:	d10b      	bne.n	80078a8 <_printf_i+0x148>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07de      	lsls	r6, r3, #31
 8007894:	d508      	bpl.n	80078a8 <_printf_i+0x148>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6861      	ldr	r1, [r4, #4]
 800789a:	4299      	cmp	r1, r3
 800789c:	bfde      	ittt	le
 800789e:	2330      	movle	r3, #48	; 0x30
 80078a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a8:	1b52      	subs	r2, r2, r5
 80078aa:	6122      	str	r2, [r4, #16]
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	464b      	mov	r3, r9
 80078b2:	aa03      	add	r2, sp, #12
 80078b4:	4621      	mov	r1, r4
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff fee4 	bl	8007684 <_printf_common>
 80078bc:	3001      	adds	r0, #1
 80078be:	d14a      	bne.n	8007956 <_printf_i+0x1f6>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	4833      	ldr	r0, [pc, #204]	; (80079a0 <_printf_i+0x240>)
 80078d4:	2778      	movs	r7, #120	; 0x78
 80078d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	6829      	ldr	r1, [r5, #0]
 80078de:	061f      	lsls	r7, r3, #24
 80078e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80078e4:	d402      	bmi.n	80078ec <_printf_i+0x18c>
 80078e6:	065f      	lsls	r7, r3, #25
 80078e8:	bf48      	it	mi
 80078ea:	b2b6      	uxthmi	r6, r6
 80078ec:	07df      	lsls	r7, r3, #31
 80078ee:	bf48      	it	mi
 80078f0:	f043 0320 	orrmi.w	r3, r3, #32
 80078f4:	6029      	str	r1, [r5, #0]
 80078f6:	bf48      	it	mi
 80078f8:	6023      	strmi	r3, [r4, #0]
 80078fa:	b91e      	cbnz	r6, 8007904 <_printf_i+0x1a4>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	f023 0320 	bic.w	r3, r3, #32
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	2310      	movs	r3, #16
 8007906:	e7a7      	b.n	8007858 <_printf_i+0xf8>
 8007908:	4824      	ldr	r0, [pc, #144]	; (800799c <_printf_i+0x23c>)
 800790a:	e7e4      	b.n	80078d6 <_printf_i+0x176>
 800790c:	4615      	mov	r5, r2
 800790e:	e7bd      	b.n	800788c <_printf_i+0x12c>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	6826      	ldr	r6, [r4, #0]
 8007914:	6961      	ldr	r1, [r4, #20]
 8007916:	1d18      	adds	r0, r3, #4
 8007918:	6028      	str	r0, [r5, #0]
 800791a:	0635      	lsls	r5, r6, #24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	d501      	bpl.n	8007924 <_printf_i+0x1c4>
 8007920:	6019      	str	r1, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0x1ca>
 8007924:	0670      	lsls	r0, r6, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0x1c0>
 8007928:	8019      	strh	r1, [r3, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	4615      	mov	r5, r2
 8007930:	e7bc      	b.n	80078ac <_printf_i+0x14c>
 8007932:	682b      	ldr	r3, [r5, #0]
 8007934:	1d1a      	adds	r2, r3, #4
 8007936:	602a      	str	r2, [r5, #0]
 8007938:	681d      	ldr	r5, [r3, #0]
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	2100      	movs	r1, #0
 800793e:	4628      	mov	r0, r5
 8007940:	f7f8 fc46 	bl	80001d0 <memchr>
 8007944:	b108      	cbz	r0, 800794a <_printf_i+0x1ea>
 8007946:	1b40      	subs	r0, r0, r5
 8007948:	6060      	str	r0, [r4, #4]
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	2300      	movs	r3, #0
 8007950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007954:	e7aa      	b.n	80078ac <_printf_i+0x14c>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	462a      	mov	r2, r5
 800795a:	4649      	mov	r1, r9
 800795c:	4640      	mov	r0, r8
 800795e:	47d0      	blx	sl
 8007960:	3001      	adds	r0, #1
 8007962:	d0ad      	beq.n	80078c0 <_printf_i+0x160>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	079b      	lsls	r3, r3, #30
 8007968:	d413      	bmi.n	8007992 <_printf_i+0x232>
 800796a:	68e0      	ldr	r0, [r4, #12]
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	4298      	cmp	r0, r3
 8007970:	bfb8      	it	lt
 8007972:	4618      	movlt	r0, r3
 8007974:	e7a6      	b.n	80078c4 <_printf_i+0x164>
 8007976:	2301      	movs	r3, #1
 8007978:	4632      	mov	r2, r6
 800797a:	4649      	mov	r1, r9
 800797c:	4640      	mov	r0, r8
 800797e:	47d0      	blx	sl
 8007980:	3001      	adds	r0, #1
 8007982:	d09d      	beq.n	80078c0 <_printf_i+0x160>
 8007984:	3501      	adds	r5, #1
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	9903      	ldr	r1, [sp, #12]
 800798a:	1a5b      	subs	r3, r3, r1
 800798c:	42ab      	cmp	r3, r5
 800798e:	dcf2      	bgt.n	8007976 <_printf_i+0x216>
 8007990:	e7eb      	b.n	800796a <_printf_i+0x20a>
 8007992:	2500      	movs	r5, #0
 8007994:	f104 0619 	add.w	r6, r4, #25
 8007998:	e7f5      	b.n	8007986 <_printf_i+0x226>
 800799a:	bf00      	nop
 800799c:	08007c49 	.word	0x08007c49
 80079a0:	08007c5a 	.word	0x08007c5a

080079a4 <memmove>:
 80079a4:	4288      	cmp	r0, r1
 80079a6:	b510      	push	{r4, lr}
 80079a8:	eb01 0402 	add.w	r4, r1, r2
 80079ac:	d902      	bls.n	80079b4 <memmove+0x10>
 80079ae:	4284      	cmp	r4, r0
 80079b0:	4623      	mov	r3, r4
 80079b2:	d807      	bhi.n	80079c4 <memmove+0x20>
 80079b4:	1e43      	subs	r3, r0, #1
 80079b6:	42a1      	cmp	r1, r4
 80079b8:	d008      	beq.n	80079cc <memmove+0x28>
 80079ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079c2:	e7f8      	b.n	80079b6 <memmove+0x12>
 80079c4:	4402      	add	r2, r0
 80079c6:	4601      	mov	r1, r0
 80079c8:	428a      	cmp	r2, r1
 80079ca:	d100      	bne.n	80079ce <memmove+0x2a>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079d6:	e7f7      	b.n	80079c8 <memmove+0x24>

080079d8 <_sbrk_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_sbrk_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 f9ca 	bl	8000d7c <_sbrk>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_sbrk_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_sbrk_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	200030f4 	.word	0x200030f4

080079f8 <_realloc_r>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4680      	mov	r8, r0
 80079fe:	4614      	mov	r4, r2
 8007a00:	460e      	mov	r6, r1
 8007a02:	b921      	cbnz	r1, 8007a0e <_realloc_r+0x16>
 8007a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a08:	4611      	mov	r1, r2
 8007a0a:	f7ff bc57 	b.w	80072bc <_malloc_r>
 8007a0e:	b92a      	cbnz	r2, 8007a1c <_realloc_r+0x24>
 8007a10:	f7ff fbe8 	bl	80071e4 <_free_r>
 8007a14:	4625      	mov	r5, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1c:	f000 f81b 	bl	8007a56 <_malloc_usable_size_r>
 8007a20:	4284      	cmp	r4, r0
 8007a22:	4607      	mov	r7, r0
 8007a24:	d802      	bhi.n	8007a2c <_realloc_r+0x34>
 8007a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a2a:	d812      	bhi.n	8007a52 <_realloc_r+0x5a>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f7ff fc44 	bl	80072bc <_malloc_r>
 8007a34:	4605      	mov	r5, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0ed      	beq.n	8007a16 <_realloc_r+0x1e>
 8007a3a:	42bc      	cmp	r4, r7
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4631      	mov	r1, r6
 8007a40:	bf28      	it	cs
 8007a42:	463a      	movcs	r2, r7
 8007a44:	f7ff fbc0 	bl	80071c8 <memcpy>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fbca 	bl	80071e4 <_free_r>
 8007a50:	e7e1      	b.n	8007a16 <_realloc_r+0x1e>
 8007a52:	4635      	mov	r5, r6
 8007a54:	e7df      	b.n	8007a16 <_realloc_r+0x1e>

08007a56 <_malloc_usable_size_r>:
 8007a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5a:	1f18      	subs	r0, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bfbc      	itt	lt
 8007a60:	580b      	ldrlt	r3, [r1, r0]
 8007a62:	18c0      	addlt	r0, r0, r3
 8007a64:	4770      	bx	lr
	...

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
